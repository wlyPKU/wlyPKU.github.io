<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Natural Language Processing with Deep Learning]]></title>
      <url>http://wlyPKU.github.io/2017/07/16/Deep-Learning-in-Machine-Translate/</url>
      <content type="html"><![CDATA[<p>Link summary of Topic: Natural Language Processing with Deep Learning<br><a id="more"></a></p>
<h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p> <strong><a href="https://cs224n.stanford.edu/" target="_blank" rel="external">Natural Language Processing with Deep Learning, stanford</a></strong><br>Slides and notes</p>
<ol>
<li><a href="/2017/07/16/Deep-Learning-in-Machine-Translate/word2vec.pdf">word2vec note</a><br>1.1 <a href="/2017/07/16/Deep-Learning-in-Machine-Translate/Word2vec_optimize.pptx">word2vec negative sample hierarchy softmax</a></li>
<li><a href="/2017/07/16/Deep-Learning-in-Machine-Translate/word2vec_note.pdf">word2vec slides</a></li>
<li><a href="/2017/07/16/Deep-Learning-in-Machine-Translate/rnn.pdf">RNN</a></li>
<li><a href="/2017/07/16/Deep-Learning-in-Machine-Translate/lstm.pdf">RNN, LSTMs and GRUs</a></li>
<li><a href="/2017/07/16/Deep-Learning-in-Machine-Translate/rnn_note.pdf">RNN, LSTMs and GRUs note</a></li>
<li><a href="/2017/07/16/Deep-Learning-in-Machine-Translate/attention.pdf">Neural Machine Translation and Models with <strong>Attention</strong>, decoder</a></li>
</ol>
<p>Video:<br>Standford视频: <a href="https://www.youtube.com/playlist?list=PL3FW7Lu3i5Jsnh1rnUwq_TcylNr7EkRe6" target="_blank" rel="external">Lecture Collection | Natural Language Processing with Deep Learning (Winter 2017)</a><br>Word Embedding: <a href="https://www.youtube.com/watch?v=D-ekE-Wlcds" target="_blank" rel="external">Word Embedding Explained and Visualized</a></p>
<p>Book:<br><a href="http://www.deeplearningbook.org/contents/rnn.html" target="_blank" rel="external">Sequence Modeling: Recurrent and Recursive Nets</a><br><a href="/2017/07/16/tensorflow.pdf">TensorFlow实战</a><br><a href="/2017/07/16/tensorflow_google.pdf">Tensorflow实战Google深度学习框架</a><br><a href="/2017/07/16/deep_learning.pdf">深度学习</a></p>
<p> <strong><a href="http://cs231n.stanford.edu/index.html" target="_blank" rel="external">Convolutional Neural Networks for Visual Recognition</a></strong></p>
<ol>
<li><a href="/2017/07/16/Deep-Learning-in-Machine-Translate/rnn_cs231.pdf">Recurrent Neural Networks</a></li>
</ol>
<h1 id="Paper-and-git"><a href="#Paper-and-git" class="headerlink" title="Paper and git"></a>Paper and git</h1><p><a href="http://aclweb.org/anthology/D15-1166" target="_blank" rel="external">Effective Approaches to Attention-based Neural Machine Translation</a><br><a href="https://arxiv.org/abs/1409.0473" target="_blank" rel="external">Neural Machine Translation by Jointly Learning to Align and Translate</a><br><a href="https://arxiv.org/abs/1706.03762" target="_blank" rel="external">attention is all you need</a><br><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">Git:Tensorflow</a><br><a href="https://github.com/zhedongzheng/finch/blob/master/README-CH.md" target="_blank" rel="external">Git:finch</a></p>
<h1 id="BLOGs"><a href="#BLOGs" class="headerlink" title="BLOGs"></a>BLOGs</h1><p><a href="http://www.csdn.net/article/2015-08-28/2825569" target="_blank" rel="external">递归神经网络不可思议的有效性</a><br><a href="http://blog.csdn.net/jerr__y/article/details/53749693" target="_blank" rel="external">seq2seq学习笔记</a><br><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="external">Understanding LSTM Networks</a><br><a href="http://www.jianshu.com/p/9dc9f41f0b29" target="_blank" rel="external">理解 LSTM 网络</a><br><a href="http://blog.csdn.net/malefactor/article/details/50550211" target="_blank" rel="external">自然语言处理中的Attention Model：是什么及为什么</a><br><a href="http://blog.csdn.net/mijiaoxiaosan/article/details/73251443" target="_blank" rel="external">对Attention is all you need 的理解</a><br><a href="http://www.cnfeelings.com/Home/Detail/49B96405C82AE7AA" target="_blank" rel="external">谷歌推出基于注意机制的全新翻译框架，Attention is All You Need!</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[推荐算法概要]]></title>
      <url>http://wlyPKU.github.io/2017/07/10/Factorization-Machines/</url>
      <content type="html"><![CDATA[<p>推荐系统算法<br><a id="more"></a></p>
<h1 id="基于统计的方法"><a href="#基于统计的方法" class="headerlink" title="基于统计的方法"></a>基于统计的方法</h1><h2 id="基于人口学的推荐"><a href="#基于人口学的推荐" class="headerlink" title="基于人口学的推荐"></a>基于人口学的推荐</h2><p>基于人口统计学的推荐机制（Demographic-based Recommendation）是一种最易于实现的推荐方法，它只是简单的根据系统用户的基本信息发现用户的相关程度，然后将相似用户喜爱的其他物品推荐给当前用户。<br><img src="/2017/07/10/Factorization-Machines/static_recommand.png" alt="static_recommand.png" title=""><br>从图中可以很清楚的看到，首先，系统对每个用户都有一个用户 Profile 的建模，其中包括用户的基本信息，例如用户的年龄，性别等等；然后，系统会根据用户的 Profile 计算用户的相似度，可以看到用户 A 的 Profile 和用户 C 一样，那么系统会认为用户 A 和 C 是相似用户，在推荐引擎中，可以称他们是“邻居”；最后，基于“邻居”用户群的喜好推荐给当前用户一些物品，图中将用户 A 喜欢的物品 A 推荐给用户 C。</p>
<p>这种基于人口统计学的推荐机制的好处在于：</p>
<ol>
<li>因为不使用当前用户对物品的喜好历史数据，所以对于新用户来讲没有“冷启动（Cold Start）”的问题。</li>
<li>这个方法不依赖于物品本身的数据，所以这个方法在不同物品的领域都可以使用，它是领域独立的（domain-independent）。</li>
</ol>
<p>那么这个方法的缺点和问题是什么呢？这种基于用户的基本信息对用户进行分类的方法过于粗糙，尤其是对品味要求较高的领域，比如图书，电影和音乐等领域，无法得到很好的推荐效果。可能在一些电子商务的网站中，这个方法可以给出一些简单的推荐。另外一个局限是，这个方法可能涉及到一些与信息发现问题本身无关却比较敏感的信息，比如用户的年龄等，这些用户信息不是很好获取。</p>
<h2 id="基于内容的推荐"><a href="#基于内容的推荐" class="headerlink" title="基于内容的推荐"></a>基于内容的推荐</h2><img src="/2017/07/10/Factorization-Machines/item_recommand.png" alt="item_recommand.png" title="">
<p>上图中给出了基于内容推荐的一个典型的例子，电影推荐系统，首先我们需要对电影的元数据有一个建模，这里只简单的描述了一下电影的类型；然后通过电影的元数据发现电影间的相似度，因为类型都是“爱情，浪漫”电影 A 和 C 被认为是相似的电影（当然，只根据类型是不够的，要得到更好的推荐，我们还可以考虑电影的导演，演员等等）；最后实现推荐，对于用户 A，他喜欢看电影 A，那么系统就可以给他推荐类似的电影 C。</p>
<p>这种基于内容的推荐机制的好处在于它能很好的建模用户的口味，能提供更加精确的推荐。但它也存在以下几个问题：</p>
<ol>
<li>需要对物品进行分析和建模，推荐的质量依赖于对物品模型的完整和全面程度。在现在的应用中我们可以观察到关键词和标签（Tag）被认为是描述物品元数据的一种简单有效的方法。</li>
<li>物品相似度的分析仅仅依赖于物品本身的特征，这里没有考虑人对物品的态度。</li>
<li>因为需要基于用户以往的喜好历史做出推荐，所以对于新用户有“冷启动”的问题。</li>
</ol>
<p>虽然这个方法有很多不足和问题，但他还是成功的应用在一些电影，音乐，图书的社交站点，有些站点还请专业的人员对物品进行基因编码，比如潘多拉，在一份报告中说道，在潘多拉的推荐引擎中，每首歌有超过 100 个元数据特征，包括歌曲的风格，年份，演唱者等等。</p>
<h1 id="基于”邻域”的方法"><a href="#基于”邻域”的方法" class="headerlink" title="基于”邻域”的方法"></a>基于”邻域”的方法</h1><h2 id="基于用户相似的协同过滤算法"><a href="#基于用户相似的协同过滤算法" class="headerlink" title="基于用户相似的协同过滤算法"></a>基于用户相似的协同过滤算法</h2><p>基于用户的协同过滤推荐算法拆分为两个步骤：</p>
<ol>
<li>找到与目标用户兴趣相似的用户集合</li>
<li>找到这个集合中用户喜欢的、并且目标用户没有听说过的物品推荐给目标用户</li>
</ol>
<h3 id="发现兴趣相似的用户"><a href="#发现兴趣相似的用户" class="headerlink" title="发现兴趣相似的用户"></a>发现兴趣相似的用户</h3><p>通常用 Jaccard 公式或者余弦相似度计算两个用户之间的相似度。设 N(u) 为用户 u 喜欢的物品集合，N(v) 为用户 v 喜欢的物品集合，那么 u 和 v 的相似度是多少呢：<br>Jaccard 公式：<br>$$<br>w_{uv} = \frac{|N(u)\cap N(v)|}{|N(u)\cup N(v)|}<br>$$<br>余弦相似度：<br>$$<br>w_{uv} = \frac{|N(u)\cap N(v)|}{\sqrt{|N(u)\cup N(v)|}}<br>$$<br>假设目前共有4个用户： A、B、C、D；共有5个物品：a、b、c、d、e。用户与物品的关系（用户喜欢物品）如下图所示：<br><img src="/2017/07/10/Factorization-Machines/userCF_1.png" alt="userCF_1.png" title=""><br>如何一下子计算所有用户之间的相似度呢？为计算方便，通常首先需要建立“物品—用户”的倒排表，如下图所示:<br><img src="/2017/07/10/Factorization-Machines/userCF_2.png" alt="userCF_2.png" title=""><br>然后对于每个物品，喜欢他的用户，两两之间相同物品加1。例如喜欢物品 a 的用户有 A 和 B，那么在矩阵中他们两两加1。如下图所示：<br><img src="/2017/07/10/Factorization-Machines/userCF_3.png" alt="userCF_3.png" title=""><br>计算用户两两之间的相似度，上面的矩阵仅仅代表的是公式的分子部分。以余弦相似度为例，对上图进行进一步计算：<br><img src="/2017/07/10/Factorization-Machines/userCF_4.png" alt="userCF_4.png" title=""><br>到此，计算用户相似度就大功告成，可以很直观的找到与目标用户兴趣较相似的用户。</p>
<h3 id="推荐物品"><a href="#推荐物品" class="headerlink" title="推荐物品"></a>推荐物品</h3><p>首先需要从矩阵中找出与目标用户 u 最相似的 K 个用户，用集合 S(u, K) 表示，将 S 中用户喜欢的物品全部提取出来，并去除 u 已经喜欢的物品。对于每个候选物品 i ，用户 u 对它感兴趣的程度用如下公式计算：<br>$$<br>p(u,i) = \sum_{v\in S(u,K)\cap N(i)}w_{uv}\times r_{vi}<br>$$<br>其中 $r_{vi}$表示用户 v 对 i 的喜欢程度，在本例中都是为 1，在一些需要用户给予评分的推荐系统中，则要代入用户评分。<br>举个例子，假设我们要给 A 推荐物品，选取 K = 3 个相似用户，相似用户则是：B、C、D，那么他们喜欢过并且 A 没有喜欢过的物品有：c、e，那么分别计算 p(A, c) 和 p(A, e)：<br>$$<br>p(A,c) = w_{AB} + w_{AD} = \frac{1}{\sqrt{6}} + \frac{1}{\sqrt{9}} = 0.7416 \\<br>p(A,e) = w_{AC} + w_{AD} = \frac{1}{\sqrt{6}} + \frac{1}{\sqrt{9}} = 0.7416<br>$$<br>看样子用户 A 对 c 和 e 的喜欢程度可能是一样的，在真实的推荐系统中，只要按得分排序，取前几个物品就可以了。</p>
<h3 id="对热门物品的改进"><a href="#对热门物品的改进" class="headerlink" title="对热门物品的改进"></a>对热门物品的改进</h3><p>可以根据用户行为计算用户的兴趣相似度：<br>$$<br>w_{uv} = \frac{\sum_{i\in N(u) \cap N(v)}\frac{1}{log(1+|N(i)|)}}{|N(u)\cup N(v)|}<br>$$<br>该公式通过$\frac{1}{log(1+|N(i)|)}$惩罚了用户u和用户v共同兴趣列表中热门物品对他们相似度的影响。</p>
<h2 id="基于物品相似的协同过滤算法"><a href="#基于物品相似的协同过滤算法" class="headerlink" title="基于物品相似的协同过滤算法"></a>基于物品相似的协同过滤算法</h2><p>基本思想是找出一个用户有过正反馈的物品的相似的物品来给其作为推荐：<br>算法可以拆分为两个步骤：</p>
<ol>
<li>计算物品之间的相似度</li>
<li>根据物品的相似度和用户的历史行为给用户生成推荐列表</li>
</ol>
<h3 id="计算物品之间的相似度"><a href="#计算物品之间的相似度" class="headerlink" title="计算物品之间的相似度"></a>计算物品之间的相似度</h3><p>我们定义物品的相似度，公式为<br>$$<br>w_{ij} = \frac{|N(i) \cap N(j)|}{|N(i)|}<br>$$<br>其中分母|N(i)|是喜欢物品i的用户数，而分子$|N(i) \cap N(j)|$是同时喜欢物品i和物品j的用户数。因此，公式可以理解为喜欢物品i的用户中有多少比例的用户也喜欢物品j。<br>同时，为了避免总推荐出热门的物品，可以用下面的公式：<br>$$<br>w_{ij} = \frac{|N(i) \cap N(j)|}{\sqrt{|N(i)||N(j)|}}<br>$$<br>假设用户A对物品a,b,d有过评价，用户B对物品b,c,e有过评价，如下图：</p>
<p>A : a b d<br>B : b c e<br>C : c d<br>D : b c d<br>E : a d<br>根据上面用户的行为构建:用户——物品倒排表：例如：物品a有用户A和E做过评价。<br>a : A E<br>b : A B D<br>c : B C D<br>d : A C D E<br>e : B<br>根据上面的倒排表我们可以构建一个相似度矩阵：<br><img src="/2017/07/10/Factorization-Machines/itemCF_1.png" alt="itemCF_1.png" title=""></p>
<p>图中最左边的是用户输入的用户行为记录，每一行代表用户感兴趣的物品集合，然后对每个物品集合，我们将里面的物品两两加一，得到一个矩阵。最终将这些矩阵进行相加得到上面的C矩阵。其中C[i][j]记录了同时喜欢物品i和j的用户数。这样我们就得到了物品之间的相似度矩阵W。</p>
<h3 id="根据物品的相似度和用户的历史行为记录给用户生成推荐列表"><a href="#根据物品的相似度和用户的历史行为记录给用户生成推荐列表" class="headerlink" title="根据物品的相似度和用户的历史行为记录给用户生成推荐列表"></a>根据物品的相似度和用户的历史行为记录给用户生成推荐列表</h3><p>ItemCF通过下面的公式计算用户u对一个物品j的兴趣：<br>$$<br>p(u,j) = \sum_{i \in N(u) \cap S(j,k)}w_{ji}\times r_{ui}<br>$$<br>这里的N(u)代表用户喜欢的物品的集合，S(j,k)是和物品j最相似的的k个物品的集合，wij是物品j和i的相似度，r_ui代表用户u对物品i的兴趣。该公式的含义是，和用户历史上最感兴趣的物品月相似的物品，越有可能在用户的推荐列表中获得比较高的排名。</p>
<h3 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h3><p>（1）用户活跃度对物品相似度的影响<br>即认为活跃用户对物品相似度的贡献应该小于不活跃的用户，所以增加一个IUF（Inverse User Frequence）参数来修正物品相似度的计算公式：<br>$$<br>w_{ij} = \frac{\sum_{u \in N(i) \cap N(j)}\frac{1}{log(1+|N(u)|}}{\sqrt{|N(i)||N(j)|}}<br>$$<br>用这种相似度计算的ItemCF被记为ItemCF-IUF。<br>ItemCF-IUF在准确率和召回率两个指标上和ItemCF相近，但它明显提高了推荐结果的覆盖率，降低了推荐结果的流行度，从这个意义上说，ItemCF-IUF确实改进了ItemCF的综合性能。</p>
<p>（2）物品相似度的归一化<br>Karypis在研究中发现如果将ItemCF的相似度矩阵按最大值归一化，可以提高推荐的准确度。其研究表明，如果已经得到了物品相似度矩阵w，那么可用如下公式得到归一化之后的相似度矩阵w’：<br>$$<br>w’_{ij} = \frac{w_{ij}}{max_j{w_{ij}}}<br>$$<br>最终结果表明，归一化的好处不仅仅在于增加推荐的准确度，它还可以提高推荐的覆盖率和多样性。用这种相似度计算的ItemCF被记为ItemCF-Norm。</p>
<h2 id="两种算法的比较"><a href="#两种算法的比较" class="headerlink" title="两种算法的比较"></a>两种算法的比较</h2><h3 id="计算复杂度"><a href="#计算复杂度" class="headerlink" title="计算复杂度"></a>计算复杂度</h3><p>Item CF 和 User CF 是基于协同过滤推荐的两个最基本的算法，User CF 是很早以前就提出来了，Item CF 是从 Amazon 的论文和专利发表之后（2001 年左右）开始流行，大家都觉得 Item CF 从性能和复杂度上比 User CF 更优，其中的一个主要原因就是对于一个在线网站，用户的数量往往大大超过物品的数量，同时物品的数据相对稳定，因此计算物品的相似度不但计算量较小，同时也不必频繁更新。但我们往往忽略了这种情况只适应于提供商品的电子商务网站，对于新闻，博客或者微内容的推荐系统，情况往往是相反的，物品的数量是海量的，同时也是更新频繁的，所以单从复杂度的角度，这两个算法在不同的系统中各有优势，推荐引擎的设计者需要根据自己应用的特点选择更加合适的算法。</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>在非社交网络的网站中，内容内在的联系是很重要的推荐原则，它比基于相似用户的推荐原则更加有效。比如在购书网站上，当你看一本书的时候，推荐引擎会给你推荐相关的书籍，这个推荐的重要性远远超过了网站首页对该用户的综合推荐。可以看到，在这种情况下，Item CF 的推荐成为了引导用户浏览的重要手段。同时 Item CF 便于为推荐做出解释，在一个非社交网络的网站中，给某个用户推荐一本书，同时给出的解释是某某和你有相似兴趣的人也看了这本书，这很难让用户信服，因为用户可能根本不认识那个人；但如果解释说是因为这本书和你以前看的某本书相似，用户可能就觉得合理而采纳了此推荐。相反的，在现今很流行的社交网络站点中，User CF 是一个更不错的选择，User CF 加上社会网络信息，可以增加用户对推荐解释的信服程度。</p>
<h3 id="推荐多样性和精度"><a href="#推荐多样性和精度" class="headerlink" title="推荐多样性和精度"></a>推荐多样性和精度</h3><p>研究推荐引擎的学者们在相同的数据集合上分别用 User CF 和 Item CF 计算推荐结果，发现推荐列表中，只有 50% 是一样的，还有 50% 完全不同。但是这两个算法确有相似的精度，所以可以说，这两个算法是很互补的。<br>关于推荐的多样性，有两种度量方法：<br>第一种度量方法是从单个用户的角度度量，就是说给定一个用户，查看系统给出的推荐列表是否多样，也就是要比较推荐列表中的物品之间两两的相似度，不难想到，对这种度量方法，Item CF 的多样性显然不如 User CF 的好，因为 Item CF 的推荐就是和以前看的东西最相似的。<br>第二种度量方法是考虑系统的多样性，也被称为覆盖率 (Coverage)，它是指一个推荐系统是否能够提供给所有用户丰富的选择。在这种指标下，Item CF 的多样性要远远好于 User CF, 因为 User CF 总是倾向于推荐热门的，从另一个侧面看，也就是说，Item CF 的推荐有很好的新颖性，很擅长推荐长尾里的物品。所以，尽管大多数情况，Item CF 的精度略小于 User CF， 但如果考虑多样性，Item CF 却比 User CF 好很多。<br>如果你对推荐的多样性还心存疑惑，那么下面我们再举个实例看看 User CF 和 Item CF 的多样性到底有什么差别。首先，假设每个用户兴趣爱好都是广泛的，喜欢好几个领域的东西，不过每个用户肯定也有一个主要的领域，对这个领域会比其他领域更加关心。给定一个用户，假设他喜欢 3 个领域 A,B,C，A 是他喜欢的主要领域，这个时候我们来看 User CF 和 Item CF 倾向于做出什么推荐：如果用 User CF, 它会将 A,B,C 三个领域中比较热门的东西推荐给用户；而如果用 ItemCF，它会基本上只推荐 A 领域的东西给用户。所以我们看到因为 User CF 只推荐热门的，所以它在推荐长尾里项目方面的能力不足；而 Item CF 只推荐 A 领域给用户，这样他有限的推荐列表中就可能包含了一定数量的不热门的长尾物品，同时 Item CF 的推荐对这个用户而言，显然多样性不足。但是对整个系统而言，因为不同的用户的主要兴趣点不同，所以系统的覆盖率会比较好。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从上面的分析，可以很清晰的看到，这两种推荐都有其合理性，但都不是最好的选择，因此他们的精度也会有损失。其实对这类系统的最好选择是，如果系统给这个用户推荐 30 个物品，既不是每个领域挑选 10 个最热门的给他，也不是推荐 30 个 A 领域的给他，而是比如推荐 15 个 A 领域的给他，剩下的 15 个从 B,C 中选择。所以结合 User CF 和 Item CF 是最优的选择，结合的基本原则就是当采用 Item CF 导致系统对个人推荐的多样性不足时，我们通过加入 User CF 增加个人推荐的多样性，从而提高精度，而当因为采用 User CF 而使系统的整体多样性不足时，我们可以通过加入 Item CF 增加整体的多样性，同样同样可以提高推荐的精度。<br>用户对推荐算法的适应度<br>前面我们大部分都是从推荐引擎的角度考虑哪个算法更优，但其实我们更多的应该考虑作为推荐引擎的最终使用者 – 应用用户对推荐算法的适应度。<br>对于 User CF，推荐的原则是假设用户会喜欢那些和他有相同喜好的用户喜欢的东西，但如果一个用户没有相同喜好的朋友，那 User CF 的算法的效果就会很差，所以一个用户对的 CF 算法的适应度是和他有多少共同喜好用户成正比的。<br>Item CF 算法也有一个基本假设，就是用户会喜欢和他以前喜欢的东西相似的东西，那么我们可以计算一个用户喜欢的物品的自相似度。一个用户喜欢物品的自相似度大，就说明他喜欢的东西都是比较相似的，也就是说他比较符合 Item CF 方法的基本假设，那么他对 Item CF 的适应度自然比较好；反之，如果自相似度小，就说明这个用户的喜好习惯并不满足 Item CF 方法的基本假设，那么对于这种用户，用 Item CF 方法做出好的推荐的可能性非常低。</p>
<h1 id="隐语义模型"><a href="#隐语义模型" class="headerlink" title="隐语义模型"></a>隐语义模型</h1><h2 id="SVD-原理"><a href="#SVD-原理" class="headerlink" title="SVD 原理"></a>SVD 原理</h2><p>考虑CF中最为常见的用户给电影评分的场景，我们需要一个数学模型来模拟用户给电影打分的场景，比如对评分进行预测。</p>
<p>将评分矩阵U看作是两个矩阵的乘积：<br><img src="/2017/07/10/Factorization-Machines/svd.png" alt="svd.png" title=""></p>
<p>其中，u_{xy} 可以看作是user x对电影的隐藏特质y的热衷程度，而i_{yz}可以看作是特质y在电影z中的体现程度。那么上述模型的评分预测公式为：<br>$$<br>r’_{ui} = q_i^Tp_u<br>$$<br>q 和 p 分别对应了电影和用户在各个隐藏特质上的特征向量。<br>以上的模型中，用户和电影都体现得无差别，例如某些用户非常挑剔，总是给予很低的评分；或是某部电影拍得奇烂，恶评如潮。为了模拟以上的情况，需要引入 baseline predictor.<br>$$<br>r’_{ui} = \mu + b_u + b_i + q_i^T p_u<br>$$<br>其中$\mu$为所有评分基准，b_i 为电影 i 的评分均值相对$\mu$的偏移，b_u 类似。注意，这些均为参数，需要通过训练得到具体数值，不过可以用相应的均值作为初始化时的估计。</p>
<p>模型参数b_i,b_u,q_i,p_u通过最优化下面这个目标函数获得：<br>$$<br>min \sum_{(u,i)\in K}(r_{ui}-r’_{ui})^2+\lambda{\sum_u(b_u^2+||p_u||^2)}+\lambda{\sum_i(b_i^2+||q_i||^2)}<br>$$</p>
<h2 id="使用隐因子的矩阵分解法"><a href="#使用隐因子的矩阵分解法" class="headerlink" title="使用隐因子的矩阵分解法"></a>使用隐因子的矩阵分解法</h2><p>在矩阵分解法中，有一个假设，就是每一个用户都有一个长度为k的特征向量，每一部电影也有一个相同长度的特征向量（k一般需要用户指定）。那么所有用户的特征向量排列成一个矩阵 U 的维度为UserNum $\times$ k。其中用户i对应的向量为$U_i$。 所有电影的特征向量排列成一个矩阵M 的维度为MoiveNum $\times$ k。其中电影j对应的向量为$U_j$。其中电影j对应的向量为$U_j$。那么用户i对电影j的评分 $V_ij = &lt; U_i , M_j &gt; $（$&lt;&gt;$代表点乘）。那么所有用户和所有电影之间的评分就可以用两个矩阵相乘来得到<br>$$<br>V’ = UM^T<br>$$<br>注意这里是$V’$而不是$V$。那么问题来了，我们如何确定这个U和M？一个自然的想法就是让$V’$和$V$尽可能地相等。那么这又有一个问题，那就是$V$（即数据集）有很多地方是没有评分的，如何判断$V$和$V’$是否相等？那么我们在这里只计算有评分处的MSE。这样既没有使用额外的信息，又能判断两者是否接近。那么自然而然得就引入了我们的lost function：<br>$$<br>E=\frac{1}{2}\sum_{i=1}^n\sum_{j=1}^mI_{ij}(V_{ij}-p(U_i,M_j))^2 + \frac{k_u}{2}\sum_{i=1}^n||U_i||^2+\frac{k_m}{2}\sum_{i=1}^m||M_j||^2<br>$$<br>这里$I_{ij}$表示用户i对电影j有评分记录。后面两项是惩罚因子，目的是防止过拟合。</p>
<p>到这里我们就已经完成了基础的矩阵分解法。那么进一步，为了实现更好的效果，我们要考虑每个个体打分的影响，因为有些用户打分偏高，有些用户打分偏低。同样对于电影和所有的评分。所以我们评分的计算公式应该改为：<br>$$<br>V_{ij} =<br>&lt; U_i,M_j&gt; + mean + a_i +b_j<br>$$<br>　　其中mean是所有评分的平均值，$a_i$是用户i打分的平均值，$b_j$是电影j得分的平均值。其中mean认为是一个常数，而$a_i$和$b_j$都是需要优化的参数。</p>
<h2 id="SVD-原理-1"><a href="#SVD-原理-1" class="headerlink" title="SVD++原理"></a>SVD++原理</h2><p>SVD算法是指在SVD的基础上引入隐式反馈，使用用户的历史浏览数据、用户历史评分数据、电影的历史浏览数据、电影的历史评分数据等作为新的参数。某个用户对某个电影进行了评分，那么说明他看过这部电影，那么这样的行为事实上蕴含了一定的信息，因此我们可以这样来理解问题：评分的行为从侧面反映了用户的喜好，可以将这样的反映通过隐式参数的形式体现在模型中，从而得到一个更为精细的模型，便是 SVD++.<br>$$<br>r’_{ui} = \mu + b_u + b_i + q_i^T (p_u + \frac{1}{\sqrt{|N(u)|}}\sum_{j\in N(u)}y_{j})<br>$$<br>其中 N(u) 为该用户所评价过的所有电影的集合，yj为隐藏的“评价了电影 j”反映出的个人喜好偏置。<br>模型参数$b_i,b_u,q_i,p_u,y_j$通过最优化下面这个目标函数获得：<br>$$<br>min \sum_{(u,i)\in K}(r_{ui}-r’_{ui})^2+\lambda{\sum_u(b_u^2+||p_u||^2)}+\lambda{\sum_i(b_i^2+||q_i||^2+||y_i||^2)}<br>$$</p>
<p>与SVD方法类似，可以通过梯度下降算法进行求解。</p>
<h2 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h2><p>其中线性SVM为：<br>$$<br>Y_{SVM} = w_0 + \sum_{i=1}^n w_ix_i<br>$$<br>如果使用多项式的核函数，以d=2为例，那么有:<br>$$<br>K(x, z) = ( &lt; x, z &gt;  + 1 )^d<br>$$<br>因此，<br>$$<br>Y_{SVM} = w_0 + \sqrt{2}\sum_{i=1}^n w_ix_i + \sum_{i=1}^nw_{i,i}^{(2)}x_i^2 + \sqrt{2} \sum_{i=1}^n\sum_{j=1}^n w_{i,i}^{(2)}x_ix_j<br>$$<br>可以看到,d=2时的FM跟核函数为多项式的SVM形式相同，不同点在于SVM的$w_{i,j}$是完全没有关系的($w_{i,j}$与$w_{i,k}$),而在FM中$ &lt; v_i, v_j &gt; $ 与$ &lt; v_i, v_k &gt; $ 相关。</p>
<h2 id="PITF-基于两两交互张量分解模型的个性化标签推荐"><a href="#PITF-基于两两交互张量分解模型的个性化标签推荐" class="headerlink" title="PITF(基于两两交互张量分解模型的个性化标签推荐)"></a>PITF(基于两两交互张量分解模型的个性化标签推荐)</h2><p>为了形式化描述个性化标签推荐问题，我们使用数学符号：U为所有用户集合，I是所有产品集合，T是所有标签集合。历史标签信息由S⊆U×I×T给定。<br>我们的模型将用户、标签和产品之间的关系分解为两两交互的关系：<br>$$<br>y_{u,i,t} = w_0 + w_u + w_i + w_t + &lt; v_u, v_i &gt; + &lt; v_u, v_t &gt; + &lt; v_t, v_i &gt;<br>$$<br>因为给定的文章是同一篇，所以可以简化为：<br>$$<br>y_{u,i,t} = w_t + &lt; v_u, v_t &gt; + &lt; v_t, v_i &gt;<br>$$<br>因此可以看到，PITF与二值的FM是几乎相同的，不同点还是不同参数$ &lt; v_i, v_j &gt; $ 与$ &lt; v_i, v_k &gt; $ 是否相关的问题。</p>
<h2 id="FPMC"><a href="#FPMC" class="headerlink" title="FPMC"></a>FPMC</h2><p>状态转移+ 张量分解，请见<a href="http://www.docin.com/p-1697787681.html" target="_blank" rel="external">基于个性化马尔科夫链的推荐算法</a></p>
<h1 id="FM"><a href="#FM" class="headerlink" title="FM"></a>FM</h1><img src="/2017/07/10/Factorization-Machines/1.png" alt="1.png" title="">
<img src="/2017/07/10/Factorization-Machines/2.png" alt="2.png" title="">
<img src="/2017/07/10/Factorization-Machines/3.png" alt="3.png" title="">
<img src="/2017/07/10/Factorization-Machines/4.png" alt="4.png" title="">
<img src="/2017/07/10/Factorization-Machines/5.png" alt="5.png" title="">
<img src="/2017/07/10/Factorization-Machines/6.png" alt="6.png" title="">
<img src="/2017/07/10/Factorization-Machines/7.png" alt="7.png" title="">
<img src="/2017/07/10/Factorization-Machines/8.png" alt="8.png" title="">
<img src="/2017/07/10/Factorization-Machines/9.png" alt="9.png" title="">
<img src="/2017/07/10/Factorization-Machines/10.png" alt="10.png" title="">
<img src="/2017/07/10/Factorization-Machines/11.png" alt="11.png" title="">
<img src="/2017/07/10/Factorization-Machines/12.png" alt="12.png" title="">
<img src="/2017/07/10/Factorization-Machines/13.png" alt="13.png" title="">
<img src="/2017/07/10/Factorization-Machines/14.png" alt="14.png" title="">
<img src="/2017/07/10/Factorization-Machines/15.png" alt="15.png" title="">
<p>FM（Factorization Machine）是由Konstanz大学Steffen Rendle（现任职于Google）于2010年最早提出的，旨在解决稀疏数据下的特征组合问题[7]。下面以一个示例引入FM模型。假设一个广告分类的问题，根据用户和广告位相关的特征，预测用户是否点击了广告。源数据如下<br><img src="/2017/07/10/Factorization-Machines/fm_1.png" alt="fm_1.png" title=""><br>“Clicked?”是label，Country、Day、Ad_type是特征。由于三种特征都是categorical类型的，需要经过独热编码（One-Hot Encoding）转换成数值型特征。<br><img src="/2017/07/10/Factorization-Machines/fm_2.png" alt="fm_2.png" title=""><br>由上表可以看出，经过One-Hot编码之后，大部分样本数据特征是比较稀疏的。上面的样例中，每个样本有7维特征，但平均仅有3维特征具有非零值。实际上，这种情况并不是此例独有的，在真实应用场景中这种情况普遍存在。例如，CTR/CVR预测时，用户的性别、职业、教育水平、品类偏好，商品的品类等，经过One-Hot编码转换后都会导致样本数据的稀疏性。特别是商品品类这种类型的特征，如商品的末级品类约有550个，采用One-Hot编码生成550个数值特征，但每个样本的这550个特征，有且仅有一个是有效的（非零）。由此可见，数据稀疏性是实际问题中不可避免的挑战。</p>
<p>One-Hot编码的另一个特点就是导致特征空间大。例如，商品品类有550维特征，一个categorical特征转换为550维数值特征，特征空间剧增。</p>
<p>同时通过观察大量的样本数据可以发现，某些特征经过关联之后，与label之间的相关性就会提高。例如，“USA”与“Thanksgiving”、“China”与“Chinese New Year”这样的关联特征，对用户的点击有着正向的影响。换句话说，来自“China”的用户很可能会在“Chinese New Year”有大量的浏览、购买行为，而在“Thanksgiving”却不会有特别的消费行为。这种关联特征与label的正向相关性在实际问题中是普遍存在的，如“化妆品”类商品与“女”性，“球类运动配件”的商品与“男”性，“电影票”的商品与“电影”品类偏好等。因此，引入两个特征的组合是非常有意义的。<br>多项式模型是包含特征组合的最直观的模型。在多项式模型中，特征 $x_i$ 和 $x_j$ 的组合采用 $x_ix_j$ 表示，即 $x_i$ 和 $x_j$ 都非零时，组合特征 $x_ix_j$ 才有意义。从对比的角度，本文只讨论二阶多项式模型。模型的表达式如下<br>$$<br>y(x)=w_0+\sum_{i=1}^nw_ix_i+\sum_{i=1}^n\sum_{j=i+1}^nw_{ij}x_ix_j<br>$$<br>其中，n 代表样本的特征数量，$x_i$ 是第 i 个特征的值，$w_0$、$w_i$、$w_{ij}$ 是模型参数。<br>从公式(1)可以看出，组合特征的参数一共有 $\frac{n(n−1)}{2}$个，任意两个参数都是独立的。然而，在数据稀疏性普遍存在的实际应用场景中，二次项参数的训练是很困难的。其原因是，每个参数 $w_{ij}$ 的训练需要大量 $x_i$ 和 $x_j$ 都非零的样本；由于样本数据本来就比较稀疏，满足“$x_i$ 和 $x_j$ 都非零”的样本将会非常少。训练样本的不足，很容易导致参数 $w_{ij}$不准确，最终将严重影响模型的性能。</p>
<p>那么，如何解决二次项参数的训练问题呢？矩阵分解提供了一种解决思路。在model-based的协同过滤中，一个rating矩阵可以分解为user矩阵和item矩阵，每个user和item都可以采用一个隐向量表示[8]。比如在下图中的例子中，我们把每个user表示成一个二维向量，同时把每个item表示成一个二维向量，两个向量的点积就是矩阵中user对item的打分。<br><img src="/2017/07/10/Factorization-Machines/fm_3.png" alt="fm_3.png" title=""><br>类似地，所有二次项参数 $w_{ij}$ 可以组成一个对称阵 W（为了方便说明FM的由来，对角元素可以设置为正实数），那么这个矩阵就可以分解为 $W=V^TV$，V 的第 j 列便是第 j 维特征的隐向量。换句话说，每个参数 $w_{ij} = &lt; v_i, v_j &gt;$，这就是FM模型的核心思想。因此，FM的模型方程为（本文不讨论FM的高阶形式）<br>$$<br>y(x)=w_0+\sum_{i=1}^nw_ix_i+\sum_{i=1}^n\sum_{j=i+1}^n &lt; v_i, v_j &gt; x_ix_j<br>$$<br>其中，$v_i$ 是第 i 维特征的隐向量，&lt;&gt;代表向量点积。隐向量的长度为 $k（k &lt;&lt; n）$，包含 k 个描述特征的因子。根据公式(2)，二次项的参数数量减少为 kn个，远少于多项式模型的参数数量。另外，参数因子化使得 $x_hx_i$ 的参数和$x_ix_j$ 的参数不再是相互独立的，因此我们可以在样本稀疏的情况下相对合理地估计FM的二次项参数。具体来说，$x_hx_i$和 $x_ix_j$的系数分别为  $&lt; v_i, v_h &gt; $和 $&lt; v_i, v_j &gt; $，它们之间有共同项 $v_i$。也就是说，所有包含“$x_i$ 的非零组合特征”（存在某个 j≠i，使得 $x_ix_j≠0$）的样本都可以用来学习隐向量 $v_i$，这很大程度上避免了数据稀疏性造成的影响。而在多项式模型中，$w_{hi}$ 和 $w_{ij}$ 是相互独立的。</p>
<p>显而易见，公式(2)是一个通用的拟合方程，可以采用不同的损失函数用于解决回归、二元分类等问题，比如可以采用MSE（Mean Square Error）损失函数来求解回归问题，也可以采用Hinge/Cross-Entropy损失来求解分类问题。当然，在进行二元分类时，FM的输出需要经过sigmoid变换，这与Logistic回归是一样的。直观上看，FM的复杂度是 $O(kn^2)$。但是，通过公式(3)的等式，FM的二次项可以化简，其复杂度可以优化到 O(kn)[7]。由此可见，FM可以在线性时间对新样本作出预测。<br>$$<br>\sum_{i=1}^n\sum_{j=i+11}^n &lt; v_i, v_j &gt; x_ix_j = \frac{1}{2}\sum_{f=1}^k((\sum_{i=1}^nv_{i,f}x_i)^2-\sum_{i=1}^nv_{i,f}^2x_i^2)<br>$$</p>
<p>FM是一种比较灵活的模型，通过合适的特征变换方式，FM可以模拟二阶多项式核的SVM模型、MF模型、SVD++模型等。</p>
<p>相比SVM的二阶多项式核而言，FM在样本稀疏的情况下是有优势的；而且，FM的训练/预测复杂度是线性的，而二项多项式核SVM需要计算核矩阵，核矩阵复杂度就是N平方。</p>
<p>相比MF而言，我们把MF中每一项的rating分改写为$r_{ui}~\beta_u+\gamma_i+x^T_uy_i$ ，从公式(2)中可以看出，这相当于只有两类特征u 和i 的FM模型。对于FM而言，我们可以加任意多的特征，比如user的历史购买平均值，item的历史购买平均值等，但是MF只能局限在两类特征。SVD++与MF类似，在特征的扩展性上都不如FM，在此不再赘述。</p>
<h1 id="FFM"><a href="#FFM" class="headerlink" title="FFM"></a>FFM</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>FFM（Field-aware Factorization Machine）最初的概念来自Yu-Chin Juan（阮毓钦，毕业于中国台湾大学，现在美国Criteo工作）与其比赛队员，是他们借鉴了来自Michael Jahrer的论文[14]中的field概念提出了FM的升级版模型。通过引入field的概念，FFM把相同性质的特征归于同一个field。以上面的广告分类为例，“Day=26/11/15”、“Day=1/7/14”、“Day=19/2/15”这三个特征都是代表日期的，可以放到同一个field中。同理，商品的末级品类编码生成了550个特征，这550个特征都是说明商品所属的品类，因此它们也可以放到同一个field中。简单来说，同一个categorical特征经过One-Hot编码生成的数值特征都可以放到同一个field，包括用户性别、职业、品类偏好等。在FFM中，每一维特征 xixi，针对其它特征的每一种field fjfj，都会学习一个隐向量 $v_i,f_j$。因此，隐向量不仅与特征相关，也与field相关。也就是说，“Day=26/11/15”这个特征与“Country”特征和“Ad_type”特征进行关联的时候使用不同的隐向量，这与“Country”和“Ad_type”的内在差异相符，也是FFM中“field-aware”的由来。</p>
<p>假设样本的 n 个特征属于 f 个field，那么FFM的二次项有 nf个隐向量。而在FM模型中，每一维特征的隐向量只有一个。FM可以看作FFM的特例，是把所有特征都归属到一个field时的FFM模型。根据FFM的field敏感特性，可以导出其模型方程。</p>
<p>其中，$f_j$ 是第 j 个特征所属的field。如果隐向量的长度为 k，那么FFM的二次参数有 nfk个，远多于FM模型的 nk 个。此外，由于隐向量与field相关，FFM二次项并不能够化简，其预测复杂度是 $O(kn^2)$。<br>下面以一个例子简单说明FFM的特征组合方式[9]。输入记录如下<br><img src="/2017/07/10/Factorization-Machines/ffm_1.png" alt="ffm_1.png" title=""><br>这条记录可以编码成5个特征，其中“Genre=Comedy”和“Genre=Drama”属于同一个field，“Price”是数值型，不用One-Hot编码转换。为了方便说明FFM的样本格式，我们将所有的特征和对应的field映射成整数编号。<br><img src="/2017/07/10/Factorization-Machines/ffm_2.png" alt="ffm_2.png" title=""></p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>在DSP的场景中，FFM主要用来预估站内的CTR和CVR，即一个用户对一个商品的潜在点击率和点击后的转化率。</p>
<p>CTR和CVR预估模型都是在线下训练，然后用于线上预测。两个模型采用的特征大同小异，主要有三类：用户相关的特征、商品相关的特征、以及用户-商品匹配特征。用户相关的特征包括年龄、性别、职业、兴趣、品类偏好、浏览/购买品类等基本信息，以及用户近期点击量、购买量、消费额等统计信息。商品相关的特征包括所属品类、销量、价格、评分、历史CTR/CVR等信息。用户-商品匹配特征主要有浏览/购买品类匹配、浏览/购买商家匹配、兴趣偏好匹配等几个维度。</p>
<p>为了使用FFM方法，所有的特征必须转换成“field_id:feat_id:value”格式，field_id代表特征所属field的编号，feat_id是特征编号，value是特征的值。数值型的特征比较容易处理，只需分配单独的field编号，如用户评论得分、商品的历史CTR/CVR等。categorical特征需要经过One-Hot编码成数值型，编码产生的所有特征同属于一个field，而特征的值只能是0或1，如用户的性别、年龄段，商品的品类id等。除此之外，还有第三类特征，如用户浏览/购买品类，有多个品类id且用一个数值衡量用户浏览或购买每个品类商品的数量。这类特征按照categorical特征处理，不同的只是特征的值不是0或1，而是代表用户浏览或购买数量的数值。按前述方法得到field_id之后，再对转换后特征顺序编号，得到feat_id，特征的值也可以按照之前的方法获得。</p>
<p>CTR、CVR预估样本的类别是按不同方式获取的。CTR预估的正样本是站内点击的用户-商品记录，负样本是展现但未点击的记录；CVR预估的正样本是站内支付（发生转化）的用户-商品记录，负样本是点击但未支付的记录。构建出样本数据后，采用FFM训练预估模型，并测试模型的性能。</p>
<img src="/2017/07/10/Factorization-Machines/ffm_3.png" alt="ffm_3.png" title="">
<p>由于模型是按天训练的，每天的性能指标可能会有些波动，但变化幅度不是很大。这个表的结果说明，站内CTR/CVR预估模型是非常有效的。</p>
<p>在训练FFM的过程中，有许多小细节值得特别关注。</p>
<p>第一，样本归一化。FFM默认是进行样本数据的归一化，即 pa.norm 为真；若此参数设置为假，很容易造成数据inf溢出，进而引起梯度计算的nan错误。因此，样本层面的数据是推荐进行归一化的。</p>
<p>第二，特征归一化。CTR/CVR模型采用了多种类型的源特征，包括数值型和categorical类型等。但是，categorical类编码后的特征取值只有0或1，较大的数值型特征会造成样本归一化后categorical类生成特征的值非常小，没有区分性。例如，一条用户-商品记录，用户为“男”性，商品的销量是5000个（假设其它特征的值为零），那么归一化后特征“sex=male”（性别为男）的值略小于0.0002，而“volume”（销量）的值近似为1。特征“sex=male”在这个样本中的作用几乎可以忽略不计，这是相当不合理的。因此，将源数值型特征的值归一化到 [0,1][0,1] 是非常必要的。</p>
<p>第三，省略零值特征。从FFM模型的表达式(4)(4)可以看出，零值特征对模型完全没有贡献。包含零值特征的一次项和组合项均为零，对于训练模型参数或者目标值预估是没有作用的。因此，可以省去零值特征，提高FFM模型训练和预测的速度，这也是稀疏样本采用FFM的显著优势。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.algo.uni-konstanz.de/members/rendle/pdf/Rendle2010FM.pdf" target="_blank" rel="external">Factorization Machines</a><br><a href="http://www.csie.ntu.edu.tw/~b97053/paper/Factorization%20Machines%20with%20libFM.pdf" target="_blank" rel="external">Factorization Machines with libFM</a><br><a href="http://blog.csdn.net/samjustin1/article/details/52259731" target="_blank" rel="external">基于用户的协同过滤推荐算法原理和实现</a><br><a href="http://www.cnblogs.com/ccienfall/p/5979003.html" target="_blank" rel="external">SVD++：推荐系统的基于矩阵分解的协同过滤算法的提高</a><br><a href="http://blog.csdn.net/wjmishuai/article/details/71191945" target="_blank" rel="external">SVD与SVD++</a><br><a href="http://www.cnblogs.com/ccienfall/p/5994992.html" target="_blank" rel="external">推荐系统——基于隐因子矩阵分解的协同过滤算法</a><br><a href="http://blog.csdn.net/qq_20599123/article/details/51344370" target="_blank" rel="external">基于两两交互张量分解模型的个性化标签推荐</a><br><a href="http://www.docin.com/p-1697787681.html" target="_blank" rel="external">基于个性化马尔科夫链的推荐算法</a><br><strong><a href="https://tech.meituan.com/deep-understanding-of-ffm-principles-and-practices.html#mjx-eqn-eqfm" target="_blank" rel="external">深入FFM原理与实践</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode Weekly Contest 28]]></title>
      <url>http://wlyPKU.github.io/2017/04/16/Leetcode-week28/</url>
      <content type="html"><![CDATA[<p>LeetCode Weekly Contest 28<br>[2017-04-16]</p>
<ol>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-28/problems/student-attendance-record-i/" target="_blank" rel="external">Student Attendance Record I</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-28/problems/optimal-division/" target="_blank" rel="external">Optimal Division</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-28/problems/split-assembled-strings/" target="_blank" rel="external">Split Assembled Strings</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-28/problems/student-attendance-record-ii/" target="_blank" rel="external">Student Attendance Record II</a><a id="more"></a>
</li>
</ol>
<hr>
<h1 id="Student-Attendance-Record-I"><a href="#Student-Attendance-Record-I" class="headerlink" title="Student Attendance Record I"></a>Student Attendance Record I</h1><p>You are given a string representing an attendance record for a student. The record only contains the following three characters:</p>
<ol>
<li><strong>‘A’</strong> : Absent.</li>
<li><strong>‘L’</strong> : Late.</li>
<li><strong>‘P’</strong> : Present.</li>
</ol>
<p>A student could be rewarded if his attendance record doesn’t contain <strong>more than one ‘A’ (absent)</strong> or <strong>more than two continuous ‘L’ (late)</strong>.</p>
<p>You need to return whether the student could be rewarded according to his attendance record.</p>
<p><strong>Example 1:</strong><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Input:</span> <span class="string">"PPALLP"</span></div><div class="line"><span class="symbol">Output:</span> True</div></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Input:</span> <span class="string">"PPALLL"</span></div><div class="line"><span class="symbol">Output:</span> False</div></pre></td></tr></table></figure></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkRecord</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">multiset</span>&lt;<span class="keyword">char</span>&gt; ss;</div><div class="line">        <span class="keyword">int</span> continuousL  = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(continuousL == <span class="number">2</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(s[i] == <span class="string">'L'</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'L'</span>)&#123;</div><div class="line">                continuousL++;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                continuousL = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            ss.insert(s[i]);        </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ss.count(<span class="string">'A'</span>) &lt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Optimal-Division"><a href="#Optimal-Division" class="headerlink" title="Optimal Division"></a>Optimal Division</h1><p>Given a list of <strong>positive integers</strong>, the adjacent integers will perform the float division. For example, [2,3,4] -&gt; 2 / 3 / 4.</p>
<p>However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. <strong>Your expression should NOT contain redundant parenthesis.</strong></p>
<p><strong>Example:</strong><br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Input: [<span class="number">1000</span>,<span class="number">100</span>,<span class="number">10</span>,<span class="number">2</span>]</div><div class="line">Output: <span class="string">"1000/(100/10/2)"</span></div><div class="line">Explanation:</div><div class="line"><span class="number">1000</span>/(<span class="number">100</span>/<span class="number">10</span>/<span class="number">2</span>) = <span class="number">1000</span>/((<span class="number">100</span>/<span class="number">10</span>)/<span class="number">2</span>) = <span class="number">200</span></div><div class="line">However, the bold parenthesis <span class="keyword">in</span> <span class="string">"1000/((100/10)/2)"</span> are redundant, </div><div class="line">since they don<span class="comment">'t influence the operation priority. So you should return "1000/(100/10/2)". </span></div><div class="line"></div><div class="line">Other cases:</div><div class="line"><span class="number">1000</span>/(<span class="number">100</span>/<span class="number">10</span>)/<span class="number">2</span> = <span class="number">50</span></div><div class="line"><span class="number">1000</span>/(<span class="number">100</span>/(<span class="number">10</span>/<span class="number">2</span>)) = <span class="number">50</span></div><div class="line"><span class="number">1000</span>/<span class="number">100</span>/<span class="number">10</span>/<span class="number">2</span> = <span class="number">0.5</span></div><div class="line"><span class="number">1000</span>/<span class="number">100</span>/(<span class="number">10</span>/<span class="number">2</span>) = <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>The length of the input array is [1, 10].</li>
<li>Elements in the given array will be in range [2, 1000].</li>
<li>There is only one optimal division for each test case.</li>
</ol>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> String optimalDivision(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        builder.<span class="keyword">append</span>(nums[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; nums.length &gt; <span class="number">2</span>) &#123;</div><div class="line">                builder.<span class="keyword">append</span>(<span class="string">"/("</span>).<span class="keyword">append</span>(nums[i]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                builder.<span class="keyword">append</span>(<span class="string">"/"</span>).<span class="keyword">append</span>(nums[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> nums.length &gt; <span class="number">2</span> ? builder.<span class="keyword">append</span>(<span class="string">")"</span>).toString() : builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Split-Assembled-Strings"><a href="#Split-Assembled-Strings" class="headerlink" title="Split Assembled Strings"></a>Split Assembled Strings</h1><p>Given a list of strings, you could assemble these strings together into a loop. Among all the possible loops, you need to find the lexicographically biggest string after cutting and making one breakpoint of the loop, which will make a looped string into a regular one.</p>
<p>So, to find the lexicographically biggest string, you need to experience two phases:</p>
<ol>
<li>Assemble all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.</li>
<li>Cut and make one breakpoint in any place of the loop, which will make a looped string into a regular string starting from the character at the cutting point.</li>
</ol>
<p>And your job is to find the lexicographically biggest one among all the regular strings.</p>
<p><strong>Example:</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Input: <span class="string">"abc"</span>, <span class="string">"xyz"</span></div><div class="line">Output: <span class="string">"zyxcba"</span></div><div class="line">Explanation: You can <span class="built_in">get</span> <span class="keyword">the</span> looped <span class="keyword">string</span> <span class="string">"-abcxyz-"</span>, <span class="string">"-abczyx-"</span>, <span class="string">"-cbaxyz-"</span>, <span class="string">"-cbazyx-"</span>, </div><div class="line">where <span class="string">'-'</span> represents <span class="keyword">the</span> looped status. </div><div class="line">The answer <span class="keyword">string</span> came <span class="built_in">from</span> <span class="keyword">the</span> <span class="keyword">fourth</span> looped <span class="literal">one</span>, </div><div class="line">where you could cut <span class="built_in">from</span> <span class="keyword">the</span> <span class="keyword">middle</span> <span class="keyword">and</span> <span class="built_in">get</span> <span class="string">"zyxcba"</span>.</div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>The input strings will only contain lowercase letters.</li>
<li>The total length of all the strings will not over 1000.</li>
</ol>
<h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> splitLoopedString(<span class="keyword">String</span>[] strs) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</div><div class="line">            <span class="keyword">String</span> rev = <span class="keyword">new</span> StringBuilder(strs[i]).<span class="built_in">reverse</span>().toString();</div><div class="line">            <span class="keyword">if</span> (strs[i].compareTo(rev) &lt; <span class="number">0</span>)</div><div class="line">                strs[i] = rev;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">String</span> res = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</div><div class="line">            <span class="keyword">String</span> rev = <span class="keyword">new</span> StringBuilder(strs[i]).<span class="built_in">reverse</span>().toString();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> st: <span class="keyword">new</span> <span class="keyword">String</span>[] &#123;strs[i], rev&#125;) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; st.length(); k++) &#123;</div><div class="line">                    StringBuilder t = <span class="keyword">new</span> StringBuilder(st.substring(k));</div><div class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = i + <span class="number">1</span>; j &lt; strs.length; j++)</div><div class="line">                        t.<span class="built_in">append</span>(strs[j]);</div><div class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; i; j++)</div><div class="line">                        t.<span class="built_in">append</span>(strs[j]);</div><div class="line">                    t.<span class="built_in">append</span>(st.substring(<span class="number">0</span>, k));</div><div class="line">                    <span class="keyword">if</span> (t.toString().compareTo(res) &gt; <span class="number">0</span>)</div><div class="line">                        res = t.toString();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Student-Attendance-Record-II"><a href="#Student-Attendance-Record-II" class="headerlink" title="Student Attendance Record II"></a>Student Attendance Record II</h1><p>Given a positive integer <strong>n</strong>, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 109 + 7.</p>
<p>A student attendance record is a string that only contains the following three characters:</p>
<ol>
<li><strong>‘A’</strong> : Absent.</li>
<li><strong>‘L’</strong> : Late.</li>
<li><strong>‘P’</strong> : Present.<br>A record is regarded as rewardable if it doesn’t contain <strong>more than one ‘A’ </strong>(absent) or<strong> more than two continuous ‘L’</strong> (late).</li>
</ol>
<p><strong>Example 1:</strong><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Input: n = <span class="number">2</span></div><div class="line">Output: <span class="number">8</span> </div><div class="line">Explanation:</div><div class="line">There are <span class="number">8</span> records <span class="keyword">with</span> <span class="built_in">length</span> <span class="number">2</span> will be regarded <span class="keyword">as</span> rewardable:</div><div class="line"><span class="string">"PP"</span> , <span class="string">"AP"</span>, <span class="string">"PA"</span>, <span class="string">"LP"</span>, <span class="string">"PL"</span>, <span class="string">"AL"</span>, <span class="string">"LA"</span>, <span class="string">"LL"</span></div><div class="line">Only <span class="string">"AA"</span> won't be regarded <span class="keyword">as</span> rewardable owing <span class="keyword">to</span> more than one absent <span class="keyword">times</span>.</div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong> The value of <strong>n</strong> won’t exceed 100,000.</p>
<h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><p>dp[i]the number of all possible attendance (without ‘A’) records with length i :</p>
<ul>
<li>end with “P”: dp[i-1]</li>
<li>end with “PL”: dp[i-2]</li>
<li>end with “PLL”: dp[i-3]</li>
<li>end with “LLL”: is not allowed</li>
</ul>
<p>so dp[i] = dp[i-1] + dp[i-2] + dp[i-3]</p>
<p>the number of all possible attendance (with ‘A’) records with length n:<br>∑dp[i] *dp[n-1-i] i = 0,1,…,n-1</p>
<p>Time Complexity O(n)<br>Space Complexity O(n)</p>
<p>(In code nums[i+1] means dp[i])<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkRecord</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">3</span></div><div class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        nums = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</div><div class="line">        i = <span class="number">2</span></div><div class="line">        <span class="keyword">while</span> i &lt; n:</div><div class="line">            nums.append((nums[i] + nums[i<span class="number">-1</span>] + nums[i<span class="number">-2</span>])% <span class="number">1000000007</span>)</div><div class="line">            i += <span class="number">1</span></div><div class="line">        result = (nums[n] + nums[n<span class="number">-1</span>] + nums[n<span class="number">-2</span>]) % <span class="number">1000000007</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">            result += nums[i+<span class="number">1</span>] * nums[n-i] % <span class="number">1000000007</span></div><div class="line">            result %= <span class="number">1000000007</span></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1000000007</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">checkRecord</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span>[] PorL = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>]; <span class="comment">// ending with P or L, no A</span></div><div class="line">    <span class="keyword">long</span>[] P = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>]; <span class="comment">// ending with P, no A</span></div><div class="line">    PorL[<span class="number">0</span>] = P[<span class="number">0</span>] = <span class="number">1</span>; PorL[<span class="number">1</span>] = <span class="number">2</span>; P[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">        P[i] = PorL[i - <span class="number">1</span>];</div><div class="line">        PorL[i] = (P[i] + P[i - <span class="number">1</span>] + P[i - <span class="number">2</span>]) % M;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">long</span> res = PorL[n];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// inserting A into (n-1)-length strings</span></div><div class="line">    	<span class="keyword">long</span> s = (PorL[i] * PorL[n - i - <span class="number">1</span>]) % M;</div><div class="line">        res = (res + s) % M;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode Weekly Contest 26]]></title>
      <url>http://wlyPKU.github.io/2017/04/02/Leetcode-week26/</url>
      <content type="html"><![CDATA[<p>LeetCode Weekly Contest 26<br>[2017-04-02]</p>
<ol>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-26/problems/longest-uncommon-subsequence-i/" target="_blank" rel="external">Longest Uncommon Subsequence I</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-26/problems/longest-uncommon-subsequence-ii/" target="_blank" rel="external">Longest Uncommon Subsequence II</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-26/problems/friend-circles/" target="_blank" rel="external">Friend Circles</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-26/problems/split-array-with-equal-sum/" target="_blank" rel="external">Split Array with Equal Sum</a><a id="more"></a>
</li>
</ol>
<hr>
<h1 id="Longest-Uncommon-Subsequence-I"><a href="#Longest-Uncommon-Subsequence-I" class="headerlink" title="Longest Uncommon Subsequence I"></a>Longest Uncommon Subsequence I</h1><p>Given a group of two strings, you need to find the longest uncommon subsequence of this group of two strings. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.</p>
<p>A <strong>subsequence</strong> is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.</p>
<p>The input will be two strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn’t exist, return -1.</p>
<p><strong>Example 1:</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: <span class="string">"aba"</span>, <span class="string">"cdc"</span></div><div class="line">Output: <span class="number">3</span></div><div class="line">Explanation: The longest uncommon subsequence is <span class="string">"aba"</span> (<span class="keyword">or</span> <span class="string">"cdc"</span>), </div><div class="line">because <span class="string">"aba"</span> is <span class="keyword">a</span> subsequence <span class="keyword">of</span> <span class="string">"aba"</span>, </div><div class="line">but <span class="keyword">not</span> <span class="keyword">a</span> subsequence <span class="keyword">of</span> <span class="keyword">any</span> other strings <span class="keyword">in</span> <span class="keyword">the</span> group <span class="keyword">of</span> <span class="literal">two</span> strings.</div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ul>
<li>Both strings’ lengths will not exceed 100.</li>
<li>Only letters from a ~ z will appear in input strings.</li>
</ul>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>两个字符串相同就无解;<br>否则输出两个字符串的长度中较大者;<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> findLUSlength(<span class="keyword">string</span> a, <span class="keyword">string</span> b) &#123;</div><div class="line">        <span class="built_in">if</span> (a == b)</div><div class="line">            <span class="built_in">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="built_in">return</span> <span class="built_in">max</span>(<span class="keyword">int</span>(a.<span class="built_in">size</span>()), <span class="keyword">int</span>(b.<span class="built_in">size</span>()));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="Longest-Uncommon-Subsequence-II"><a href="#Longest-Uncommon-Subsequence-II" class="headerlink" title="Longest Uncommon Subsequence II"></a>Longest Uncommon Subsequence II</h1><p>Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be <strong>any</strong> subsequence of the other strings.</p>
<p>A <strong>subsequence</strong> is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.</p>
<p>The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn’t exist, return -1.</p>
<p><strong>Example 1:</strong><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Input:</span> <span class="string">"aba"</span>, <span class="string">"cdc"</span>, <span class="string">"eae"</span></div><div class="line"><span class="symbol">Output:</span> <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ul>
<li>All the given strings’ lengths will not exceed 10.</li>
<li>The length of the given list will be in the range of [2, 50].</li>
</ul>
<h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><p>因为最大长度为10;<br>所以把每个长度有哪些字符串记录下来;<br>然后从字符串长度由大到小枚举len;<br>假设这个答案序列为len长度的某个字符串;<br>然后看看len长度的字符串有没有和它一样的字符串(即出现两次及以上)<br>有的话不行,找另外一个长度为len的字符串;<br>否则<br>再看看这个字符串是不是长度比len长的字符串的子串；<br>如果不是的话;<br>就表示找到了;<br>直接输出len;<br>否则继续找长度为len的另外的字符串;<br>判断一个字符串是不是另外一个字符串的子串其实很简单的；<br>O(l1+l2)就能判断出来;<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">bool</span> judge(<span class="keyword">string</span> s, vector&lt;<span class="keyword">string</span>&gt;&amp; strs)&#123;</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.<span class="built_in">size</span>(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> idx = <span class="number">0</span>;</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; strs[i].<span class="built_in">size</span>(); j++)&#123;</div><div class="line">                <span class="built_in">if</span>(idx == s.<span class="built_in">size</span>())&#123;</div><div class="line">                    <span class="built_in">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">if</span>(s[idx] == strs[i][j])&#123;</div><div class="line">                    idx++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">if</span>(idx == s.<span class="built_in">size</span>())&#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">if</span>(cnt == <span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">return</span> true;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> false;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> findLUSlength(vector&lt;<span class="keyword">string</span>&gt;&amp; strs) &#123;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">        <span class="keyword">int</span> maxLength = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; strs.<span class="built_in">size</span>(); s++)&#123;</div><div class="line">            <span class="keyword">string</span> a = strs[s];</div><div class="line">            <span class="comment">/*Method 1</span></div><div class="line">			 When we add a letter Y to our candidate longest uncommon subsequence answer of X, </div><div class="line">			 it only makes it strictly harder to find a common subsequence. Thus our candidate</div><div class="line">			 longest uncommon subsequences will be chosen from the group of words itself.</div><div class="line">			   m[a]++;</div><div class="line">			*/</div><div class="line">			<span class="comment">/*Method 2*/</span></div><div class="line">			<span class="built_in">for</span>(<span class="keyword">int</span> i = a.<span class="built_in">size</span>(); i &gt;= <span class="number">1</span>; i--)&#123;</div><div class="line">                <span class="built_in">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= a.<span class="built_in">size</span>() - i; j++)&#123;</div><div class="line">                    <span class="built_in">if</span>(m.<span class="built_in">find</span>(a.substr(j, i)) == m.<span class="built_in">end</span>())&#123;</div><div class="line">                        m.insert(<span class="built_in">map</span>&lt;<span class="keyword">string</span>,<span class="keyword">int</span>&gt;::value_type(a.substr(j, i), <span class="number">1</span>));</div><div class="line">                    &#125;<span class="built_in">else</span>&#123;</div><div class="line">                        m[a.substr(j, i)] ++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">auto</span> ite = m.<span class="built_in">begin</span>(); ite!= m.<span class="built_in">end</span>(); ite++)&#123;</div><div class="line">            <span class="keyword">string</span> sd = ite-&gt;first;</div><div class="line">            <span class="keyword">int</span> i = ite-&gt;second;</div><div class="line">            <span class="built_in">if</span>(i == <span class="number">1</span>)&#123;</div><div class="line">                <span class="built_in">if</span>(judge(sd, strs))</div><div class="line">                maxLength = <span class="built_in">max</span>(maxLength, (<span class="keyword">int</span>)sd.<span class="built_in">size</span>());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> maxLength;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="Friend-Circles"><a href="#Friend-Circles" class="headerlink" title="Friend Circles"></a>Friend Circles</h1><p>There are <strong>N</strong> students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a <strong>direct</strong> friend of B, and B is a <strong>direct</strong> friend of C, then A is an <strong>indirect</strong> friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.</p>
<p>Given a <strong>N*N</strong> matrix <strong>M</strong> representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students are <strong>direct</strong> friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.</p>
<p><strong>Example 1:</strong><br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: </div><div class="line"><span class="string">[[1,1,0],</span></div><div class="line"> [1,1,0],</div><div class="line"> [0,0,1]]</div><div class="line">Output: <span class="number">2</span></div><div class="line">Explanation:The <span class="number">0</span>th <span class="keyword">and</span> <span class="number">1</span>st students are direct friends, so they are <span class="keyword">in</span> a friend circle. </div><div class="line">The <span class="number">2</span>nd student himself is <span class="keyword">in</span> a friend circle. So <span class="keyword">return</span> <span class="number">2.</span></div></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Inpu<span class="variable">t:</span> </div><div class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</div><div class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</div><div class="line"> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]]</div><div class="line">Outpu<span class="variable">t:</span> <span class="number">1</span></div><div class="line">Explanation:The <span class="number">0</span><span class="keyword">th</span> <span class="built_in">and</span> <span class="number">1</span><span class="keyword">st</span> students are direct friends, the <span class="number">1</span><span class="keyword">st</span> <span class="built_in">and</span> <span class="number">2</span>nd students are direct friends, </div><div class="line"><span class="keyword">so</span> the <span class="number">0</span><span class="keyword">th</span> <span class="built_in">and</span> <span class="number">2</span>nd students are indirect friends. All of them are in the same friend circle, <span class="keyword">so</span> <span class="keyword">return</span> <span class="number">1</span>.</div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ul>
<li>N is in range [1,200].</li>
<li>M[i][i] = 1 for all students.</li>
<li>If M[i][j] = 1, then M[j][i] = 1.</li>
</ul>
<h2 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span>* unionFind;</div><div class="line">    <span class="keyword">void</span> unionFunction(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> unionFind[], <span class="keyword">int</span> <span class="built_in">size</span>)&#123;</div><div class="line">        <span class="built_in">if</span>(i == j)&#123;</div><div class="line">            <span class="built_in">return</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tmpI = i;</div><div class="line">        <span class="built_in">while</span>(tmpI != unionFind[tmpI])&#123;</div><div class="line">            tmpI = unionFind[tmpI];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tmpJ = j;</div><div class="line">        <span class="built_in">while</span>(tmpJ != unionFind[tmpJ])&#123;</div><div class="line">            tmpJ = unionFind[tmpJ];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">if</span>(tmpJ &gt; tmpI)&#123;</div><div class="line">            unionFind[tmpJ] = tmpI;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">if</span>(tmpJ &lt; tmpI)&#123;</div><div class="line">            unionFind[tmpI] = tmpJ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> findCircleNum(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; M) &#123;</div><div class="line">        <span class="keyword">int</span>* unionFind = <span class="keyword">new</span> <span class="keyword">int</span>[M.<span class="built_in">size</span>()];</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.<span class="built_in">size</span>(); i++)&#123;</div><div class="line">            unionFind[i] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.<span class="built_in">size</span>(); i++)&#123;</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M.<span class="built_in">size</span>(); j++)&#123;</div><div class="line">                <span class="built_in">if</span>(M[i][j])</div><div class="line">                unionFunction(i, j, unionFind,M.<span class="built_in">size</span>());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        set&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.<span class="built_in">size</span>(); i++)&#123;</div><div class="line">            <span class="built_in">if</span>(i == unionFind[i])</div><div class="line">            s.insert(i);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> s.<span class="built_in">size</span>();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Split-Array-with-Equal-Sum"><a href="#Split-Array-with-Equal-Sum" class="headerlink" title="Split Array with Equal Sum"></a>Split Array with Equal Sum</h1><p>Given an array with n integers, you need to find if there are triplets (i, j, k) which satisfies following conditions:</p>
<ol>
<li>0 &lt; i, i + 1 &lt; j, j + 1 &lt; k &lt; n - 1</li>
<li>Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal.</li>
</ol>
<p>where we define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.</p>
<p><strong>Example:</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Input: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]</div><div class="line">Output: True</div><div class="line">Explanation:</div><div class="line"><span class="selector-tag">i</span> = <span class="number">1</span>, j = <span class="number">3</span>, k = <span class="number">5</span>. </div><div class="line"><span class="function"><span class="title">sum</span><span class="params">(<span class="number">0</span>, i - <span class="number">1</span>)</span></span> = sum(<span class="number">0</span>, <span class="number">0</span>) = <span class="number">1</span></div><div class="line"><span class="function"><span class="title">sum</span><span class="params">(i + <span class="number">1</span>, j - <span class="number">1</span>)</span></span> = sum(<span class="number">2</span>, <span class="number">2</span>) = <span class="number">1</span></div><div class="line"><span class="function"><span class="title">sum</span><span class="params">(j + <span class="number">1</span>, k - <span class="number">1</span>)</span></span> = sum(<span class="number">4</span>, <span class="number">4</span>) = <span class="number">1</span></div><div class="line"><span class="function"><span class="title">sum</span><span class="params">(k + <span class="number">1</span>, n - <span class="number">1</span>)</span></span> = sum(<span class="number">6</span>, <span class="number">6</span>) = <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= n &lt;= 2000.</li>
<li>Elements in the given array will be in range [-1,000,000, 1,000,000].</li>
</ul>
<h2 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h2><p>先枚举要删除的3个元素中的中间那个元素j;<br>然后把整个序列分成左边和右边两个部分;<br>然后再左边的序列中枚举i;<br>然后把0..j-1分成0..i-1和i+1..j-1两个部分;<br>然后看这两个部分各自的和是不是相同;<br>相同的话把和用map记录一下;<br>然后再枚举<br>右半部分即第3个元素k;<br>分成<br>j+1..k-1和k+1..n-1两个部分;<br>看看各自的和是不是相同;<br>相同的话,看看刚才左半部分记录的map里面有没有这个和;<br>有的话输出true<br>复杂度接近O(n^2)吧-&gt;用了map哦。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">map</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dic;</div><div class="line">	<span class="keyword">int</span> pre[N],n;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">splitArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        n = nums.size();</div><div class="line">        pre[<span class="number">0</span>] = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;  i &lt; n; i++)</div><div class="line">        &#123;</div><div class="line">            pre[i] = pre[i - <span class="number">1</span>] + nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;  j &lt; n - <span class="number">1</span>; j++)</div><div class="line">        &#123;</div><div class="line">            dic.clear();</div><div class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = j - <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = l + <span class="number">1</span>;  i &lt; r; i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (pre[i] - nums[i] == pre[r] - pre[i])</div><div class="line">                &#123;</div><div class="line">                    dic[pre[r] - pre[i]] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            l = j + <span class="number">1</span>, r = n - <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = l + <span class="number">1</span>;  i &lt; r; i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (dic[pre[r] - pre[i]] &amp;&amp; (pre[i] - nums[i] - pre[j]) == (pre[r] - pre[i]))</div><div class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Class imbalance in classification]]></title>
      <url>http://wlyPKU.github.io/2017/03/29/Class-imbalance-in-classification/</url>
      <content type="html"><![CDATA[<p>本文是分类算法正负例数量不平衡问题的解决方案。<br><a id="more"></a></p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在数据挖掘中，经常会存在不平衡数据的分类问题，比如在异常监控预测中，由于异常就大多数情况下都不会出现，因此想要达到良好的识别效果普通的分类算法还远远不够，这里介绍几种处理不平衡数据的常用方法及对比。</p>
<p>记多数类的样本集合为L，少数类的样本集合为S。<br>用r=|S|/|L|表示少数类与多数类的比例。</p>
<p>基准<br>我们先用一个逻辑斯谛回归作为该实验的基准： </p>
<h1 id="Weighted-loss-function"><a href="#Weighted-loss-function" class="headerlink" title="Weighted loss function"></a>Weighted loss function</h1><p>一个处理非平衡数据常用的方法就是设置损失函数的权重，使得少数类判别错误的损失大于多数类判别错误的损失。在python的scikit-learn中我们可以使用class_weight参数来设置权重。<br><img src="/2017/03/29/Class-imbalance-in-classification/weightFunction.png" alt="weightLossFunction" title="weightLossFunction"></p>
<h1 id="欠采样方法-undersampling"><a href="#欠采样方法-undersampling" class="headerlink" title="欠采样方法(undersampling)"></a>欠采样方法(undersampling)</h1><h2 id="Random-undersampling-of-majority-class"><a href="#Random-undersampling-of-majority-class" class="headerlink" title="Random undersampling of majority class"></a>Random undersampling of majority class</h2><p>一个最简单的方法就是从多数类中随机抽取样本从而减少多数类样本的数量，使数据达到平衡。<br>但对于欠抽样算法，将多数类样本删除有可能会导致分类器丢失有关多数类的重要信息。<br><img src="/2017/03/29/Class-imbalance-in-classification/randomUndersample.png" alt="randomUndersample" title="randomUndersample"></p>
<h2 id="Edited-Nearest-Neighbor-ENN"><a href="#Edited-Nearest-Neighbor-ENN" class="headerlink" title="Edited Nearest Neighbor (ENN)"></a>Edited Nearest Neighbor (ENN)</h2><p>我们将那些L类的样本，如果他的大部分k近邻样本都跟他自己本身的类别不一样，我们就将他删除。<br>缺点：因为大多数的多数类样本的样本附近都是多数类，所以该方法所能删除的多数类样本十分有限。<br><img src="/2017/03/29/Class-imbalance-in-classification/ENN.png" alt="ENN" title="ENN"><br><img src="/2017/03/29/Class-imbalance-in-classification/ENN_2.png" alt="ENN示例" title="ENN示例"></p>
<h2 id="Repeated-Edited-Nearest-Neighbor"><a href="#Repeated-Edited-Nearest-Neighbor" class="headerlink" title="Repeated Edited Nearest Neighbor"></a>Repeated Edited Nearest Neighbor</h2><p>这个方法就是不断的重复上述的删除过程，直到无法再删除为止。<br><img src="/2017/03/29/Class-imbalance-in-classification/RENN.png" alt="RENN" title="RENN"></p>
<h2 id="Tomek-Link-Removal"><a href="#Tomek-Link-Removal" class="headerlink" title="Tomek Link Removal"></a>Tomek Link Removal</h2><p>如果有两个不同类别的样本，它们的最近邻都是对方，也就是A的最近邻是B，B的最近邻是A，那么A,B就是Tomek link。我们要做的就是讲所有Tomek link都删除掉。那么一个删除Tomek link的方法就是，将组成Tomek link的两个样本，如果有一个属于多数类样本，就将该多数类样本删除掉。<br><img src="/2017/03/29/Class-imbalance-in-classification/Tomek_1.png" alt="Tomek Link Removal示例" title="Tomek Link Removal示例"><br><img src="/2017/03/29/Class-imbalance-in-classification/Tomek_2.png" alt="Tomek Link Removal示例" title="Tomek Link Removal示例"></p>
<h1 id="过采样方法-Oversampling"><a href="#过采样方法-Oversampling" class="headerlink" title="过采样方法(Oversampling)"></a>过采样方法(Oversampling)</h1><p>我们可以通过欠抽样来减少多数类样本的数量从而达到平衡的目的，同样我们也可以通过，过抽样来增加少数类样本的数量，从而达到平衡的目的。</p>
<h2 id="Random-oversampling-of-minority-class"><a href="#Random-oversampling-of-minority-class" class="headerlink" title="Random oversampling of minority class"></a>Random oversampling of minority class</h2><p>一个最简单的方法，就是通过有放回的抽样，不断的从少数类的抽取样本，不过要注意的是这个方法很容易会导致过拟合。我们通过调整抽样的数量可以控制使得r=0.5<br><img src="/2017/03/29/Class-imbalance-in-classification/overSampling.png" alt="overSampling" title="overSampling"></p>
<h2 id="Synthetic-Minority-Oversampling-Technique-SMOTE"><a href="#Synthetic-Minority-Oversampling-Technique-SMOTE" class="headerlink" title="Synthetic Minority Oversampling Technique(SMOTE)"></a>Synthetic Minority Oversampling Technique(SMOTE)</h2><p>利用少数类样本控制人工样本的生成与分布，实现数据集均衡的目的，而且该方法可以有效地解决由于决策区间较小导致的分类过拟合问题。<br>这是一个更为复杂的过抽样方法，他的方法步骤如下：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">For <span class="keyword">each</span> point p <span class="keyword">in</span> S:</div><div class="line"><span class="number">1.</span> Compute its k nearest neighbors <span class="keyword">in</span> S.</div><div class="line"><span class="number">2.</span> Randomly choose r ≤ k <span class="keyword">of</span> <span class="keyword">the</span> neighbors (<span class="keyword">with</span> replacement).</div><div class="line"><span class="number">3.</span> Choose <span class="keyword">a</span> <span class="built_in">random</span> point along <span class="keyword">the</span> <span class="keyword">lines</span> joining p <span class="keyword">and</span></div><div class="line"><span class="keyword">each</span> <span class="keyword">of</span> <span class="keyword">the</span> r selected neighbors.</div><div class="line"><span class="number">4.</span> Add these synthetic points <span class="built_in">to</span> <span class="keyword">the</span> dataset <span class="keyword">with</span> class</div><div class="line"></div><div class="line">For <span class="keyword">each</span> point p <span class="keyword">in</span> S：</div><div class="line"><span class="number">1.</span> 计算点p在S中的k个最近邻</div><div class="line"><span class="number">2.</span> 有放回地随机抽取R≤k个邻居</div><div class="line"><span class="number">3.</span> 对这R个点，每一个点与点p可以组成一条直线，然后在这条直线上随机取一个点，就产生了一个新的样本，一共可以这样做从而产生R个新的点。</div><div class="line"><span class="number">4.</span>  将这些新的点加入S中</div></pre></td></tr></table></figure></p>
<p>缺点</p>
<ul>
<li>Overgeneralization<ul>
<li>SMOTE’s procedure is inherently dangerous since it blindly generalizes the minority area without regard to the majority class.</li>
<li>This strategy is particularly problematic in the case of highly skewed class distributions since, in such cases, the minority class is very sparse with respect to the majority class, thus resulting in a greater chance of class mixture.</li>
</ul>
</li>
<li>Lack of Flexibility <ul>
<li>The number of synthetic samples generated by SMOTE is fixed in advance, thus not allowing for any flexibility in the re-balancing rate.</li>
</ul>
</li>
</ul>
<img src="/2017/03/29/Class-imbalance-in-classification/SMOTE.png" alt="SMOTE示例" title="SMOTE示例">
<img src="/2017/03/29/Class-imbalance-in-classification/SMOTE1.png" alt="SMOTE示例" title="SMOTE示例">
<h2 id="Borderline-SMOTE1"><a href="#Borderline-SMOTE1" class="headerlink" title="Borderline-SMOTE1"></a>Borderline-SMOTE1</h2><p>这里介绍两种方法来提升SMOTE的方法。<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">For</span> <span class="keyword">each</span> point p <span class="keyword">in</span> S:</div><div class="line">    <span class="number">1.</span> Compute its m nearest neighbors <span class="keyword">in</span> T. <span class="keyword">Call</span> this <span class="keyword">set</span> Mp <span class="keyword">and</span> <span class="keyword">let</span> m<span class="comment">'= |Mp ∩ L|.</span></div><div class="line">    <span class="number">2.</span> <span class="keyword">If</span> m<span class="comment">'= m, p is a noisy example. Ignore p and continue to the next point.</span></div><div class="line">    <span class="number">3.</span> <span class="keyword">If</span> <span class="number">0</span> ≤ m<span class="comment">'≤m/2, p is safe. Ignore p and continue to the next point.</span></div><div class="line">    <span class="number">4.</span> <span class="keyword">If</span> m/<span class="number">2</span> ≤ m<span class="comment">'≤ m, add p to the set DANGER.</span></div><div class="line"><span class="keyword">For</span> <span class="keyword">each</span> point d <span class="keyword">in</span> DANGER, apply the SMOTE algorithm <span class="keyword">to</span> generate synthetic examples.</div><div class="line"></div><div class="line"><span class="keyword">For</span> <span class="keyword">each</span> point p <span class="keyword">in</span> S:</div><div class="line">    <span class="number">1.</span> 计算点p在训练集T上的m个最近邻。我们称这个集合为Mp然后设 m<span class="comment">'= |Mp ∩ L| (表示点p的最近邻中属于L的数量).</span></div><div class="line">    <span class="number">2.</span> <span class="keyword">If</span> m<span class="comment">'= m, p 是一个噪声,不做任何操作.</span></div><div class="line">    <span class="number">3.</span> <span class="keyword">If</span> <span class="number">0</span> ≤m<span class="comment">'≤m/2, 则说明p很安全，不做任何操作.</span></div><div class="line">    <span class="number">4.</span> <span class="keyword">If</span> m/<span class="number">2</span> ≤ m<span class="comment">'≤ m, 那么点p就很危险了，我们需要在这个点附近生成一些新的少数类点，所以我们把它加入到DANGER中.</span></div><div class="line">最后，对于每个在DANGER中的点d，使用SMOTE算法生成新的样本.</div></pre></td></tr></table></figure></p>
<img src="/2017/03/29/Class-imbalance-in-classification/SMOTE_1.png" alt="Borderline-SMOTE1示例" title="Borderline-SMOTE1示例">
<h2 id="Borderline-SMOTE2"><a href="#Borderline-SMOTE2" class="headerlink" title="Borderline-SMOTE2"></a>Borderline-SMOTE2</h2><p>这个与Borderline-SMOTE1很像，只有最后一步不一样。<br>在DANGER集中的点不仅从S集中求最近邻并生成新的少数类点，而且在L集中求最近邻，并生成新的少数类点，这会使得少数类的点更加接近其真实值。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FOR <span class="selector-tag">p</span> <span class="keyword">in</span> DANGER:</div><div class="line">    <span class="number">1</span>.在S和L中分别得到k个最近邻样本Sk和Lk。</div><div class="line">    <span class="number">2</span>.在Sk中选出α比例的样本点和p作随机的线性插值产生新的少数类样本</div><div class="line">    <span class="number">3</span>.在Lk中选出<span class="number">1</span>−α比例的样本点和p作随机的线性插值产生新的少数类样本。</div></pre></td></tr></table></figure></p>
<p>为了达到r=0.5 实验取k=5<br><img src="/2017/03/29/Class-imbalance-in-classification/SMOTE_2.png" alt="Borderline-SMOTE2示例" title="Borderline-SMOTE2示例"></p>
<h1 id="集成方法-Ensemble"><a href="#集成方法-Ensemble" class="headerlink" title="集成方法(Ensemble)"></a>集成方法(Ensemble)</h1><h2 id="EasyEnsemble"><a href="#EasyEnsemble" class="headerlink" title="EasyEnsemble"></a>EasyEnsemble</h2><p>一个最简单的集成方法就是不断从多数类中抽取样本，使得每个模型的多数类样本数量和少数类样本数量都相同，最后将这些模型集成起来。<br>算法伪代码如下：</p>
<ol>
<li>For i = 1, …, N:<br> (a) 随机从 L中抽取样本Li使得|Li| = |S|.<br> (b) 使用Li和S数据集，训练AdaBoost分类器Fi。<br>   $$F_i(x)=sgn(\sum_{j=1}^nw_{ij}f_{ij}(x)-b_i)$$</li>
<li>将上述分类器联合起来<br>   $$F(x)=sgn(\sum_{j=1}^nw_{ij}f_{i}(x))$$</li>
</ol>
<h2 id="BalanceCascade"><a href="#BalanceCascade" class="headerlink" title="BalanceCascade"></a>BalanceCascade</h2><p>这个方法跟EasyEnsemble有点像，但不同的是，每次训练adaboost后都会扔掉已被正确分类的样本，经过不断地扔掉样本后，数据就会逐渐平衡。<br><img src="/2017/03/29/Class-imbalance-in-classification/balanceCascade.png" alt="balanceCascade" title="balanceCascade"></p>
<img src="/2017/03/29/Class-imbalance-in-classification/ml_zzh.png" alt="周志华PPT" title="周志华PPT">
<p>Reference:</p>
<ul>
<li><a href="http://m.blog.csdn.net/article/details?id=52304670" target="_blank" rel="external">不平衡数据分类算法介绍与比较</a></li>
<li><a href="https://arxiv.org/abs/1608.06048" target="_blank" rel="external">Survey of resampling techniques for improving classification performance in unbalanced datasets</a></li>
<li><a href="http://d.wanfangdata.com.cn/periodical/njdxxb200602005" target="_blank" rel="external">一种基于级联模型的类别不平衡数据分类方法</a></li>
<li><a href="/2017/03/29/Class-imbalance-in-classification/Chap03_v3.pdf">机器学习.周志华 PPT Chapter 3</a></li>
<li><a href="/2017/03/29/Class-imbalance-in-classification/classImbalance.pptx">PPT</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Interview Prepare]]></title>
      <url>http://wlyPKU.github.io/2017/03/29/Interview-Prepare/</url>
      <content type="html"><![CDATA[<p>Anything about the interview preparing.<br><a id="more"></a></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h2><p>要了解二者的区别与联系，首先得对进程与线程有一个宏观上的了解。</p>
<p>  <strong>进程，是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竟争计算机系统资源的基本单位。每一个进程都有一个自己的地址空间，即进程空间或（虚空间）。进程空间的大小 只与处理机的位数有关，一个 16 位长处理机的进程空间大小为$2^{16}$，而 32 位处理机的进程空间大小为 $2^{32}$ 。进程至少有 5 种基本状态，它们是：初始态，执行态，等待状态，就绪状态，终止状态。</strong></p>
<p>  <strong>线程，在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中线程的概念便被引进了。线程，是进程的一部分，一个没有线程的进程可以被看作是单线程的。线程有时又被称为轻权进程或轻量级进程，也是 CPU 调度的一个基本单位。</strong></p>
<p>  说到这里，我们对进程与线程都有了一个大体上的印象，现在开始说说二者大致的区别。</p>
<p>  <strong>进程的执行过程是线状的</strong>，尽管中间会发生中断或暂停，但该进程所拥有的资源只为该线状执行过程服务。一旦发生进程上下文切换，这些资源都是要被保护起来的。这是进程宏观上的执行过程。而进程又可有单线程进程与多线程进程两种。我们知道，进程有 一个进程控制块 PCB ，相关程序段 和 该程序段对其进行操作的数据结构集 这三部分，单线程进程的执行过程在宏观上是线性的，微观上也只有单一的执行过程；而多线程进程在宏观上的执行过程同样为线性的，但微观上却可以有多个执行操作（线程），如不同代码片段以及相关的数据结构集。<strong>线程的改变只代表了 CPU 执行过程的改变，而没有发生进程所拥有的资源变化。出了 CPU 之外，计算机内的软硬件资源的分配与线程无关，线程只能共享它所属进程的资源。</strong>与进程控制表和 PCB 相似，每个线程也有自己的线程控制表 TCB ，而这个 TCB 中所保存的线程状态信息则要比 PCB 表少得多，这些信息主要是相关指针用堆栈（系统栈和用户栈），寄存器中的状态数据。<strong>进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。</strong></p>
<p>  线程可以有效地提高系统的执行效率，但并不是在所有计算机系统中都是适用的，如某些很少做进程调度和切换的实时系统。使用线程的好处是有多个任务需要处理机处理时，减少处理机的切换时间；而且，线程的创建和结束所需要的系统开销也比进程的创建和结束要小得多。最适用使用线程的系统是多处理机系统和网络系统或分布式系统。</p>
<ol>
<li><p>线程的执行特性。<br> 线程只有 3 个基本状态：就绪，执行，阻塞。<br> 线程存在 5 种基本操作来切换线程的状态：派生，阻塞，激活，调度，结束。</p>
</li>
<li><p>进程通信。<br> 单机系统中进程通信有 4 种形式：主从式，会话式，消息或邮箱机制，共享存储区方式。<br> 主从式典型例子：终端控制进程和终端进程。<br> 会话式典型例子：用户进程与磁盘管理进程之间的通信。</p>
</li>
</ol>
<p>同一进程间的线程究竟共享哪些资源呢，而又各自独享哪些资源呢？<br>共享的资源有</p>
<ol>
<li><strong>堆</strong>  由于堆是在进程空间中开辟出来的，所以它是理所当然地被共享的；因此new出来的都是共享的（16位平台上分全局堆和局部堆，局部堆是独享的）</li>
<li><strong>全局变量</strong> 它是与具体某一函数无关的，所以也与特定线程无关；因此也是共享的</li>
<li><strong>静态变量</strong> 虽然对于局部变量来说，它在代码中是“放”在某一函数中的，但是其存放位置和全局变量一样，存于堆中开辟的.bss和.data段，是共享的</li>
<li><strong>文件等公用资源</strong>  这个是共享的，使用这些公共资源的线程必须同步。Win32 提供了几种同步资源的方式，包括信号、临界区、事件和互斥体</li>
</ol>
<p>独享的资源有</p>
<ol>
<li><strong>栈</strong> 栈是独享的</li>
<li><strong>寄存器</strong>  这个可能会误解，因为电脑的寄存器是物理的，每个线程去取值难道不一样吗？其实线程里存放的是副本，包括程序计数器PC</li>
</ol>
<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="编译链接"><a href="#编译链接" class="headerlink" title="编译链接"></a>编译链接</h2><p><a href="http://blog.csdn.net/edisonlg/article/details/7081357" target="_blank" rel="external">C++编译链接过程</a></p>
<hr>
<h2 id="ELF结构"><a href="#ELF结构" class="headerlink" title="ELF结构"></a>ELF结构</h2><img src="/2017/03/29/Interview-Prepare/elf.png" alt="ELF结构" title="ELF结构">
<p><a href="http://www.itcast.cn/news/20151228/16592094239.shtml?zx" target="_blank" rel="external">C++培训之Linux系统典型文件格式ELF</a></p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="final-static-const"><a href="#final-static-const" class="headerlink" title="final static const"></a>final static const</h2><p><strong>final</strong></p>
<ul>
<li>final修饰类：该类不可继承</li>
<li>final修饰方法：该方法不能被子类覆盖（但它不能修饰构造函数）</li>
<li>final修饰字段属性：属性值第一次初始化后不能被修改</li>
<li>使用final可以提高程序执行的效率，将一个方法设成final后编译器就可以把对那个方法的所有调用都置入“嵌入”调用里。</li>
</ul>
<p><strong>static</strong></p>
<ul>
<li>static修饰成员函数则该函数不能使用this对象</li>
<li>static不能修饰构造函数、函数参数、局部成员变量</li>
<li>static修饰成员字段则当类被虚拟机加载时按照声明先后顺序对static成员字段进行初始化。</li>
<li>static修饰语句块：当类被虚拟机加载时按照声明先后顺序初始化static成员字段和static语句块</li>
<li>static所修饰的方法和字段只属于类，所有对象共享，java不能直接定义全局变量，是通过static来实现的。</li>
</ul>
<p>java中没有const，不能直接定义常量，是通过static final组合来实现的。</p>
<hr>
<h2 id="并行容器与同步容器"><a href="#并行容器与同步容器" class="headerlink" title="并行容器与同步容器"></a>并行容器与同步容器</h2><h3 id="简述同步容器与并发容器"><a href="#简述同步容器与并发容器" class="headerlink" title="简述同步容器与并发容器"></a>简述同步容器与并发容器</h3><p>在Java并发编程中，经常听到同步容器、并发容器之说，那什么是同步容器与并发容器呢？<strong>同步容器可以简单地理解为通过synchronized来实现同步的容器，比如Vector、Hashtable以及SynchronizedList等容器，如果有多个线程调用同步容器的方法，它们将会串行执行。</strong><br>而<strong>并发容器(线程安全的容器)则要满足线程安全的类无需调用方进行额外的同步</strong>。<br>可以通过查看Vector、Hashtable等同步容器的实现代码，可以看到这些容器实现线程安全的方式就是将它们的状态封装起来，并在需要同步的方法上加上关键字synchronized，但在某些情况下，同步容器不一定就是线程安全的，比如获取最后一个元素或者删除最后一个元素，我们需要实现额外的同步操作：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getLast</span><span class="params">(Vector <span class="built_in">list</span>)</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> lastIndex = <span class="built_in">list</span>.size() - <span class="number">1</span>;  </div><div class="line">    <span class="keyword">return</span> <span class="built_in">list</span>.get(lastIndex);  </div><div class="line">&#125;  </div><div class="line">      </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteLast</span><span class="params">(Vector <span class="built_in">list</span>)</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> lastIndex = <span class="built_in">list</span>.size() - <span class="number">1</span>;  </div><div class="line">    <span class="built_in">list</span>.remove(lastIndex);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>虽然上面的方法看起来没有问题，Vector自身的方法也是同步的，但是在多线程环境中还是隐藏着问题。如果有两个线程A,B同时调用上面的两个方法，假设list的大小为10，这里计算得到的lastIndex为9，线程B首先执行了删除操作（多线程之间操作执行的不确定性导致），而后线程A调用了list.get方法，这时就会发生数组越界异常，导致问题的原因就是上面的复合操作不是原子操作，这里可以通过在方法内部使用list对象锁来实现原子操作。<br>同步容器会导致多个线程中对容器方法调用的串行执行，降低并发性，因为它们都是以容器自身对象为锁，所以在需要支持并发的环境中，可以考虑使用并发容器来替代。并发容器是针对多个线程并发访问而设计的，在jdk5.0引入了concurrent包，其中提供了很多并发容器，如ConcurrentHashMap、CopyOnWriteArrayList等。<br>其实同步容器与并发容器都为多线程并发访问提供了合适的线程安全，不过并发容器的可扩展性更高。在Java5之前，程序员们只有同步容器，且在多线程并发访问的时候会导致争用，阻碍了系统的扩展性。Java5介绍了并发容器，并发容器使用了与同步容器完全不同的加锁策略来提供更高的并发性和伸缩性，例如，在ConcurrentHashMap中采用了一种粒度更细的加锁机制，可以称为分段锁，在这种锁机制下，允许任意数量的读线程并发地访问map，并且执行读操作的线程和写操作的线程也可以并发的访问map，同时允许一定数量的写操作线程并发地修改map，所以它可以在并发环境下实现更高的吞吐量，另外，并发容器提供了一些在使用同步容器时需要自己实现的复合操作，包括putIfAbsent等，但是由于并发容器不能通过加锁来独占访问，所以我们无法通过加锁来实现其他复合操作了。</p>
<h3 id="高效的映像、集合和队列"><a href="#高效的映像、集合和队列" class="headerlink" title="高效的映像、集合和队列"></a>高效的映像、集合和队列</h3><p>Java.util.concurrent包提供了映像、有序集和队列的高效实现： ConcurrentHashMap、ConcurrentSkipListMap、 ConcurrentSkipListSet和ConcurrentLinkedQueue。这些集合使用复杂的算法，通过允许并发地访问数据结构的不同部分来使竞争极小化。与大多数集合不同， size方法不必在常量时间内操作。确定这样的集合当前的大小通常需要遍历。<br>集合返回弱一致性的迭代器。这意味着迭代器不一定能反映出它们被构造之后的所有的修改，但是，它们不会被同一值返回两次，也不会抛出ConcurrentModificationException异常。</p>
<h3 id="写数组的拷贝"><a href="#写数组的拷贝" class="headerlink" title="写数组的拷贝"></a>写数组的拷贝</h3><p>CopyOnWriteArrayList和CopyOnWriteArraySet是线程安全的集合，其中所有的修改线程对底层数组进行复制。如果在集合上进行迭代的线程数超过修改线程数，这样的安排是很有用的。当构建一个迭代器的时候，它包含一个对当前数组的引用。如果数组后来被修改了，迭代器仍然引用旧数组，但是，集合的数组已经被替换了。因此，旧的迭代器拥有一致的试图，访问它无须任何同步开销。<br>CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景，假如我们有一个搜索网站，用户在这个网站的搜索框中，输入关键字搜索内容，但是某些关键字不允许被搜索。这些不能被搜索的关键字会被放在一个黑名单当中，黑名单每天晚上更新一次。当用户搜索时，会检查当前关键字在不在黑名单当中，如果在，则提示不能搜索。<br>CopyOnWrite容器有很多优点，但是同时也存在两个问题，即内存占用问题和数据一致性问题。所以在开发的时候需要注意一下。</p>
<ul>
<li>内存占用问题。因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象（注意:在复制的时候只是复制容器里的引用，只是在写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存）。如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。之前我们系统中使用了一个服务由于每晚使用CopyOnWrite机制更新大对象，造成了每晚15秒的Full GC，应用响应时间也随之变长。<br>针对内存占用问题，可以通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器，如ConcurrentHashMap。</li>
<li>数据一致性问题。CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。</li>
</ul>
<p>Ref:<a href="http://www.cnblogs.com/dolphin0520/p/3938914.html" target="_blank" rel="external">Java并发编程：并发容器之CopyOnWriteArrayList（转载）</a></p>
<h3 id="较早的线程安全集合"><a href="#较早的线程安全集合" class="headerlink" title="较早的线程安全集合"></a>较早的线程安全集合</h3><p>从Java的初始版本开始，Vector和Hashtable类就提供了线程安全的动态数组和散列表的实现。现在这些类被弃用了，取而代之的是ArrayList和HashMap类。这些类不是线程安全的，而集合库中提供了不同的机制。任何集合类通过使用同步包装器变成线程安全的：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">List</span>&lt;<span class="keyword">E</span>&gt; synchArrayList = Collections.synchronizedList(new ArrayList&lt;<span class="keyword">E</span>&gt;());  </div><div class="line"><span class="keyword">Map</span>&lt;<span class="keyword">K</span>,V&gt; synchHashMap = Collections.synchronizedMap(new HashMap&lt;<span class="keyword">K</span>,V&gt;());</div></pre></td></tr></table></figure></p>
<p>应该确保没有任何线程通过原始的非同步方法访问数据结构。最便利的方法是确保不保存任何指向原始对象的引用，简单地构造一个集合并立即传递给包装器。<br>如果在另一个线程可能进行修改时要对集合进行迭代，仍然需要使用“客户端”锁定：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">synchronized</span> (synchHashMap) &#123;  </div><div class="line">            <span class="keyword">Iterator&lt;K&gt; </span><span class="keyword">iter </span>= synchHashMap.keySet().<span class="keyword">iterator(); </span> </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>如果使用foreach循环必须使用同样代码，因为循环使用了迭代器。</strong></p>
<ul>
<li>同步的集合包装器 synchronizedMap 和 synchronizedList ，有时也被称作 有条件地线程安全――所有 单个的操作都是线程安全的，但是多个操作组成的操作序列却可能导致数据争用，因为在操作序列中控制流取决于前面操作的结果。 清单1中第一片段展示了公用的put-if-absent语句块――如果一个条目不在 Map 中，那么添加这个条目。不幸的是， 在 containsKey() 方法返回到 put() 方法被调用这段时间内，可能会有另一个线程也插入一个带有相同键的值。如果您想确保只有一次插入，您需要用一个对 Map m 进行同步的同步块将这一对语句包装起来。</li>
<li>集合框架引入了迭代器，用于遍历一个列表或者其他集合，从而优化了对一个集合中的元素进行迭代的过程。然而，在 java.util 集合类中实现的迭代器极易崩溃，也就是说，如果在一个线程正在通过一个 Iterator 遍历集合时，另一个线程也来修改这个 集合，那么接下来的 Iterator.hasNext() 或 Iterator.next() 调用将抛出 ConcurrentModificationException 异常。就拿 刚才这个例子来讲，如果想要防止出现 ConcurrentModificationException 异常，那么当您正在进行迭代时，您必须 使用一个在 List l 上同步的 synchronized 块将该 List 包装起来，从而锁住整个 List 。（或者，您也可以调用 List.toArray() ，在 不同步的情况下对数组进行迭代，但是如果列表比较大的话这样做代价很高）。</li>
</ul>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>有如下几种”线程安全”的数据结构/包:</p>
<ol>
<li><strong>concurrent 包 set map queue</strong></li>
<li><strong>copyOnWriteArrayList copyOnWriteArraySet</strong></li>
<li><strong>vector hashTable</strong></li>
<li><strong>Collections.synchronizedList synchronizedMap</strong></li>
</ol>
<h4 id="vector与synchronizedList比较"><a href="#vector与synchronizedList比较" class="headerlink" title="vector与synchronizedList比较"></a>vector与synchronizedList比较</h4><p>Vector类中对get以及remove，size方法都加了synchronized关键字来保证同步，也就说当一个线程调用了这些方法时，其他线程不能再同时调用这些方法。换言之，<strong>不能出现两个及两个以上的线程在同时调用这些同步方法</strong>。 </p>
<p>区别就是Vector本身所有方法都是用synchronized修饰的，所以线程安全，而ArrayList没有<br>synchronizedList修饰的list包裹了普通的ArrayList提供了线程安全的机制，类似Vector，数据结构如下:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;<span class="keyword">String</span>&gt; TEST_LIST = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;());</div></pre></td></tr></table></figure></p>
<p>还有一个区别就是新增元素的时候Vector的增量是原来的一倍，而ArrayList增加原来的一半.</p>
<ol>
<li>到此为止synchronizedList与Vector的区别就是ArrayList与Vector的增量速度区别，所以需要线程安全操作时，增量比较快的时候推荐使用Vector.</li>
<li>SynchronizedList中实现的类并没有都使用synchronized同步代码块。其中有listIterator和listIterator(int index)并没有做同步处理。但是Vector却对该方法加了方法锁。 所以说，在使用SynchronizedList进行遍历的时候要手动加锁。</li>
<li>SynchronizedList有很好的扩展和兼容功能。他可以将所有的List的子类转成线程安全的类。</li>
</ol>
<p>Ref:<a href="http://www.cnblogs.com/yanghuahui/p/3365976.html" target="_blank" rel="external">ArrayList和Vector以及synchronizedList</a><br>Ref:<a href="http://www.hollischuang.com/archives/498" target="_blank" rel="external">SynchronizedList和Vector的区别</a></p>
<h4 id="Map的同步比较"><a href="#Map的同步比较" class="headerlink" title="Map的同步比较:"></a>Map的同步比较:</h4><p>Hashtable 的后继者 HashMap 是作为JDK1.2中的集合框架的一部分出现的，它通过提供一个不同步的基类和一个同步的包装器 Collections.synchronizedMap ，解决了线程安全性问题。 通过将基本的功能从线程安全性中分离开来， Collections.synchronizedMap 允许需要同步的用户可以拥有同步，而不需要同步的用户则不必为同步付出代价。<br>Hashtable 和 synchronizedMap 所采取的获得同步的简单方法（同步 Hashtable 中或者同步的 Map 包装器对象中的每个方法）有两个主要的不足。首先，这种方法对于可伸缩性是一种障碍，因为一次只能有一个线程可以访问hash表。 同时，这样仍不足以提供真正的线程安全性，许多公用的混合操作仍然需要额外的同步。虽然诸如 get() 和 put() 之类的简单操作可以在不需要额外同步的情况下安全地完成，但还是有一些公用的操作序列 ，例如迭代或者put-if-absent（空则放入），需要外部的同步，以避免数据争用。</p>
<p>concurrentHashMap的具体见:<a href="http://www.cnblogs.com/studyLog-share/p/5283646.html" target="_blank" rel="external">java并发：同步容器&amp;并发容器</a><br>HashTable与ConcurrentHashMap的比较？<br>相同点： Hashtable 和 ConcurrentHashMap都是线程安全的，可以在多线程环境中运行； key跟value都不能是null<br>区别： 两者主要是性能上的差异，Hashtable的所有操作都会锁住整个对象，虽然能够保证线程安全，但是性能较差； ConcurrentHashMap内部使用Segment数组，每个Segment类似于Hashtable，在“写”线程或者部分特殊的“读”线程中锁住的是某个Segment对象，其它的线程能够并发执行其它的Segment对象。</p>
<hr>
<h2 id="参数传递–值传递"><a href="#参数传递–值传递" class="headerlink" title="参数传递–值传递"></a>参数传递–值传递</h2><p>首先要说明的是java中是没有指针的，java中只存在值传递，只存在值传递！！！  然而我们经常看到对于对象（数组，类，接口）的传递似乎有点像引用传递，可以改变对象中某个属性的值。但是不要被这个假象所蒙蔽，实际上这个传入函数的值是对象引用的拷贝，即传递的是引用的地址值，所以还是按值传递。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test3</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span>(<span class="params"><span class="keyword">int</span> a</span>)</span>&#123;</div><div class="line">        a=<span class="number">50</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> a=<span class="number">10</span>;</div><div class="line">        System.<span class="keyword">out</span>.println(a);</div><div class="line">        change(a);</div><div class="line">        System.<span class="keyword">out</span>.println(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出 10 10</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test3</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span>(<span class="params"><span class="keyword">int</span> []a</span>)</span>&#123;</div><div class="line">        a[<span class="number">0</span>]=<span class="number">50</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> []a=&#123;<span class="number">10</span>,<span class="number">20</span>&#125;;</div><div class="line">        System.<span class="keyword">out</span>.println(a[<span class="number">0</span>]);</div><div class="line">        change(a);</div><div class="line">        System.<span class="keyword">out</span>.println(a[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出10 50 实际传递的是引用的地址值。</p>
<hr>
<h2 id="大数处理"><a href="#大数处理" class="headerlink" title="大数处理"></a>大数处理</h2><p>在Java中有两个类BigInteger和BigDecimal分别表示大整数类和大浮点数类，至于两个类的对象能表示最大范围不清楚，理论上能够表示无线大的数，只要计算机内存足够大。<br>这两个类都在java.math.*包中，因此每次必须在开头处引用该包。<br>Ⅰ基本函数：<br>1.valueOf(parament); 将参数转换为制定的类型<br>   比如 int a=3;<br>       BigInteger b=BigInteger.valueOf(a);<br>     则b=3;<br>         String s=”12345”;<br>       BigInteger c=BigInteger.valueOf(s);<br>       则c=12345；</p>
<p>2.add(); 大整数相加<br>   BigInteger a=new BigInteger(“23”);<br>   BigInteger b=new BigInteger(“34”);<br>a.      add(b);</p>
<p>3.subtract(); 相减<br>4.multiply(); 相乘<br>5.divide();    相除取整<br>6.remainder(); 取余<br>7.pow();   a.pow(b)=a^b<br>8.gcd();   最大公约数<br>9.abs(); 绝对值<br>10.negate(); 取反数<br>11.mod(); a.mod(b)=a%b=a.remainder(b);<br>12.max(); min();<br>13.punlic int comareTo();<br>14.boolean equals(); 是否相等</p>
<hr>
<h2 id="extends-and-implements"><a href="#extends-and-implements" class="headerlink" title="extends and implements"></a>extends and implements</h2><p>接口实现的注意点：</p>
<ul>
<li>实现一个接口就是要实现该接口的所有的方法(抽象类除外)。</li>
<li>接口中的方法都是抽象的。</li>
<li>多个无关的类可以实现同一个接口，一个类可以实现多个无关的接口。</li>
</ul>
<p><strong>extends与implements的区别：</strong><br>extends 是继承父类，只要那个类不是声明为final或者那个类定义为abstract的就能继承，JAVA中不支持多重继承，但是可以用接口来实现，这样就用到了implements，继承只能继承一个类，但implements可以实现多个接口，用逗号分开就行了。</p>
<p>比如：<br>class A extends B implements C,D,E {}    （class 子类名 extends 父类名 implenments 接口名）</p>
<p><strong>父类与子类继承关系上的不同：</strong></p>
<p>A a = new B(); 结果a是一个A类的实例，只能访问A中的方法，那么又和A a = new A();有什么区别呢？</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></div><div class="line">继承过后通常会定义一些父类没有的成员或者方法。</div><div class="line"><span class="type">A</span> a = <span class="keyword">new</span> <span class="type">B</span>();</div><div class="line">这样是可以的，上传。</div><div class="line">a是一个父类对象的实例，因而不能访问子类定义的新成员或方法。</div></pre></td></tr></table></figure>
<p>假如这样定义：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line">&#123;</div><div class="line">   int i;</div><div class="line">   void f()&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></div><div class="line">&#123;</div><div class="line">    int j;</div><div class="line">    void f()&#123;&#125;       <span class="comment">//重写</span></div><div class="line">    void g()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后：<br>B b = new B();<br>b就是子类对象的实例，不仅能够访问自己的属性和方法，也能够访问父类的属性和方法。诸如b.i,b.j,b.f(),b.g()都是合法的。此时b.f()是访问的B中的f()</p>
<p>A a = new B();<br>a虽然是用的B的构造函数，但经过upcast，成为父类对象的实例，不能访问子类的属性和方法。a.i,a.f()是合法的，而a.j,a.g()非法。此时访问a.f()是访问B中的f()</p>
<p>A a = new B(); 这条语句，实际上有三个过程：<br>(1) A a;<br>将a声明为父类对象，只是一个引用，未分配空间<br>(2) B temp = new B();<br>通过B类的构造函数建立了一个B类对象的实例，也就是初始化<br>(3) a = (A)temp;<br>将子类对象temp转换未父类对象并赋给a，这就是上传(upcast)，是安全的。<br>经过以上3个过程，a就彻底成为了一个A类的实例。<br>子类往往比父类有更多的属性和方法，上传只是舍弃，是安全的；而下传(downcast)有时会增加，通常是不安全的。</p>
<p>a.f()对应的应该是B类的方法f()<br>调用构造函数建立实例过后，对应方法的入口已经确定了。<br>如此以来，a虽被上传为A类，但其中重写的方法f()仍然是B的方法f()。也就是说，每个对象知道自己应该调用哪个方法。<br>A a1 = new B();<br>A a2 = new C();<br>a1,a2两个虽然都是A类对象，但各自的f()不同。这正是多态性的体现。</p>
<hr>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>public char charAt(int index)<br>返回字符串中第index个字符；<br>public int length()<br>返回字符串的长度；<br>public int indexOf(String str)<br>返回字符串中第一次出现str的位置；<br>public int indexOf(String str,int fromIndex)<br>返回字符串从fromIndex开始第一次出现str的位置；<br>public boolean equalsIgnoreCase(String another)<br>比较字符串与another是否一样（忽略大小写）；<br>public String replace(char oldchar,char newChar)<br>在字符串中用newChar字符替换oldChar字符<br>public boolean startsWith(String prefix)<br>判断字符串是否以prefix字符串开头；<br>public boolean endsWith(String suffix)<br>判断一个字符串是否以suffix字符串结尾；<br>public String toUpperCase()<br>返回一个字符串为该字符串的大写形式；<br>public String toLowerCase()<br>返回一个字符串为该字符串的小写形式<br>public String substring(int beginIndex)<br>返回该字符串从beginIndex开始到结尾的子字符串；<br>public String substring(int beginIndex,int endIndex)<br>返回该字符串从beginIndex开始到endsIndex结尾的子字符串<br>public String trim()<br>返回该字符串去掉开头和结尾空格后的字符串<br>public String[] split(String regex)<br>将一个字符串按照指定的分隔符分隔，返回分隔后的字符串数组</p>
<hr>
<h2 id="string-stringBuffer-stringBuilder"><a href="#string-stringBuffer-stringBuilder" class="headerlink" title="string, stringBuffer, stringBuilder"></a>string, stringBuffer, stringBuilder</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String：字符串常量，字符串长度不可变。Java中String是immutable（不可变）的。<br>String类的包含如下定义：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** The value is used for character storage. */</span>  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];  </div><div class="line">  </div><div class="line"><span class="comment">/** The offset is the first index of the storage that is used. */</span>  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> offset;  </div><div class="line">  </div><div class="line"><span class="comment">/** The count is the number of characters in the String. */</span>  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> count;</div></pre></td></tr></table></figure></p>
<p>用于存放字符的数组被声明为final的，因此只能赋值一次，不可再更改。</p>
<h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><p>StringBuffer：<strong>字符串变量（Synchronized，即线程安全）</strong>。如果要频繁对字符串内容进行修改，出于效率考虑最好使用StringBuffer，如果想转成String类型，可以调用StringBuffer的toString()方法。<br>Java.lang.StringBuffer线程安全的可变字符序列。在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。可将字符串缓冲区安全地用于多个线程。<br>StringBuffer 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。append 方法始终将这些字符添加到缓冲区的末端；而 insert 方法则在指定的点添加字符。例如，如果 z 引用一个当前内容是“start”的字符串缓冲区对象，则此方法调用 z.append(“le”) 会使字符串缓冲区包含“startle”，而 z.insert(4, “le”) 将更改字符串缓冲区，使之包含“starlet”。</p>
<h3 id="StringBuilder（JDK5-0）"><a href="#StringBuilder（JDK5-0）" class="headerlink" title="StringBuilder（JDK5.0）"></a>StringBuilder（JDK5.0）</h3><p>StringBuilder：字符串变量（非线程安全）。在内部，StringBuilder对象被当作是一个包含字符序列的变长数组。<br>java.lang.StringBuilder是一个可变的字符序列，是JDK5.0新增的。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。<br>其构造方法如下：</p>
<table>
<thead>
<tr>
<th>构造方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>StringBuilder()</td>
<td>创建一个容量为16的StringBuilder对象（16个空元素）</td>
</tr>
<tr>
<td>StringBuilder(CharSequence cs)</td>
<td>创建一个包含cs的StringBuilder对象，末尾附加16个空元素</td>
</tr>
<tr>
<td>StringBuilder(int initCapacity)</td>
<td>创建一个容量为initCapacity的StringBuilder对象</td>
</tr>
<tr>
<td>StringBuilder(String s)</td>
<td>创建一个包含s的StringBuilder对象，末尾附加16个空元素</td>
</tr>
</tbody>
</table>
<p>在大部分情况下，StringBuilder &gt; StringBuffer。这主要是由于前者不需要考虑线程安全。</p>
<h3 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h3><p><strong>String 类型和StringBuffer的主要性能区别：String是不可变的对象, 因此在每次对String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，性能就会降低。</strong><br>使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。所以多数情况下推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。</p>
<h3 id="使用策略"><a href="#使用策略" class="headerlink" title="使用策略"></a>使用策略</h3><ul>
<li>基本原则：如果要操作少量的数据，用String ；单线程操作大量数据，用StringBuilder ；多线程操作大量数据，用StringBuffer。</li>
<li>不要使用String类的”+”来进行频繁的拼接，因为那样的性能极差的，应该使用StringBuffer或StringBuilder类，这在Java的优化上是一条比较重要的原则。</li>
<li>为了获得更好的性能，在构造 StringBuffer 或 StringBuilder 时应尽可能指定它们的容量。当然，如果你操作的字符串长度（length）不超过 16 个字符就不用了，当不指定容量（capacity）时默认构造一个容量为16的对象。不指定容量会显著降低性能。</li>
<li>StringBuilder一般使用在方法内部来完成类似”+”功能，因为是线程不安全的，所以用完以后可以丢弃。StringBuffer主要用在全局变量中。</li>
<li>相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。而在现实的模块化编程中，负责某一模块的程序员不一定能清晰地判断该模块是否会放入多线程的环境中运行，因此：除非确定系统的瓶颈是在 StringBuffer 上，并且确定你的模块不会运行在多线程模式下，才可以采用StringBuilder；否则还是用StringBuffer。</li>
</ul>
<p>Ref: <a href="http://blog.csdn.net/kingzone_2008/article/details/9220691" target="_blank" rel="external">Java：String、StringBuffer和StringBuilder的区别</a></p>
<hr>
<h2 id="JVM线程安全"><a href="#JVM线程安全" class="headerlink" title="JVM线程安全"></a>JVM线程安全</h2><h3 id="synchronized详解"><a href="#synchronized详解" class="headerlink" title="synchronized详解"></a>synchronized详解</h3><p>Ref: <a href="http://www.cnblogs.com/GnagWang/archive/2011/02/27/1966606.html" target="_blank" rel="external">java synchronized详解</a></p>
<h3 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h3><p>jvm运行时刻内存的分配。其中有一个内存区域是jvm虚拟机栈，每一个线程运行时都有一个线程栈，线程栈保存了线程运行时候变量值信息。当线程访问某一个对象时候值的时候，首先通过对象的引用找到对应在堆内存的变量的值，然后把堆内存变量的具体值load到线程本地内存中，建立一个变量副本，之后线程就不再和对象在堆内存变量值有任何关系，而是直接修改副本变量的值，在修改完之后的某一个时刻（线程退出之前），自动把线程变量副本的值回写到对象在堆中变量。这样在堆中的对象的值就产生变化了。下面一幅图描述这写交互<br><img src="/2017/03/29/Interview-Prepare/currency.jpg" alt="内存示意" title="内存示意"><br>read and load 从主存复制变量到当前工作内存<br>use and assign  执行代码，改变共享变量值<br>store and write 用工作内存数据刷新主存相关内容</p>
<p>其中use and assign 可以多次出现。<br>Ref: <a href="http://blog.csdn.net/libing13820393394/article/details/48582999" target="_blank" rel="external">volatile解析</a></p>
<hr>
<h2 id="JVM内存"><a href="#JVM内存" class="headerlink" title="JVM内存"></a>JVM内存</h2><p>java代码具体执行过程如下图<br><img src="/2017/03/29/Interview-Prepare/JVM_1.jpg" alt="JVM" title="JVM"></p>
<p>运行时数据区，即jvm内存结构图如下图<br><img src="/2017/03/29/Interview-Prepare/JVM_2.jpg" alt="JVM" title="JVM"></p>
<p>Java运行时数据区结构<br><strong>a) 程序计数器(PC寄存器)</strong></p>
<p>由于在JVM中，多线程是通过线程轮流切换来获得CPU执行时间的，因此，在任一具体时刻，一个CPU的内核只会执行一条线程中的指令，因此，为了能够使得每个线程都在线程切换后能够恢复在切 换 之前的程序执行位置，每个线程都需要有自己独立的程序计数器，并且不能互相被干扰，否则就会影响到程序的正常执行次序。因此，可以这么说，程序计数器是每个线程所私有的。由于程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，</p>
<p>因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)的。</p>
<p><strong>b) java栈</strong></p>
<p>Java栈中存放的是一个个的栈帧，每个栈帧对应一个被调用的方法，在栈帧中包括<strong>局部变量表(Local Variables) 、 操作数栈(Operand Stack) 、指向当前方法所属的类的运行时常量池（运行时常量池的概念在方法区部分会谈到） 的引用 (Reference to runtime constant pool)、方法返回地址(Return Address)和一些额外的附加信息</strong>。</p>
<p>当线程执行一个方法时，就会随之创建一个对应的栈帧，并将建立的栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。<br><img src="/2017/03/29/Interview-Prepare/JVM_3.jpg" alt="JVM" title="JVM"></p>
<p><strong>c）本地方法栈</strong></p>
<p>本地方法栈与Java栈的作用和原理非常相似。区别只不过是Java栈是为执行Java方法服务的，而本地方法栈则是为执行本地方法（Native Method）服务的.<br>本地方法调用的三种需求</p>
<ol>
<li>代码在其他语言上进行了大量的测试</li>
<li>对效率要求比较高,如Math.exp(),Math.log()</li>
<li>与系统或硬件交互,如System.out()</li>
</ol>
<p><strong>d）堆</strong></p>
<p>Java中的堆是用来存储对象本身的以及数组（数组引用是存放在Java栈中的）。堆是被所有线程共享的，在JVM中只有一个堆。</p>
<p>Java 6中的堆结构是这样的：<br><img src="/2017/03/29/Interview-Prepare/JVM_HEAP_1.jpg" alt="JVM" title="JVM"></p>
<h3 id="持久代"><a href="#持久代" class="headerlink" title="持久代"></a>持久代</h3><p>持久代中包含了虚拟机中所有可通过反射获取到的数据，比如Class和Method对象。不同的Java虚拟机之间可能会进行类共享，因此持久代又分为只读区和读写区。</p>
<p>JVM用于描述应用程序中用到的类和方法的元数据也存储在持久代中。JVM运行时会用到多少持久代的空间取决于应用程序用到了多少类。除此之外，Java SE库中的类和方法也都存储在这里。</p>
<p>如果JVM发现有的类已经不再需要了，它会去回收（卸载）这些类，将它们的空间释放出来给其它类使用。Full GC会进行持久代的回收。</p>
<ul>
<li>JVM中类的元数据在Java堆中的存储区域。</li>
<li>Java类对应的HotSpot虚拟机中的内部表示也存储在这里。</li>
<li>类的层级信息，字段，名字。</li>
<li>方法的编译信息及字节码。</li>
<li>变量</li>
<li>常量池和符号解析</li>
</ul>
<p><strong>为什么移除持久代</strong></p>
<ul>
<li>它的大小是在启动时固定好的——很难进行调优。-XX:MaxPermSize，设置成多少好呢？</li>
<li>HotSpot的内部类型也是Java对象：它可能会在Full GC中被移动，同时它对应用不透明，且是非强类型的，难以跟踪调试，还需要存储元数据的元数据信息（meta-metadata）。</li>
<li>简化Full GC：每一个回收器有专门的元数据迭代器。</li>
<li>可以在GC不进行暂停的情况下并发地释放类数据。</li>
<li>使得原来受限于持久代的一些改进未来有可能实现</li>
</ul>
<h3 id="元空间"><a href="#元空间" class="headerlink" title="元空间"></a>元空间</h3><p>持久代的空间被彻底地删除了，它被一个叫元空间的区域所替代了。持久代删除了之后，很明显，JVM会忽略PermSize和MaxPermSize这两个参数，还有就是你再也看不到java.lang.OutOfMemoryError: PermGen error的异常了。</p>
<p>JDK 8的HotSpot JVM现在使用的是本地内存来表示类的元数据，这个区域就叫做元空间。</p>
<p><strong>元空间的特点：</strong></p>
<ul>
<li>充分利用了Java语言规范中的好处：类及相关的元数据的生命周期与类加载器的一致。</li>
<li>每个加载器有专门的存储空间</li>
<li>只进行线性分配</li>
<li>不会单独回收某个类</li>
<li>省掉了GC扫描及压缩的时间</li>
<li>元空间里的对象的位置是固定的</li>
<li>如果GC发现某个类加载器不再存活了，会把相关的空间整个回收掉</li>
</ul>
<p><strong>元空间的内存分配模型</strong></p>
<ul>
<li>绝大多数的类元数据的空间都从本地内存中分配</li>
<li>用来描述类元数据的类也被删除了</li>
<li>分元数据分配了多个虚拟内存空间</li>
<li>给每个类加载器分配一个内存块的列表。块的大小取决于类加载器的类型; sun/反射/代理对应的类加载器的块会小一些</li>
<li>归还内存块，释放内存块列表</li>
<li>一旦元空间的数据被清空了，虚拟内存的空间会被回收掉</li>
<li>减少碎片的策略</li>
</ul>
<p><strong>e）方法区</strong></p>
<p>与堆一样，是被线程共享的区域。在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等。<br>在Class文件中除了类的字段、方法、接口等描述信息外，还有一项信息是常量池，用来存储编译期间生成的字面量和符号引用。<br>在方法区中有一个非常重要的部分就是运行时常量池，它是每一个类或接口的常量池的运行时表示形式，在类和接口被加载到JVM后，<br>对应的运行时常量池就被创建出来。当然并非Class文件常量池中的内容才能进入运行时常量池，在运行期间也可将新的常量放入运行时常量池中，比如String的intern方法。</p>
<h3 id="JVM内存溢出的情况"><a href="#JVM内存溢出的情况" class="headerlink" title="JVM内存溢出的情况"></a>JVM内存溢出的情况</h3><img src="/2017/03/29/Interview-Prepare/JVM_4.jpg" alt="JVM" title="JVM">
<p>Ref: <a href="http://www.cnblogs.com/dingyingsi/p/3760447.html" target="_blank" rel="external">深入理解JVM—JVM内存模型</a><br>Ref: <a href="http://www.tuicool.com/articles/bmQjyiR" target="_blank" rel="external">jvm内存模型和内存分配</a></p>
<hr>
<h2 id="Java内存回收"><a href="#Java内存回收" class="headerlink" title="Java内存回收"></a>Java内存回收</h2><p>虚拟机中的共划分为三个代：年轻代（Young Generation）、老年代（Old Generation）和持久代（Permanent Generation）。其中持久代主要存放的是Java类的类信息，与垃圾收集要收集的Java对象关系不大。年轻代和年老代的划分是对垃圾收集影响比较大的。    </p>
<p><strong>年轻代</strong><br>所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。年轻代分三个区。一个Eden区，两个Survivor区(一般而言)。大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到Survivor区（两个中的一个），当这个Survivor区满时，此区的存活对象将被复制到另外一个Survivor区，当这个Survivor去也满了的时候，从第一个Survivor区复制过来的并且此时还存活的对象，将被复制“年老区(Tenured)”。需要注意，Survivor的两个区是对称的，没先后关系，所以同一个区中可能同时存在从Eden复制过来 对象，和从前一个Survivor复制过来的对象，而复制到年老区的只有从第一个Survivor去过来的对象。而且，Survivor区总有一个是空的。同时，根据程序需要，Survivor区是可以配置为多个的（多于两个），这样可以增加对象在年轻代中的存在时间，减少被放到年老代的可能。</p>
<p><strong>年老代</strong><br>在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。</p>
<p><strong>持久代</strong>(Not supported in Java 8)<br>用于存放静态文件，如今Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。持久代大小通过-XX:MaxPermSize=<n>进行设置。</n></p>
<p><strong>Scavenge GC</strong><br>一般情况下，当新对象生成，并且在Eden申请空间失败时，就会触发Scavenge GC，对Eden区域进行GC，清除非存活对象，并且把尚且存活的对象移动到Survivor区。然后整理Survivor的两个区。这种方式的GC是对年轻代的Eden区进行，不会影响到年老代。因为大部分对象都是从Eden区开始的，同时Eden区不会分配的很大，所以Eden区的GC会频繁进行。因而，一般在这里需要使用速度快、效率高的算法，使Eden去能尽快空闲出来。</p>
<p><strong>Full GC</strong><br>对整个堆进行整理，包括Young、Tenured和Perm。Full GC因为需要对整个对进行回收，所以比Scavenge GC要慢，因此应该尽可能减少Full GC的次数。在对JVM调优的过程中，很大一部分工作就是对于FullGC的调节。有如下原因可能导致Full GC：</p>
<ul>
<li>年老代（Tenured）被写满</li>
<li>持久代（Perm）被写满</li>
<li>System.gc()被显示调用</li>
<li>上一次GC之后Heap的各域分配策略动态变化</li>
</ul>
<hr>
<h2 id="Java反射机制详解"><a href="#Java反射机制详解" class="headerlink" title="Java反射机制详解"></a>Java反射机制详解</h2><h3 id="反射机制是什么"><a href="#反射机制是什么" class="headerlink" title="反射机制是什么"></a>反射机制是什么</h3><p>反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p>
<h3 id="反射机制能做什么"><a href="#反射机制能做什么" class="headerlink" title="反射机制能做什么"></a>反射机制能做什么</h3><p>反射机制主要提供了以下功能： </p>
<ul>
<li>在运行时判断任意一个对象所属的类；</li>
<li>在运行时构造任意一个类的对象；</li>
<li>在运行时判断任意一个类所具有的成员变量和方法；</li>
<li>在运行时调用任意一个对象的方法；</li>
<li>生成动态代理。</li>
</ul>
<hr>
<h2 id="ThreadPool"><a href="#ThreadPool" class="headerlink" title="ThreadPool"></a>ThreadPool</h2><p><strong>为什么要用线程池:</strong></p>
<ol>
<li>减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li>
<li>可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li>
</ol>
<p><strong>关键变量</strong><br>创建一个线程池需要输入几个参数：</p>
<ul>
<li>corePoolSize（线程池的基本大小）：当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads方法，线程池会提前创建并启动所有基本线程。</li>
<li>runnableTaskQueue（任务队列）：用于保存等待执行的任务的阻塞队列。 可以选择以下几个阻塞队列。<ul>
<li>ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。</li>
<li>LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。</li>
<li>SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。</li>
<li>PriorityBlockingQueue：一个具有优先级的无限阻塞队列。</li>
</ul>
</li>
<li>maximumPoolSize（线程池最大大小）：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是如果使用了无界的任务队列这个参数就没什么效果。</li>
<li>ThreadFactory：用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。</li>
<li>RejectedExecutionHandler（饱和策略）：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。这个策略默认情况下是AbortPolicy，表示无法处理新任务时抛出异常。以下是JDK1.5提供的四种策略。<ul>
<li>AbortPolicy：直接抛出异常。</li>
<li>CallerRunsPolicy：只用调用者所在线程来运行任务。</li>
<li>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。</li>
<li>DiscardPolicy：不处理，丢弃掉。</li>
<li>当然也可以根据应用场景需要来实现RejectedExecutionHandler接口自定义策略。如记录日志或持久化不能处理的任务。</li>
</ul>
</li>
<li>keepAliveTime（线程活动保持时间）：线程池的工作线程空闲后，保持存活的时间。所以如果任务很多，并且每个任务执行的时间比较短，可以调大这个时间，提高线程的利用率。</li>
<li>TimeUnit（线程活动保持时间的单位）：可选的单位有天（DAYS），小时（HOURS），分钟（MINUTES），毫秒(MILLISECONDS)，微秒(MICROSECONDS, 千分之一毫秒)和毫微秒(NANOSECONDS, 千分之一微秒)。</li>
</ul>
<h3 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool()"></a><strong>newCachedThreadPool()</strong></h3><p>创建一个可缓存的线程池，即这个线程池是无界线程池，无界指工作线程的创建数量几乎没有限制(其实也有限制的,数目为Interger.MAX_VALUE),这样可以灵活的往线程池中添加数据；可以进行自动线程回收指的是如果长时间没有往线程池中提交任务，即如果工作线程空闲了指定的时间，则该工作线程将自动终止。终止后，如果你又提交了新的任务，则线程池重新创建一个工作线程。</p>
<h3 id="newFixedThreadPool-int"><a href="#newFixedThreadPool-int" class="headerlink" title="newFixedThreadPool(int)"></a>newFixedThreadPool(int)</h3><p>固定大小线程池这个很好理解，就是创建一个指定工作线程数量的线程池，如果线程达到设置的最大数，就将提交的任务放到线程池的队列中。一个典型且优秀的线程池，它具有线程池提高程序效率和节省创建线程时所耗的开销的优点。但在线程池空闲时，即线程池中没有可运行任务时，它不会释放工作线程，还会占用一定的系统资源。</p>
<h3 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor()"></a>newSingleThreadExecutor()</h3><p>  单线程线程池，只创建唯一的线程来执行任务，如果这个线程异常结束，会有另一个取代它，保证顺序执行。</p>
<h3 id="newScheduledThreadPool-int-corePoolSize"><a href="#newScheduledThreadPool-int-corePoolSize" class="headerlink" title="newScheduledThreadPool(int corePoolSize)"></a>newScheduledThreadPool(int corePoolSize)</h3><p>线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。参数corePoolSize设定线程池中线程的最小数目。当任务较多时，线程池可能会创建更多的工作线程来执行任务</p>
<p>newCachedThreadPool的参数为SynchronousQueue，newFixedThreadPool和newSingleThreadExecutor的参数都为LinkedBlockingQueue.</p>
<h3 id="合理的配置线程池"><a href="#合理的配置线程池" class="headerlink" title="合理的配置线程池"></a>合理的配置线程池</h3><p>要想合理的配置线程池，就必须首先分析任务特性，可以从以下几个角度来进行分析：</p>
<ol>
<li>任务的性质：CPU密集型任务，IO密集型任务和混合型任务。</li>
<li>任务的优先级：高，中和低。</li>
<li>任务的执行时间：长，中和短。</li>
<li>任务的依赖性：是否依赖其他系统资源，如数据库连接。</li>
</ol>
<p>任务性质不同的任务可以用不同规模的线程池分开处理。CPU密集型任务配置尽可能小的线程，如配置Ncpu+1个线程的线程池。IO密集型任务则由于线程并不是一直在执行任务，则配置尽可能多的线程，如2*Ncpu。混合型的任务，如果可以拆分，则将其拆分成一个CPU密集型任务和一个IO密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐率要高于串行执行的吞吐率，如果这两个任务执行时间相差太大，则没必要进行分解。我们可以通过Runtime.getRuntime().availableProcessors()方法获得当前设备的CPU个数。</p>
<p>优先级不同的任务可以使用优先级队列PriorityBlockingQueue来处理。它可以让优先级高的任务先得到执行，需要注意的是如果一直有优先级高的任务提交到队列里，那么优先级低的任务可能永远不能执行。</p>
<p>执行时间不同的任务可以交给不同规模的线程池来处理，或者也可以使用优先级队列，让执行时间短的任务先执行。</p>
<p>依赖数据库连接池的任务，因为线程提交SQL后需要等待数据库返回结果，如果等待的时间越长CPU空闲时间就越长，那么线程数应该设置越大，这样才能更好的利用CPU。</p>
<p>建议使用有界队列，有界队列能增加系统的稳定性和预警能力，可以根据需要设大一点，比如几千。有一次我们组使用的后台任务线程池的队列和线程池全满了，不断的抛出抛弃任务的异常，通过排查发现是数据库出现了问题，导致执行SQL变得非常缓慢，因为后台任务线程池里的任务全是需要向数据库查询和插入数据的，所以导致线程池里的工作线程全部阻塞住，任务积压在线程池里。如果当时我们设置成无界队列，线程池的队列就会越来越多，有可能会撑满内存，导致整个系统不可用，而不只是后台任务出现问题。当然我们的系统所有的任务是用的单独的服务器部署的，而我们使用不同规模的线程池跑不同类型的任务，但是出现这样问题时也会影响到其他任务。</p>
<p>Ref:<a href="https://www.oschina.net/question/565065_86540" target="_blank" rel="external">Java线程池使用说明</a><br>Ref:<a href="http://blog.csdn.net/scboyhj__/article/details/48805881" target="_blank" rel="external">【Java高级】ThreadPool用法与优势</a></p>
<hr>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="线程与进程-1"><a href="#线程与进程-1" class="headerlink" title="线程与进程"></a>线程与进程</h2><img src="/2017/03/29/Interview-Prepare/thread_0.png" alt="线程0" title="线程0">
<img src="/2017/03/29/Interview-Prepare/thread_1.png" alt="线程1" title="线程1">
<img src="/2017/03/29/Interview-Prepare/thread_2.png" alt="线程2" title="线程2">
<img src="/2017/03/29/Interview-Prepare/thread_3.png" alt="线程3" title="线程3">
<img src="/2017/03/29/Interview-Prepare/thread_4.png" alt="线程4" title="线程4">
<img src="/2017/03/29/Interview-Prepare/thread_5.png" alt="线程5" title="线程5">
<img src="/2017/03/29/Interview-Prepare/thread_6.png" alt="线程6" title="线程6">
<img src="/2017/03/29/Interview-Prepare/thread_7.png" alt="线程7" title="线程7">
<img src="/2017/03/29/Interview-Prepare/thread_8.png" alt="线程8" title="线程8">
<h2 id="中断管理"><a href="#中断管理" class="headerlink" title="中断管理"></a>中断管理</h2><img src="/2017/03/29/Interview-Prepare/interupt1.png" alt="interupt1.png" title="">
<img src="/2017/03/29/Interview-Prepare/interupt2.png" alt="interupt2.png" title="">
<img src="/2017/03/29/Interview-Prepare/interupt3.png" alt="interupt3.png" title="">
<img src="/2017/03/29/Interview-Prepare/interupt4.png" alt="interupt4.png" title="">
<img src="/2017/03/29/Interview-Prepare/interupt5.png" alt="interupt5.png" title="">
<img src="/2017/03/29/Interview-Prepare/interupt6.png" alt="interupt6.png" title="">
<img src="/2017/03/29/Interview-Prepare/interupt7.png" alt="interupt7.png" title="">
<img src="/2017/03/29/Interview-Prepare/interupt8.png" alt="interupt8.png" title="">
<img src="/2017/03/29/Interview-Prepare/interupt9.png" alt="interupt9.png" title="">
<img src="/2017/03/29/Interview-Prepare/interupt10.png" alt="interupt10.png" title="">
<img src="/2017/03/29/Interview-Prepare/interupt11.png" alt="interupt11.png" title="">
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><img src="/2017/03/29/Interview-Prepare/deadlock1.png" alt="deadlock1.png" title="">
<img src="/2017/03/29/Interview-Prepare/deadlock2.png" alt="deadlock2.png" title="">
<img src="/2017/03/29/Interview-Prepare/deadlock3.png" alt="deadlock3.png" title="">
<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><img src="/2017/03/29/Interview-Prepare/pv1.png" alt="pv1.png" title="">
<img src="/2017/03/29/Interview-Prepare/pv2.png" alt="pv2.png" title="">
<img src="/2017/03/29/Interview-Prepare/pv3.png" alt="pv3.png" title="">
<img src="/2017/03/29/Interview-Prepare/pv4.png" alt="pv4.png" title="">
<img src="/2017/03/29/Interview-Prepare/pv5.png" alt="pv5.png" title="">
<img src="/2017/03/29/Interview-Prepare/pv6.png" alt="pv6.png" title="">
<img src="/2017/03/29/Interview-Prepare/pv7.png" alt="pv7.png" title="">
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><img src="/2017/03/29/Interview-Prepare/memory1.png" alt="memory1.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory2.png" alt="memory2.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory3.png" alt="memory3.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory4.png" alt="memory4.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory5.png" alt="memory5.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory6.png" alt="memory6.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory7.png" alt="memory7.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory8.png" alt="memory8.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory9.png" alt="memory9.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory10.png" alt="memory10.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory11.png" alt="memory11.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory12.png" alt="memory12.png" title="">
<img src="/2017/03/29/Interview-Prepare/memory13.png" alt="memory13.png" title="">
<p>Ref: <a href="http://blog.csdn.net/xiaogugood/article/details/38490663" target="_blank" rel="external">【Linux学习笔记】栈与函数调用惯例</a></p>
<h2 id="虚拟存储"><a href="#虚拟存储" class="headerlink" title="虚拟存储"></a>虚拟存储</h2><img src="/2017/03/29/Interview-Prepare/virtualmemory1.png" alt="virtualmemory1.png" title="">
<img src="/2017/03/29/Interview-Prepare/virtualmemory2.png" alt="virtualmemory2.png" title="">
<img src="/2017/03/29/Interview-Prepare/virtualmemory3.png" alt="virtualmemory3.png" title="">
<img src="/2017/03/29/Interview-Prepare/virtualmemory4.png" alt="virtualmemory4.png" title="">
<img src="/2017/03/29/Interview-Prepare/virtualmemory5.png" alt="virtualmemory5.png" title="">
<img src="/2017/03/29/Interview-Prepare/virtualmemory6.png" alt="virtualmemory6.png" title="">
<img src="/2017/03/29/Interview-Prepare/virtualmemory7.png" alt="virtualmemory7.png" title="">
<img src="/2017/03/29/Interview-Prepare/virtualmemory8.png" alt="virtualmemory8.png" title="">
<img src="/2017/03/29/Interview-Prepare/virtualmemory9.png" alt="virtualmemory9.png" title="">
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="TCP-模型与流量控制"><a href="#TCP-模型与流量控制" class="headerlink" title="TCP 模型与流量控制"></a>TCP 模型与流量控制</h2><p><a href="http://blog.csdn.net/whuslei/article/details/6667471/" target="_blank" rel="external">TCP协议中的三次握手和四次挥手(图解)</a></p>
<h2 id="tcp-超时与重传"><a href="#tcp-超时与重传" class="headerlink" title="tcp 超时与重传 "></a><a href="http://blog.chinaunix.net/uid-21878516-id-294591.html" target="_blank" rel="external">tcp 超时与重传 </a></h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[主成份分析算法 PCA]]></title>
      <url>http://wlyPKU.github.io/2017/03/20/IntroductionToPCA/</url>
      <content type="html"><![CDATA[<p>本文是LDA算法的基本介绍。<br><a id="more"></a><br>维数约减 (Dimensionality Reduction)是把<strong>高维度数据</strong>在<strong>损失最小</strong>的情况下转换为<strong>低维度数据</strong>的动作。</p>
<h1 id="动机：为什么需要维数约减"><a href="#动机：为什么需要维数约减" class="headerlink" title="动机：为什么需要维数约减"></a>动机：为什么需要维数约减</h1><h2 id="动机一：数据压缩"><a href="#动机一：数据压缩" class="headerlink" title="动机一：数据压缩"></a>动机一：数据压缩</h2><p>维数约减即减少数据的维度，比如从 2 维降成 1 维，从 3 维降成 2 维等。好处是节省内存，提高运算速度。比如，我们有多个特征，其中两个特征的相关性非常大，一个是用 cm 测量的长度，另外一个是用 inch 测量的长度 (实际上这可能是个真实的例子，因为一个实际问题可能有 1000 个特征，而采集这些特征的工程师可能不是同一个人，这样他们采集回来的数据就可能存在重复，即高相关性)。那么我们可以把这两个高相关性的特征用一条直线来表示，$x^{(i)} = {x_1^{(i)}, x_2^{(i)}}$ 简化为 $z^{(i)} = {z_1^{(i)}}$。相同的原理，如果在一个 3 维空间里，一些点基本分布在一个平面上，那么就可以把 3 维降成 2 维，即 $x^{(i)} = {x_1^{(i)}, x_2^{(i)}, x_3^{(i)}}$ 简化为 $z^{(i)} = {z_1^{(i)}, z_2^{(i)}}$。<br><img src="/2017/03/20/IntroductionToPCA/ml_pca_data_compress.png" alt="数据压缩" title="数据压缩"></p>
<p>上图示例的就是把用英寸测量的特征和用厘米测量的特征合并起来的示意图。这里有个问题，为什么按 inch 测量的特征和按 cm 测量的特征不是在同一条直线上，而是在一条直线周围波动？实际上这个是正常的，因为测量的人和误差等方面的原因，会导致特征采集时数据会在误差范围内波动。</p>
<h2 id="动机二：数据可视化"><a href="#动机二：数据可视化" class="headerlink" title="动机二：数据可视化"></a>动机二：数据可视化</h2><p>比如考查一个国家的经济状况，可能会有 50 个特征，经济总量，人均 GDP，出口值，进口值等等。如果想要直观地观察多个特征之间的关系，就比较难办。因为我们很难画出 50 个特征的图出来。这个时候，我们可以把 50 个特征简化为 2 维或 3 维的数据，然后画出 2D 或 3D 图出来，就可以直观地观察这些数据的样子。</p>
<hr>
<h1 id="主成份分析法"><a href="#主成份分析法" class="headerlink" title="主成份分析法"></a>主成份分析法</h1><p>主成份分析法简称 PCA (Principal Component Analysis)，这是目前最常用和流行的数据降维方法。</p>
<p>假设需要把 2 维数据降为 1 维数据时，我们需要找出一个向量 $u^{(1)}$ ，以便让 2 维数据的点在这个向量所在的直线上的<strong>投射误差</strong>最小。<br><img src="/2017/03/20/IntroductionToPCA/ml_pca_2d_1d.png" alt="2D降维" title="2D降维"></p>
<p>上图中，我们的目标就是找到红色的向量所在的直线，以便让所有黑色的点到这条直线的平均距离最短，这样我们就可以把原来在二维平面上的点映射到在红色直线所在的一维直线上的绿色的点来表示。即把二维数据降为一维数据。</p>
<p>假如需要把 3 维数据降为 2 维数据时，我们需要找出两个向量 $u^{(1)}, u^{(2)}$，以便让 3 维数据的点在这两个向量所决定的平面上的投射误差最小。</p>
<p>从数学角度更一般地描述 PCA 算法，当我们需要从 n 维数据降为 k 维数据时，我们需要找出 k 个向量 $u^{(1)}, u^{(2)}, … , u^{(k)}$ ，把 n 维的数据投射到这 k 个向量决定的线性空间里，最终使<strong>投射误差最小化</strong>的过程。</p>
<h1 id="PCA-算法主要步骤"><a href="#PCA-算法主要步骤" class="headerlink" title="PCA 算法主要步骤"></a>PCA 算法主要步骤</h1><h2 id="步骤一：数据归一化和缩放"><a href="#步骤一：数据归一化和缩放" class="headerlink" title="步骤一：数据归一化和缩放"></a>步骤一：数据归一化和缩放</h2><p>在进行 PCA 算法前，需要对数据进行预处理。预处理包括两个步骤：</p>
<ul>
<li>数据归一化 (Mean Normalization)：使数据的均值为零。加快 PCA 运算速度。</li>
<li>数据缩放 (Feature Scaling)：使不同的特征数值在同一个数量级。</li>
</ul>
<p>数据归一化公式为：<br>$$<br>z_j^{(i)} = x_j^{(i)} - \mu_j<br>$$<br>其中，$\mu_j$ 是训练样本中第 j 个特征 ($x_j^{(i)}$) 的平均值。然后用 $z_j^{(i)}$ 代替 $x_j^{(i)}$ 进行 PCA 运算。<br>接着对数据进行缩放，缩放只在不同特征数据不在同一个数量级上时才使用。<br>$$<br>x_j^{(i)} = \frac{x_j^{(i)} - \mu_j}{s_j}<br>$$<br>其中，$\mu_j$ 是训练样本中第 j 个特征 ($x_j^{(i)}$) 的平均值<br>$$<br>\mu_j = \frac{1}{m} \sum_{i=1}^m x_j^{(i)}<br>$$<br>$s_j$ 是训练样本中第 j 个特征 ($x_j^{(i)}$) 的范围，即 $s_j = max(x_j^{(i)}) - min(x_j^{(i)})$。</p>
<h2 id="步骤二：计算协方差矩阵的特征向量"><a href="#步骤二：计算协方差矩阵的特征向量" class="headerlink" title="步骤二：计算协方差矩阵的特征向量"></a>步骤二：计算协方差矩阵的特征向量</h2><p>数据预处理完，我们需要计算<strong>协方差矩阵 (Covariance Matrix)</strong>，用大写的 Sigma 表示 (大写的 Sigma 和累加运算符看起来几乎一样，但这里其实是一个数学符号而已，不是累加运算)：<br>$$<br>\Sigma = \frac{1}{m} \sum_{i=1}^m (x^{(i)}) (x^{(i)})^T<br>$$<br>如果把训练样例用行向量来表示，那么 X 将是一个 m x n 的矩阵，m 是训练样例个数，n 是特征个数。向量化计算 Sigma 的公式将是：<br>$$<br>\Sigma = \frac{1}{m} X^T X<br>$$<br>计算结果 Sigma 将是一个 n x n 矩阵。接着，计算协方差矩阵的<strong>特征向量 (eigenvectors)</strong>：<br>$$<br>[U, S, V] = svd(Sigma)<br>$$<br>svd 是奇异值分解 (Singular Value Decomposition)，是高级线性代数的内容。在 Octave 里，也可以使用 eig 函数来求解协方差矩阵的特征向量。这里，Sigma 是 n x n 矩阵，经过 svd 运算后，我们真正关心的是 U。它是一个 n x n 矩阵。如果我们选择 U 的列作为向量，那么我们得到 n 个列向量 $u^{(1)}, u^{(2)}, … , u^{(n)}$，我们如果需要把数据降维为 k 维，那么我们只需要选取前 k 个向量即可，即 $u^{(1)}, u^{(2)}, … , u^{(k)}$。</p>
<h2 id="步骤三：数据降维"><a href="#步骤三：数据降维" class="headerlink" title="步骤三：数据降维"></a>步骤三：数据降维</h2><p>接着，我们计算降维后的值 z，假设降维前的值为 $x^{(i)}$，降维后为 $z^{(i)}$，那么：</p>
<p>$$<br>z^{(i)} = U_{reduce}^T x^{(i)}<br>$$</p>
<p>其中，$U_{reduce} = [u^{(1)} u^{(2)} … u^{(k)}]$。看一下数据维度，$U_{reduce}$ 是 n x k 矩阵，$x^{(i)}$ 是 n x 1 矩阵，$z^{(i)}$ 是 k x 1 矩阵。</p>
<p>实现时可以用向量化来提高性能。假设 X 是 m x n 矩阵，m 表示训练样例个数，n 表示特征数。用大写的 Z 表示降维后的数据，是一个 m x k 的矩阵。$U_{reduce}$ 是 n x k 的主成份特征矩阵，每列表示一个主成份特征。那么他们满足下面的关系：</p>
<p>$$<br>Z = X * U_{reduce}<br>$$</p>
<p>要从数学上证明这样计算出来的 $z^{(i)}$ 就是 $x^{(i)}$ 在 $U_{reduce}$ 线性空间投射，使得其投射误差最小，将是一个非常复杂的过程。所幸如果我们单纯从应用 PCA 算法来对数据进行降维的角度来看的话，借用 Octave/Matlab 等现成函数，计算过程相对比较简单。</p>
<hr>
<h1 id="PCA-的应用"><a href="#PCA-的应用" class="headerlink" title="PCA 的应用"></a>PCA 的应用</h1><h2 id="数据还原"><a href="#数据还原" class="headerlink" title="数据还原"></a>数据还原</h2><p>我们怎么样从压缩过的数据里还原出压缩前的数据呢？从前文的计算公式，我们知道降维后的数据计算公式 $z^{(i)} = U_{reduce}^T x^{(i)}$。所以，如果要还原数据，我们可以使用下面的公式：</p>
<p>$$<br>x_{approx}^{(i)} = U_{reduce} z^{(i)}<br>$$</p>
<p>其中，$U_{reduce}$ 是 n x k 维矩阵，$z^{(i)}$ 是 k x 1 列向量。这样算出来的 $x^{(i)}$ 就是 n x 1 列向量。</p>
<p>向量化运算公式为：</p>
<p>$$<br>X_{approx} = Z * U_{reduce}^T<br>$$</p>
<p>其中 $X_{approx}$ 是还原回来的数据，是个 m x n 矩阵，每行表示一个训练样例。Z 是个 m x k 矩阵，是压缩后的数据。$U_{reduce}$ 是 n x k 的主成份特征矩阵，每列表示一个主成份特征。</p>
<h2 id="PCA-算法中-K-参数的选择"><a href="#PCA-算法中-K-参数的选择" class="headerlink" title="PCA 算法中 K 参数的选择"></a>PCA 算法中 K 参数的选择</h2><p>怎么样选择参数 K 呢？K 是主成份分析法中主成份的个数。可以用下面的公式来判断选择的 K 是否合适：</p>
<p>$$<br>\frac{ \frac{1}{m} \sum_{i-1}^m | x^{(i)} - x_{approx}^{(i)} |^2 }{ \frac{1}{m} \sum_{i=1}^m | x^{(i)} | } \le 0.01<br>$$</p>
<p>其中分子部分表示平均投射误差的平方；分母部分表示所有训练样例到原点的距离的平均值。这里的物理意义用术语可以描述为 <strong>99% 的数据真实性被保留下来了 (99% of variance is retianed)</strong>。简单地理解为压缩后的数据还原出原数据的的准确度为 99%。另外常用的比率还有 0.05 ，这个时候准确度就是 95%。在实际应用中，可以根据要解决的问题的场景来决定这个比率。</p>
<p>假设我们的还原率要求是 99%，那么用下面的算法来选择参数 K：</p>
<ol>
<li>让 K = 1</li>
<li>运行 PCA 算法，计算出 $U_{reduce}, z^{(1)}, z^{(2)}, … , z^{(m)}, x_{approx}^{(1)}, x_{approx}^{(2)}, … , x_{approx}^{(m)}$</li>
<li>利用 $\frac{ \frac{1}{m} \sum_{i-1}^m | x^{(i)} - x_{approx}^{(i)} |^2 }{ \frac{1}{m} \sum_{i=1}^m | x^{(i)} | }$ 计算投射误差率，并判断是否满足要求，如果不满足要求，K = K + 1，继续步骤 2；如果满足要求，K 即是我们选择的参数</li>
</ol>
<p>这个算法容易理解，但实际上效率非常低下，因为每做一次循环都需要运行一遍 PCA 算法。另外一个更高效的方法是利用 svd 函数返回的 S 矩阵：$[U, S, V] = svd(Sigma)$。其中 S 是个 n x n 对角矩阵，即只有对角线上的值非零其他元素均为零。</p>
<p>从数学上可以证明（从应用角度，可以忽略这个证明过程），投射误差率也可以使用下面的公式计算：</p>
<p>$$<br>1 - \frac{\sum_{i=1}^k S_{ii}}{\sum_{i=1}^n S_{ii}}<br>$$</p>
<p>这样运算效率大大提高，我们只需要调用一次 svd 函数即可。</p>
<h2 id="加快监督机器学习算法的运算速度"><a href="#加快监督机器学习算法的运算速度" class="headerlink" title="加快监督机器学习算法的运算速度"></a>加快监督机器学习算法的运算速度</h2><p>PCA 的一个典型应用是用来<strong>加快监督学习 (Supervised Learning) 的速度</strong>。</p>
<p>比如，我们有 m 个训练数据 $(x^{(1)}, y^{(1)}), (x^{(2)}, y^{(2)}), … , (x^{(m)}, y^{(m)})$，其中 $x^{(1)}$ 是 10,000 维的数据，想像一下，如果这是个图片分类问题，如果输入的图片是 100 x 100 分辨率的。那么我们就有 10,000 维的输入数据。</p>
<p>使用 PCA 来加快算法运算速度时，我们把输入数据分解出来 $x^{(1)}, x^{(2)}, … , x^{(m)}$，然后运用 PCA 算法对输入数据进行降维压缩，得到降维后的数据 $z^{(1)}, z^{(2)}, … , z^{(m)}$，最后得到新的训练样例 $(z^{(1)}, y^{(1)}), (z^{(2)}, y^{(2)}), … , (z^{(m)}, y^{(m)})$。利用新的训练样例训练出关于压缩后的变量 $z$ 的预测函数 $h_\theta(z)$。</p>
<p>需要注意，PCA 算法只用来处理训练样例，运行 PCA 算法得到的转换参数 $U_{reduce}$ 可以用来对交叉验证数据集 $x_{cv}^{(i)}$ 以及测试数据集 $x_{test}^{(i)}$ 进行转换。当然，还需要相应地对数据进行归一化处理或对数据进行缩放。</p>
<h2 id="PCA-误用"><a href="#PCA-误用" class="headerlink" title="PCA 误用"></a>PCA 误用</h2><p>PCA 的典型应用场景是对数据进行压缩，减少磁盘/内存占用，加快算法运行速度。另外一个是用来数据可视化 (降到 2 维或 3 维)。我们了解到 PCA 可以对数据进行降维，即减少特征数，有人用 PCA 来解决过拟合问题。这可能在某些情况下会起作用，但实际上 <strong>PCA 不是一个好的解决过拟合的方法</strong>。解决过拟合应该使用正则化，加大成本函数里正则项的比重。</p>
<h2 id="PCA-滥用"><a href="#PCA-滥用" class="headerlink" title="PCA 滥用"></a>PCA 滥用</h2><p>另外一个场景是在设计机器学习算法时，一开始就引入 PCA 来对数据进行压缩降维。实际上这不是好的方法。我们应该尽量使用原始数据来进行机器学习运算，当出现问题时，比如内存占用太大，运算时间太长等问题时，我们才考虑用 PCA 来优化。PCA 是算法优化的一个步骤，而不是机器学习系统里的必须步骤。</p>
<p>参考：</p>
<ul>
<li><a href="https://www.coursera.org/learn/machine-learning/home/welcome" target="_blank" rel="external">Machine Learning(Week 8)</a></li>
<li><a href="https://d18ky98rnyall9.cloudfront.net/_a5935af6cf0625a072cb6e2962e4a47f_Lecture14.pdf?Expires=1490140800&amp;Signature=aUOVugE2R-Nh1wGea1FNmNZaWsFm6rXVomckNNpoojTLbvm-LSvioCU13Bm3lkoqF3AnLGc391yHiGMav3Vlee7pm3T-tp4RQJZ5XSvLWse5ZM82GutbJcytv99gpr7hip1IBuQDhDp6Ai-BEKam9nzpj-lgwxiTiU2e27SNzHg_&amp;Key-Pair-Id=APKAJLTNE6QMUY6HBC5A" target="_blank" rel="external">Machine Learning–PCA slides</a></li>
<li><a href="https://www.cs.princeton.edu/picasso/mats/Lecture1_jps.ppt" target="_blank" rel="external">Factor and Component Analysis</a></li>
<li><a href="http://blog.kamidox.com/pca.html" target="_blank" rel="external">主成份分析算法 PCA</a></li>
<li><a href="https://www.zhihu.com/question/47121788" target="_blank" rel="external">知乎PCA 过拟合讨论</a></li>
<li><a href="/2017/03/20/IntroductionToPCA/introductionToPCA.pptx">PPT</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode Weekly Contest 24]]></title>
      <url>http://wlyPKU.github.io/2017/03/19/Leetcode-week24/</url>
      <content type="html"><![CDATA[<p>LeetCode Weekly Contest 24<br>[2017-03-19]</p>
<ol>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-24/problems/diameter-of-binary-tree/" target="_blank" rel="external">Diameter of Binary Tree</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-24/problems/convert-bst-to-greater-tree/" target="_blank" rel="external">Convert BST to Greater Tree</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-24/problems/01-matrix/" target="_blank" rel="external">01 Matrix</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-24/problems/output-contest-matches/" target="_blank" rel="external">Output Contest Matches</a><a id="more"></a>
</li>
</ol>
<hr>
<h1 id="Diameter-of-Binary-Tree"><a href="#Diameter-of-Binary-Tree" class="headerlink" title="Diameter of Binary Tree"></a>Diameter of Binary Tree</h1><p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p>
<p><strong>Example:</strong><br>Given a binary tree<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="number">1</span></div><div class="line">   / \</div><div class="line">  <span class="number">2</span>   <span class="number">3</span></div><div class="line"> / \     </div><div class="line"><span class="number">4</span>   <span class="number">5</span></div></pre></td></tr></table></figure></p>
<p>Return <strong>3</strong>, which is the length of the path [4,2,1,3] or [5,2,1,3].</p>
<p><strong>Note</strong>: The length of path between two nodes is represented by the number of edges between them.</p>
<p>##code<br>For every node, length of longest path which pass it = MaxDepth of its left subtree + MaxDepth of its right subtree.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    int <span class="built_in">max</span> = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> int diameterOfBinaryTree(<span class="type">TreeNode</span> root) &#123;</div><div class="line">        maxDepth(root);</div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> int maxDepth(<span class="type">TreeNode</span> root) &#123;</div><div class="line">        <span class="keyword">if</span> (root == null) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        int <span class="keyword">left</span> = maxDepth(root.<span class="keyword">left</span>);</div><div class="line">        int <span class="keyword">right</span> = maxDepth(root.<span class="keyword">right</span>);</div><div class="line">        </div><div class="line">        <span class="built_in">max</span> = <span class="type">Math</span>.<span class="built_in">max</span>(<span class="built_in">max</span>, <span class="keyword">left</span> + <span class="keyword">right</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="type">Math</span>.<span class="built_in">max</span>(<span class="keyword">left</span>, <span class="keyword">right</span>) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="Convert-BST-to-Greater-Tree"><a href="#Convert-BST-to-Greater-Tree" class="headerlink" title="Convert BST to Greater Tree"></a>Convert BST to Greater Tree</h1><p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p>
<p><strong>Example:</strong><br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input: The root <span class="keyword">of</span> a <span class="keyword">Binary</span> Search Tree <span class="keyword">like</span> this:</div><div class="line">              <span class="number">5</span></div><div class="line">            /   \</div><div class="line">           <span class="number">2</span>     <span class="number">13</span></div><div class="line"></div><div class="line">Output: The root <span class="keyword">of</span> a Greater Tree <span class="keyword">like</span> this:</div><div class="line">             <span class="number">18</span></div><div class="line">            /   \</div><div class="line">          <span class="number">20</span>     <span class="number">13</span></div></pre></td></tr></table></figure></p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>BST中序遍历为升序的，因为先左子树然后中间节点，然后右子树，<br>这里先右子树然后中间然后左子树，累加右边的即可。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> TreeNode convertBST(TreeNode root) &#123;</div><div class="line">        convert(root);</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> convert(TreeNode cur) &#123;</div><div class="line">        <span class="keyword">if</span> (cur == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        convert(cur.right);</div><div class="line">        <span class="keyword">sum</span> += cur.val;</div><div class="line">        cur.val += <span class="keyword">sum</span> - cur.val;</div><div class="line">        convert(cur.left);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="01-Matrix"><a href="#01-Matrix" class="headerlink" title="01 Matrix"></a>01 Matrix</h1><p>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.</p>
<p>The distance between two adjacent cells is 1.<br><strong>Example 1: </strong><br>Input:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>Output:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p><strong>Example 2: </strong><br>Input:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>Output:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>The number of elements of the given matrix will not exceed 10,000.</li>
<li>There are at least one 0 in the given matrix.</li>
<li>The cells are adjacent in only four directions: up, down, left and right.</li>
</ol>
<h1 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h1><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public IList&lt;IList&lt;<span class="keyword">int</span>&gt;&gt; UpdateMatrix(IList&lt;IList&lt;<span class="keyword">int</span>&gt;&gt; <span class="keyword">matrix</span>) &#123;</div><div class="line">    Queue&lt;<span class="keyword">int</span>&gt; queue = new Queue&lt;<span class="keyword">int</span>&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">matrix</span>.Count; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">matrix</span>[i].Count; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">matrix</span>[i][j] == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                queue.Enqueue(i);</div><div class="line">                queue.Enqueue(j);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">matrix</span>[i][j] = <span class="keyword">int</span>.MaxValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (queue.Count &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i = queue.Dequeue();</div><div class="line">        <span class="keyword">int</span> j = queue.Dequeue();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">matrix</span>[i][j] + <span class="number">1</span> &lt; <span class="keyword">matrix</span>[i<span class="number">-1</span>][j])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">matrix</span>[i<span class="number">-1</span>][j] = <span class="keyword">matrix</span>[i][j] + <span class="number">1</span>;</div><div class="line">            queue.Enqueue(i<span class="number">-1</span>);</div><div class="line">            queue.Enqueue(j);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (i &lt; <span class="keyword">matrix</span>.Count - <span class="number">1</span> &amp;&amp; <span class="keyword">matrix</span>[i][j] + <span class="number">1</span> &lt; <span class="keyword">matrix</span>[i+<span class="number">1</span>][j])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">matrix</span>[i+<span class="number">1</span>][j] = <span class="keyword">matrix</span>[i][j] + <span class="number">1</span>;</div><div class="line">            queue.Enqueue(i+<span class="number">1</span>);</div><div class="line">            queue.Enqueue(j);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">matrix</span>[i][j] + <span class="number">1</span> &lt; <span class="keyword">matrix</span>[i][j<span class="number">-1</span>])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">matrix</span>[i][j<span class="number">-1</span>] = <span class="keyword">matrix</span>[i][j] + <span class="number">1</span>;</div><div class="line">            queue.Enqueue(i);</div><div class="line">            queue.Enqueue(j<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (j &lt; <span class="keyword">matrix</span>[i].Count - <span class="number">1</span> &amp;&amp; <span class="keyword">matrix</span>[i][j] + <span class="number">1</span> &lt; <span class="keyword">matrix</span>[i][j+<span class="number">1</span>])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">matrix</span>[i][j+<span class="number">1</span>] = <span class="keyword">matrix</span>[i][j] + <span class="number">1</span>;</div><div class="line">            queue.Enqueue(i);</div><div class="line">            queue.Enqueue(j+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">matrix</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Output-Contest-Matches"><a href="#Output-Contest-Matches" class="headerlink" title="Output Contest Matches"></a>Output Contest Matches</h1><p>During the NBA playoffs, we always arrange the rather strong team to play with the rather weak team, like make the rank 1 team play with the rank nth team, which is a good strategy to make the contest more interesting. Now, you’re given <strong>n</strong> teams, you need to output their <strong>final</strong> contest matches in the form of a string.</p>
<p>The <strong>n</strong> teams are given in the form of positive integers from 1 to n, which represents their initial rank. (Rank 1 is the strongest team and Rank n is the weakest team.) We’ll use parentheses(‘(‘, ‘)’) and commas(‘,’) to represent the contest team pairing - parentheses(‘(‘ , ‘)’) for pairing and commas(‘,’) for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.</p>
<p><strong>Example 1:</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input: <span class="number">2</span></div><div class="line">Output: (<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">Explanation: </div><div class="line">Initially, we have <span class="keyword">the</span> team <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">the</span> team <span class="number">2</span>, placed like: <span class="number">1</span>,<span class="number">2.</span></div><div class="line">Then we pair <span class="keyword">the</span> team (<span class="number">1</span>,<span class="number">2</span>) together <span class="keyword">with</span> <span class="string">'('</span>, <span class="string">')'</span> <span class="keyword">and</span> <span class="string">','</span>, which is <span class="keyword">the</span> final answer.</div></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: <span class="number">4</span></div><div class="line">Output: ((<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">3</span>))</div><div class="line">Explanation: </div><div class="line">In <span class="keyword">the</span> <span class="keyword">first</span> <span class="built_in">round</span>, we pair <span class="keyword">the</span> team <span class="number">1</span> <span class="keyword">and</span> <span class="number">4</span>, <span class="keyword">the</span> team <span class="number">2</span> <span class="keyword">and</span> <span class="number">3</span> together, <span class="keyword">as</span> we need <span class="built_in">to</span> make <span class="keyword">the</span> strong team <span class="keyword">and</span> weak team together.</div><div class="line">And we got (<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">3</span>).</div><div class="line">In <span class="keyword">the</span> <span class="keyword">second</span> <span class="built_in">round</span>, <span class="keyword">the</span> winners <span class="keyword">of</span> (<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">and</span> (<span class="number">2</span>,<span class="number">3</span>) need <span class="built_in">to</span> play again <span class="built_in">to</span> generate <span class="keyword">the</span> final winner, so you need <span class="built_in">to</span> <span class="built_in">add</span> <span class="keyword">the</span> paratheses outside them.</div><div class="line">And we got <span class="keyword">the</span> final answer ((<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">3</span>)).</div></pre></td></tr></table></figure></p>
<p><strong>Example 3:</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: <span class="number">8</span></div><div class="line">Output: (((<span class="number">1</span>,<span class="number">8</span>),(<span class="number">4</span>,<span class="number">5</span>)),((<span class="number">2</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">6</span>)))</div><div class="line">Explanation: </div><div class="line">First <span class="built_in">round</span>: (<span class="number">1</span>,<span class="number">8</span>),(<span class="number">2</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">6</span>),(<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">Second <span class="built_in">round</span>: ((<span class="number">1</span>,<span class="number">8</span>),(<span class="number">4</span>,<span class="number">5</span>)),((<span class="number">2</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">6</span>))</div><div class="line">Third <span class="built_in">round</span>: (((<span class="number">1</span>,<span class="number">8</span>),(<span class="number">4</span>,<span class="number">5</span>)),((<span class="number">2</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">6</span>)))</div><div class="line">Since <span class="keyword">the</span> <span class="keyword">third</span> <span class="built_in">round</span> will generate <span class="keyword">the</span> final winner, you need <span class="built_in">to</span> output <span class="keyword">the</span> answer (((<span class="number">1</span>,<span class="number">8</span>),(<span class="number">4</span>,<span class="number">5</span>)),((<span class="number">2</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">6</span>))).</div></pre></td></tr></table></figure></p>
<p>Note:</p>
<ol>
<li>The n is in range [2, $2^{12}$].</li>
<li>We ensure that the input <strong>n</strong> can be converted into the form $2^k$, where k is a positive integer.</li>
</ol>
<h2 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h2><p>要实现最强的队伍跟最弱的队伍匹配，就是要讲1~n顺序排列，然后第一队跟倒数第一队匹配，构成一个”(1,n)”,将这个字符串放入另一个链表里，然后将第二队跟倒数第二队匹配，构成”(2,n-1)”，并加入链表里。第一个链表处理完后，递归处理新生成的链表，直到新的链表里字符串的数量为1.<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> findContestMatch(<span class="built_in">int</span> n) &#123;</div><div class="line">        List&lt;<span class="keyword">String</span>&gt; matches = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; i++) matches.<span class="built_in">add</span>(<span class="keyword">String</span>.valueOf(i));</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(matches.<span class="built_in">size</span>() != <span class="number">1</span>)&#123;</div><div class="line">            List&lt;<span class="keyword">String</span>&gt; newRound = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; matches.<span class="built_in">size</span>()/<span class="number">2</span>; i++)   </div><div class="line">                newRound.<span class="built_in">add</span>(<span class="string">"("</span> + matches.<span class="built_in">get</span>(i) + <span class="string">","</span> + matches.<span class="built_in">get</span>(matches.<span class="built_in">size</span>() - i - <span class="number">1</span>) + <span class="string">")"</span>);</div><div class="line">            matches = newRound;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> matches.<span class="built_in">get</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LDA Model学习]]></title>
      <url>http://wlyPKU.github.io/2017/03/19/LDAModel/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/v_july_v/article/details/41209515" target="_blank" rel="external">通俗理解LDA主题模型</a><br><a href="/2017/03/19/LDAModel/introductionToLDA.pdf">主题模型</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode Weekly Contest 23]]></title>
      <url>http://wlyPKU.github.io/2017/03/12/Leetcode-week23/</url>
      <content type="html"><![CDATA[<p>LeetCode Weekly Contest 23<br>[2017-03-12]</p>
<ol>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-23/problems/reverse-string-ii/" target="_blank" rel="external">Reverse String II</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-23/problems/minimum-time-difference/" target="_blank" rel="external">Minimum Time Difference</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-23/problems/construct-binary-tree-from-string/" target="_blank" rel="external">Construct Binary Tree from String</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-23/problems/word-abbreviation/" target="_blank" rel="external">Word Abbreviation</a><a id="more"></a>
</li>
</ol>
<hr>
<h1 id="Reverse-String-II"><a href="#Reverse-String-II" class="headerlink" title="Reverse String II"></a>Reverse String II</h1><p>Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.<br><strong>Example:</strong><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Input:</span> s = <span class="string">"abcdefg"</span>, k = <span class="number">2</span></div><div class="line"><span class="symbol">Output:</span> <span class="string">"bacdfeg"</span></div></pre></td></tr></table></figure></p>
<p><strong>Restrictions:</strong></p>
<ol>
<li>The string consists of lower English letters only.</li>
<li>Length of the given string and k will in the range [1, 10000]</li>
</ol>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseStr</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i += <span class="number">2</span> * k)</div><div class="line">            reverse(s.begin() + i, s.begin() + min((<span class="keyword">int</span>)s.size(), i + k));</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Minimum-Time-Difference"><a href="#Minimum-Time-Difference" class="headerlink" title="Minimum Time Difference"></a>Minimum Time Difference</h1><p>Given a list of 24-hour clock time points in “Hour:Minutes” format, find the minimum minutes difference between any two time points in the list.</p>
<p><strong>Example 1:</strong><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Input:</span> [<span class="string">"23:59"</span>,<span class="string">"00:00"</span>]</div><div class="line"><span class="symbol">Output:</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>The number of time points in the given list is at least 2 and won’t exceed 20000.</li>
<li>The input time is legal and ranges from 00:00 to 23:59.</li>
</ol>
<h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><p>O(n) Time O(1) Space<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinDifference</span><span class="params">(List&lt;String&gt; timePoints)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span>[] timeSeen = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1440</span>];</div><div class="line">    <span class="keyword">for</span> (String s : timePoints) &#123;</div><div class="line">        <span class="keyword">int</span> mins = Integer.parseInt(s.split(<span class="string">":"</span>)[<span class="number">0</span>])*<span class="number">60</span> + Integer.parseInt(s.split(<span class="string">":"</span>)[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">if</span> (timeSeen[mins]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        timeSeen[mins] = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Integer firstTimeSeen = <span class="keyword">null</span>, prevTimeSeen = <span class="keyword">null</span>, minDiff = Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1440</span>;i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!timeSeen[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (firstTimeSeen == <span class="keyword">null</span>) &#123;firstTimeSeen = i; prevTimeSeen = i;&#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">          minDiff = Math.min(minDiff, Math.min(i - prevTimeSeen, <span class="number">1440</span> - i + prevTimeSeen));</div><div class="line">          prevTimeSeen = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    minDiff = Math.min(minDiff, Math.min(prevTimeSeen - firstTimeSeen, <span class="number">1440</span> - prevTimeSeen + firstTimeSeen));</div><div class="line">    <span class="keyword">return</span> minDiff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>O(nlog(n)) Time O(1) Space:<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">int</span> findMinDifference(List&lt;<span class="keyword">String</span>&gt; timePoints) &#123;</div><div class="line">    Collections.<span class="built_in">sort</span>(timePoints);</div><div class="line">    <span class="built_in">int</span> minDiff = Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">String</span> prev = timePoints.<span class="built_in">get</span>(timePoints.<span class="built_in">size</span>()<span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">String</span> s : timePoints) &#123;</div><div class="line">        <span class="built_in">int</span> prevMins = Integer.parseInt(prev.<span class="built_in">split</span>(<span class="string">":"</span>)[<span class="number">0</span>])*<span class="number">60</span> + Integer.parseInt(prev.<span class="built_in">split</span>(<span class="string">":"</span>)[<span class="number">1</span>]);</div><div class="line">        <span class="built_in">int</span> curMins = Integer.parseInt(s.<span class="built_in">split</span>(<span class="string">":"</span>)[<span class="number">0</span>])*<span class="number">60</span> + Integer.parseInt(s.<span class="built_in">split</span>(<span class="string">":"</span>)[<span class="number">1</span>]);</div><div class="line">        <span class="built_in">int</span> diff = curMins - prevMins;</div><div class="line">        <span class="keyword">if</span> (diff &lt; <span class="number">0</span>) diff += <span class="number">1440</span>;</div><div class="line">        minDiff = Math.<span class="built_in">min</span>(minDiff, Math.<span class="built_in">min</span>(diff, <span class="number">1440</span> - diff));</div><div class="line">        prev = s;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> minDiff;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="Construct-Binary-Tree-from-String"><a href="#Construct-Binary-Tree-from-String" class="headerlink" title="Construct Binary Tree from String"></a>Construct Binary Tree from String</h1><p>You need to construct a binary tree from a string consisting of parenthesis and integers.<br>The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root’s value and a pair of parenthesis contains a child binary tree with the same structure.<br>You always start to construct the left child node of the parent first if it exists.</p>
<p><strong>Example:</strong><br><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Input</span>: "4(2(3)(1))(6(5))"</div><div class="line"><span class="attribute">Output</span>: return the tree root node representing the following tree:</div><div class="line"></div><div class="line"><span class="lsl">       <span class="number">4</span></span></div><div class="line">     /   \</div><div class="line">    <span class="number">2</span>     <span class="number">6</span></div><div class="line">   / \   / </div><div class="line">  <span class="number">3</span>   <span class="number">1</span> <span class="number">5</span></div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>There will only be ‘(‘, ‘)’, ‘-‘ and ‘0’ ~ ‘9’ in the input string.</li>
</ol>
<h2 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">str2tree</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> s.size() == <span class="number">0</span> ? <span class="literal">nullptr</span> : build(s, i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">string</span>&amp; s, <span class="keyword">int</span>&amp; i)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> start = i;</div><div class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'-'</span>) &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(s[i])) &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> num = stoi(s.substr(start, i - start));</div><div class="line">        TreeNode* node = <span class="keyword">new</span> TreeNode(num);</div><div class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'('</span>) &#123;</div><div class="line">            node-&gt;left = build(s, ++i);</div><div class="line">            i++;    <span class="comment">// )</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'('</span>) &#123;</div><div class="line">            node-&gt;right = build(s, ++i);</div><div class="line">            i++;    <span class="comment">// )</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Word-Abbreviation"><a href="#Word-Abbreviation" class="headerlink" title="Word Abbreviation"></a>Word Abbreviation</h1><p>Given an array of n distinct non-empty strings, you need to generate minimal possible abbreviations for every word following rules below.</p>
<ol>
<li>Begin with the first character and then the number of characters abbreviated, which followed by the last character.</li>
<li>If there are any conflict, that is more than one words share the same abbreviation, a longer prefix is used instead of only the first character until making the map from word to abbreviation become unique. In other words, a final abbreviation cannot map to more than one original words.</li>
<li>If the abbreviation doesn’t make the word shorter, then keep it as original.</li>
</ol>
<p><strong>Example:</strong><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Input:</span> [<span class="string">"like"</span>, <span class="string">"god"</span>, <span class="string">"internal"</span>, <span class="string">"me"</span>, <span class="string">"internet"</span>, <span class="string">"interval"</span>, <span class="string">"intension"</span>, <span class="string">"face"</span>, <span class="string">"intrusion"</span>]</div><div class="line"><span class="symbol">Output:</span> [<span class="string">"l2e"</span>,<span class="string">"god"</span>,<span class="string">"internal"</span>,<span class="string">"me"</span>,<span class="string">"i6t"</span>,<span class="string">"interval"</span>,<span class="string">"inte4n"</span>,<span class="string">"f2e"</span>,<span class="string">"intr4n"</span>]</div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>Both n and the length of each word will not exceed 400.</li>
<li>The length of each word is greater than 1.</li>
<li>The words consist of lowercase English letters only.</li>
<li>The return answers should be in the same order as the original array.<h2 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h2></li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; wordsAbbreviation(List&lt;<span class="keyword">String</span>&gt; dict) &#123;</div><div class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; wordToAbbr = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        Map&lt;Integer, List&lt;<span class="keyword">String</span>&gt;&gt; groups = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        </div><div class="line">        <span class="comment">// Try to group words by their length. Because no point to compare words with different length.</span></div><div class="line">        <span class="comment">// Also no point to look at words with length &lt; 4.</span></div><div class="line">        <span class="built_in">for</span> (<span class="keyword">String</span> <span class="keyword">word</span> : dict) &#123;</div><div class="line">            <span class="keyword">int</span> len = <span class="keyword">word</span>.length();</div><div class="line">            <span class="built_in">if</span> (len &lt; <span class="number">4</span>) &#123;</div><div class="line">                wordToAbbr.<span class="built_in">put</span>(<span class="keyword">word</span>, <span class="keyword">word</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">else</span> &#123;</div><div class="line">                List&lt;<span class="keyword">String</span>&gt; g = groups.getOrDefault(len, <span class="keyword">new</span> ArrayList&lt;<span class="keyword">String</span>&gt;());</div><div class="line">                g.add(<span class="keyword">word</span>);</div><div class="line">                groups.<span class="built_in">put</span>(len, g);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// For each group of words with same length, generate a result HashMap.</span></div><div class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> len : groups.keySet()) &#123;</div><div class="line">            Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; res = getAbbr(groups.<span class="built_in">get</span>(len));</div><div class="line">            <span class="built_in">for</span> (<span class="keyword">String</span> <span class="keyword">word</span> : res.keySet()) &#123;</div><div class="line">                wordToAbbr.<span class="built_in">put</span>(<span class="keyword">word</span>, res.<span class="built_in">get</span>(<span class="keyword">word</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// Generate the result list</span></div><div class="line">        List&lt;<span class="keyword">String</span>&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="built_in">for</span> (<span class="keyword">String</span> <span class="keyword">word</span> : dict) &#123;</div><div class="line">            result.add(wordToAbbr.<span class="built_in">get</span>(<span class="keyword">word</span>));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; getAbbr(List&lt;<span class="keyword">String</span>&gt; words) &#123;</div><div class="line">        Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> len = words.<span class="built_in">get</span>(<span class="number">0</span>).length();</div><div class="line">        </div><div class="line">        <span class="comment">// Try to abbreviate a word from index 1 to len - 2 </span></div><div class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len - <span class="number">2</span>; i++) &#123;</div><div class="line">            Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; abbrToWord = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">            <span class="built_in">for</span> (<span class="keyword">String</span> s : words) &#123;</div><div class="line">                <span class="built_in">if</span> (res.containsKey(s)) <span class="built_in">continue</span>;</div><div class="line">                <span class="comment">// Generate the current abbreviation</span></div><div class="line">                <span class="keyword">String</span> abbr = s.substring(<span class="number">0</span>, i) + (len - <span class="number">1</span> - i) + s.charAt(len - <span class="number">1</span>);</div><div class="line">                <span class="comment">// Tick: use reversed abbreviation to word map to check if there is any duplicated abbreviation</span></div><div class="line">                <span class="built_in">if</span> (!abbrToWord.containsKey(abbr)) &#123;</div><div class="line">                    abbrToWord.<span class="built_in">put</span>(abbr, s);</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">else</span> &#123;</div><div class="line">                    abbrToWord.<span class="built_in">put</span>(abbr, <span class="string">""</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Add unique abbreviations find during this round to result HashMap</span></div><div class="line">            <span class="built_in">for</span> (<span class="keyword">String</span> abbr : abbrToWord.keySet()) &#123;</div><div class="line">                <span class="keyword">String</span> s = abbrToWord.<span class="built_in">get</span>(abbr);</div><div class="line">                <span class="comment">// Not a unique abbreviation</span></div><div class="line">                <span class="built_in">if</span> (s.length() == <span class="number">0</span>) <span class="built_in">continue</span>;</div><div class="line">                res.<span class="built_in">put</span>(s, abbr);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// Add all words that can't be shortened.</span></div><div class="line">        <span class="built_in">for</span> (<span class="keyword">String</span> s : words) &#123;</div><div class="line">            <span class="built_in">if</span> (!res.containsKey(s)) &#123;</div><div class="line">                res.<span class="built_in">put</span>(s, s);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spark、Hadoop、Storm对比]]></title>
      <url>http://wlyPKU.github.io/2017/03/11/spark-hadoop-storm/</url>
      <content type="html"><![CDATA[<p>Spark streaming和storm、Hadoop与Spark的对比<br><a id="more"></a></p>
<h1 id="Spark-与-Hadoop-的对比"><a href="#Spark-与-Hadoop-的对比" class="headerlink" title="Spark 与 Hadoop 的对比"></a>Spark 与 Hadoop 的对比</h1><ul>
<li><p>原生语言：Hadoop-JAVA，Spark-scala</p>
</li>
<li><p>计算模型：Hadoop-MapReduce，Spark-DAG（有向无环图）<br>经常有人说Spark就是内存版的MapReduce，实际上不是的。Spark使用的DAG计算模型可以有效的减少Map和Reduce人物之间传递的数据，尤其适合反复迭代的机器学习场景。而Hadoop则更擅长批处理。不过Tez也是使用的DAG计算模型，他也是Hadoop，明眼人都知道DAG计算模型比MR更好。</p>
</li>
<li>Spark的提出很大程度上是为了解决MapReduce在处理迭代算法上的缺陷。apReduce的缺陷很多，最大的缺陷之一是Map ＋ Reduce的模型。这个模型并不适合描述复杂的数据处理过程。由于MapReduce的数据流是acyclic的，且数据存储在磁盘，这就导致在迭代计算时需要反复进行磁盘读写操作，大大降低了计算效率。而事实上当前机器学习的大多数算法都是迭代算法，因此解决这一问题具有很大的应用价值。</li>
<li>Spark解决这一问题的方法是提供了一个更强大的primitive数据抽象模型–RDD(Resilient Distributed Datasets)，并定义了一系列转化（map,filter,sample,…）和分布式操作(reduce,collect,count…)。</li>
<li>存储：Hadoop-HDFS， Spark-RDD，HDFS<br>Spark既可以仅用内存存储，也可以在HDFS上存储，即使Spark在HDFS上存储，DAG计算模型在迭代计算上还是比MR的更有效率。<br>实际上从应用场景上区分，Hadoop更适合做批处理，而Spark更适合做需要反复迭代的机器学习。</li>
<li>Spark的优势不仅体现在性能提升上的，Spark框架为批处理（Spark Core），交互式（Spark SQL），流式（Spark Streaming），机器学习（MLlib），图计算（GraphX）提供一个统一的数据处理平台，这相对于使用Hadoop有很大优势。</li>
</ul>
<p>那么Spark解决了Hadoop的哪些问题呢？</p>
<ul>
<li>抽象层次低，需要手工编写代码来完成，使用上难以上手。<ul>
<li>=&gt;基于RDD的抽象，实数据处理逻辑的代码非常简短。。</li>
</ul>
</li>
<li>只提供两个操作，Map和Reduce，表达力欠缺。<ul>
<li>=&gt;提供很多转换和动作，很多基本操作如Join，GroupBy已经在RDD转换和动作中实现。</li>
</ul>
</li>
<li>一个Job只有Map和Reduce两个阶段（Phase），复杂的计算需要大量的Job完成，Job之间的依赖关系是由开发者自己管理的。<ul>
<li>=&gt;一个Job可以包含RDD的多个转换操作，在调度时可以生成多个阶段（Stage），而且如果多个map操作的RDD的分区不变，是可以放在同一个Task中进行。</li>
</ul>
</li>
<li>处理逻辑隐藏在代码细节中，没有整体逻辑<ul>
<li>=&gt;在Scala中，通过匿名函数和高阶函数，RDD的转换支持流式API，可以提供处理逻辑的整体视图。代码不包含具体操作的实现细节，逻辑更清晰。</li>
</ul>
</li>
<li>中间结果也放在HDFS文件系统中<ul>
<li>=&gt;中间结果放在内存中，内存放不下了会写入本地磁盘，而不是HDFS。</li>
</ul>
</li>
<li>ReduceTask需要等待所有MapTask都完成后才可以开始<ul>
<li>=&gt; 分区相同的转换构成流水线放在一个Task中运行，分区不同的转换需要Shuffle，被划分到不同的Stage中，需要等待前面的Stage完成后才可以开始。</li>
</ul>
</li>
<li>时延高，只适用Batch数据处理，对于交互式数据处理，实时数据处理的支持不够<ul>
<li>=&gt;通过将流拆成小的batch提供Discretized Stream处理流数据。</li>
</ul>
</li>
<li>对于迭代式数据处理性能比较差<ul>
<li>=&gt;通过在内存中缓存数据，提高迭代式计算的性能。</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Spark-streaming-amp-storm流计算的相关对比"><a href="#Spark-streaming-amp-storm流计算的相关对比" class="headerlink" title="Spark streaming&amp;storm流计算的相关对比"></a>Spark streaming&amp;storm流计算的相关对比</h1><p>Spark streaming和Storm作为当今流行的实时流计算框架，已经在实时计算方案应用的非常广泛了，其中Spark streaming是基于Spark的一个扩展，比storm的出现要晚一些。本节从以下几个角度对两者进行了阐述，可以作为选型方面的一个参考。</p>
<h2 id="数据处理方式"><a href="#数据处理方式" class="headerlink" title="数据处理方式"></a>数据处理方式</h2><p>Spark streaming是构建在Spark上的实时流计算框架，利用时间批量窗口生成Spark的计算输入源RDD，后对该RDD生成Job，进行排队调度到Spark计算框架中执行，底层是基于Spark资源调度和任务计算框架的；Spark streaming是基于数据的批处理方式，针对数据形成任务进行计算，是移动计算而不移动数据，而Storm恰恰相反，storm在处理架构上是数据流入到计算节点，移动的是数据而不是计算，对于时间窗口的批量数据处理，需要用户自己来实现，这个在之前的storm系列的相关章节中有介绍。</p>
<h2 id="生态体系"><a href="#生态体系" class="headerlink" title="生态体系"></a>生态体系</h2><p>Spark streaming是基于Spark的，可以和Spark其他的组件结合，实现交互式的查询adhoc，机器学习MLib等。Storm相对来讲，只是作为一个流式计算框架，缺乏现有的Hadoop生态体系的融合。</p>
<h2 id="延迟以及吞吐量"><a href="#延迟以及吞吐量" class="headerlink" title="延迟以及吞吐量"></a>延迟以及吞吐量</h2><p>Spark streaming基于对批量数据的处理，依赖Spark的调度和计算框架，在延迟方面比storm要高，一般最小的延迟在2s左右，而storm可以达到100ms以内。正因为Spark streaming是批处理的方式处理数据，整体的吞吐量比较高。</p>
<h2 id="容错性"><a href="#容错性" class="headerlink" title="容错性"></a>容错性</h2><p>Spark streaming通过lineage以及在内存维护两份数据备份进行容错，通过lineage记录之前对RDD的操作，若某节点在运行时候出现故障，则可以通过备份数据在其他节点重新计算得到。</p>
<p>Storm通过ack组件进行数据流的跟踪，开销比Sparking streaming要大。</p>
<h2 id="事务性"><a href="#事务性" class="headerlink" title="事务性"></a>事务性</h2><p>Spark streaming保证数据只被处理一次，并且是在批处理的层次级别。</p>
<p>Storm通过跟踪机制能保证每个记录至少被处理一次，如果需要保证状态只更新一次的话，需要由用户自己来实现。</p>
<p>所以对于statefull的计算，对事务性比较高的话，Spark streaming要更好一些。</p>
<p>参考</p>
<p><a href="https://www.zhihu.com/question/26568496" target="_blank" rel="external">与 Hadoop 对比，如何看待 Spark 技术？</a><br><a href="http://blog.csdn.net/yangbutao/article/details/44538637" target="_blank" rel="external">Spark streaming&amp;storm流计算的相关对比</a><br><a href="http://www.cnblogs.com/Leo_wl/p/3530464.html" target="_blank" rel="external">Spark Streaming实时计算框架介绍</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VRP 与or-tools调研]]></title>
      <url>http://wlyPKU.github.io/2017/03/08/vrpAndor-tools/</url>
      <content type="html"><![CDATA[<p>VRP问题及Google工具or-tools的基础调研。<br><a id="more"></a></p>
<h1 id="TSP问题与VRP问题"><a href="#TSP问题与VRP问题" class="headerlink" title="TSP问题与VRP问题"></a>TSP问题与VRP问题</h1><h2 id="TSP问题"><a href="#TSP问题" class="headerlink" title="TSP问题"></a>TSP问题</h2><p>旅行推销员问题（英语：Travelling salesman problem, TSP）是这样一个问题：给定一系列城市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短回路。它是组合优化中的一个NP困难问题，在运筹学和理论计算机科学中非常重要。尽管问题在计算上很困难，但已经有了大量的启发式和精确方法，因此可以完全求解城市数量上万的实例，并且甚至能在误差1%范围内估计上百万个城市的问题。<br>问题定义如下：给定若干城市与城市间的距离集合，求经过所有城市恰好一次的最短回路。即：给定图G=(V, E, W)，其中V为顶点集合，|V|=n，E为边集合，W为边权函数，求集合{1, 2, …, n}的一个排列$\pi$ 使得下式最小。<br>$$<br>\sum_{i=1}^{n-1}w(v_{\pi(i) },v_{\pi(i+1)})+w(v_{\pi(n)},v_{\pi(1)})<br>$$</p>
<p>问题同样可以用整数线性规划问题来形式化，我们用数字1,…,n标记这些城市，并定义：<br>$$<br>x_{ij}= \begin{cases}1, &amp; \text {路径选择从i到j} \\ 0, &amp; \text{otherwise} \end{cases}<br>$$</p>
<p>对于i=1,2,…,n,令$c_{ij}$ 表示从城市i到j的距离，$u_{i}$为一个正整数变量，那么TSP问题可以写成下面的整数线性规划问题:<br>$$<br>\min \sum_{i=0}^n\sum_{j\neq i,j=1}^n x_{ij}w_{ij} \\<br>x_{ij}\in \{0,1\}        \ \ \ \ \ \ \ \ \ \ i,j=1,…,n \\<br>u_i \in {Z}        \ \ \ \ \ \ \ \ \ \ i=1,…,n \\<br>\sum_{i=1,i\neq j}^n x_{ij}=1       \ \ \ \ \ j=1,…,n \\<br>\sum_{j=1,j\neq i}^n x_{ij}=1       \ \ \ \ \ i=1,…,n \\<br>u_i-u_j+nx_{ij}\leq n-1  \ \ \ \ 2\leq i\neq j \leq n<br>$$<br>第一组等式要求每个城市都能另一个城市前来，而第二组等式要求每个城市都能出发。最后的约束迫使覆盖所有城市的路径只有一条，而不是两条或者多条分散的路径在一起覆盖的。</p>
<p>证明可行解中的每个子回路经过1号城市（注意到等式保证了只有一条这样的路径），就能证明所有可行解只包含一个封闭城市序列。对于若我们对所有$x_{ij}=1$ 对应的不等式求和的话，对 <em>k</em> 步不经过1号城市的任何子回路，我们得到：$nk\leq (n-1)k$, 矛盾。 </p>
<h2 id="VRP问题"><a href="#VRP问题" class="headerlink" title="VRP问题"></a>VRP问题</h2><h3 id="一般VRP问题"><a href="#一般VRP问题" class="headerlink" title="一般VRP问题"></a>一般VRP问题</h3><p>车辆路线问题（VRP）最早是由Dantzig和Ramser于1959年首次提出，它是指一定数量的客户，各自有不同数量的货物需求，配送中心向客户提供货物，由一个车队负责分送货物，组织适当的行车路线，目标是使得客户的需求得到满足，并能在一定的约束下，达到诸如路程最短、成本最小、耗费时间最少等目的。</p>
<p>由此定义不难看出，旅行商问题（Traveling Saleman Problem,TSP）是VRP的特例，由于Gaery已证明TSP问题是NP难题，因此，VRP也属于NP难题。 </p>
<p>设有一场站，共有M 辆货车，车辆容量为Q，有N位顾客，每位顾客有其需求量D。车辆从场站出发对客户进行配送服务最后返回场站，要求所有顾客都被配送，每位顾客一次配送完成，且不能违反车辆容量的限制，目的是所有车辆路线的总距离最小。</p>
<p>类似的，问题同样可以用整数线性规划问题来形式化，我们用数字0,…,n-1标记这些城市，记其全集为V，并定义：<br>$$<br>x_{ij}= \begin{cases}1, &amp; \text {路径选择从i到j} \\ 0, &amp; \text{otherwise} \end{cases}<br>$$<br>对于i=0,1,…,n-1,$c_{ij}$ 表示从城市i到j的距离，0为初始点，那么VRP问题可以写成下面的整数线性规划问题:</p>
<p>$$<br>\min \sum_{i\in V}\sum_{j\in V} x_{ij}w_{ij} \\<br>x_{ij} \in \{0, 1\}        \ \ \ \ \ \ \ \ \ \ \ i,j \in V \\<br>\sum_{i\in V}^n x_{ij}=1      \ \ \ \ \ j \in V, j \neq 0 \\<br>\sum_{j\in V}^n x_{ij}=1      \ \ \ \ \ i \in V,i \neq 0 \\<br>\sum_{i\in V}^n x_{i0}=K      \\<br>\sum_{j\in V}^n x_{0j}=K       \\<br>\sum_{i\notin S}\sum_{j\in S}x_{ij} \geq r(S)   \ \ \ \ \ \forall S \subset V  \verb||{0}, S \neq \emptyset<br>$$<br>其中r(s)是服务集合S中各节点所需的最少车辆数目。</p>
<h3 id="变种VRP问题"><a href="#变种VRP问题" class="headerlink" title="变种VRP问题"></a>变种VRP问题</h3><p>与一般的VR问题相比，变种的VRP问题通常增加了一些额外的限制，这些限制通常包括:装卸货的顺序，时间（时间窗），是否要求回到场点，容量限制等。以下是几种比较常见的变种VRP问题：</p>
<ul>
<li><p>有时间窗车辆路径问题（VRPTW，VRP with Time Windows）<br>考虑需求点对于车辆到达的时间有所要求之下，在车辆途程问题之中加入时窗的限制，在VRPTW问题中，除了行驶成本之外, 成本函数还要包括由于早到某个客户而引起的等待时间和客户需要的服务时间。<br>在VRPTW中，车辆除了要满足VRP问题的限制之外，还必须要满足需求点的时窗限制，而需求点的时窗限制可以分为两种，一种是硬时窗（Hard Time Window），硬时窗要求车辆必须要在时窗内到达，早到必须等待，而迟到则拒收；另一种是软时窗（Soft Time Window），不一定要在时窗内到达，但是在时窗之外到达必须要处罚，以处罚替代等待与拒收是软时窗与硬时窗最大的不同。</p>
</li>
<li><p>接送货物的车辆路径问题（VRPPD，Vehicle Routing Problem with Pickup and Delivery）<br>货物需要从一个地点转移到另一个地点。VRPPD的目标是找到一组最好的路径，十多分钟若干车辆可以成本最低地运送货物。</p>
</li>
<li><p>按序接送货物的车辆路径问题（Vehicle Routing Problem with LIFO）<br>与VRPPD类似，问题需要把若干货物从一个地点转移到另外的地点，但不同的是，限制了装卸货物的顺序。为了避免临时卸货再装货，问题要求最近接收的货物需要最早的被运送、卸货。</p>
</li>
<li><p>开放的车辆路径问题（OVRP，Open Vehicle Routing Problem）<br>车辆在运送货物后并不需要返回场点。</p>
</li>
</ul>
<h1 id="or-tools-工具包介绍"><a href="#or-tools-工具包介绍" class="headerlink" title="or-tools 工具包介绍"></a>or-tools 工具包介绍</h1><h2 id="or-tools-功能介绍"><a href="#or-tools-功能介绍" class="headerlink" title="or-tools 功能介绍"></a>or-tools 功能介绍</h2><p>or-tools 是 Google 的优化搜索工具。</p>
<p><strong>Google 优化工具包括：</strong> </p>
<ul>
<li>约束编程解决方案(N-皇后问题，数字谜问题)<blockquote>
<p>Constraint programming is the name given to identifying feasible solutions out of a very large set of candidates, where the problem can be modeled in terms of arbitrary constraints.</p>
</blockquote>
</li>
<li>为线性规划和混合整数规划解决方案提供简单统一的接口，包括 CBC, CLP, GLOP, GLPK, Gurobi, SCIP, 和 Sulum。</li>
<li>背包算法</li>
<li>图算法 (最短路径，线性和分配，最小费用流，最大流)</li>
<li>路径规划问题(TSP,VRP)</li>
</ul>
<p><strong>or-tools的主要特性</strong> </p>
<ul>
<li>开源免费 </li>
<li>持续维护，改进和开发 Alive</li>
<li>详细的文档，提供 C++, Python, Java 和 C# 方面的示例</li>
<li>便捷，可以在以下平台编译：<ul>
<li>Ubuntu 14.04 and 16.04 up (64-bit).</li>
<li>Mac OS X El Capitan with Xcode 7.x (64 bit).</li>
<li>Microsoft Windows with Visual Studio 2013 and 2015 (64-bit)</li>
</ul>
</li>
<li>高效</li>
<li>用户友好</li>
<li>良好测试</li>
</ul>
<h2 id="or-tools-结构介绍"><a href="#or-tools-结构介绍" class="headerlink" title="or-tools 结构介绍"></a>or-tools 结构介绍</h2><table>
<thead>
<tr>
<th style="text-align:center">目录</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">algorithms</td>
<td style="text-align:center">其他or-tools库使用的一些辅助算法</td>
</tr>
<tr>
<td style="text-align:center">base</td>
<td style="text-align:center">or-tools使用的基本utilities</td>
</tr>
<tr>
<td style="text-align:center">constraint_solver</td>
<td style="text-align:center">约束求解器</td>
</tr>
<tr>
<td style="text-align:center">flatzinc</td>
<td style="text-align:center">用于处理FlatZinc的实用程序</td>
</tr>
<tr>
<td style="text-align:center">graph</td>
<td style="text-align:center">Google的图和处理流问题的库</td>
</tr>
<tr>
<td style="text-align:center">linear_solver</td>
<td style="text-align:center">线性求解器(for linear programming)</td>
</tr>
<tr>
<td style="text-align:center">lp_data</td>
<td style="text-align:center">用于处理数据的线性优化问题的实用utilities</td>
</tr>
<tr>
<td style="text-align:center">sat</td>
<td style="text-align:center">Google的可满足性求解器</td>
</tr>
<tr>
<td style="text-align:center">util</td>
<td style="text-align:center">or-tools使用的通用utilities</td>
</tr>
</tbody>
</table>
<h1 id="or-tools-求解vrp问题示例"><a href="#or-tools-求解vrp问题示例" class="headerlink" title="or-tools 求解vrp问题示例"></a>or-tools 求解vrp问题示例</h1><h2 id="tsp问题求解"><a href="#tsp问题求解" class="headerlink" title="tsp问题求解"></a>tsp问题求解</h2><p><strong>求解问题步骤：</strong></p>
<p>1.准备数据: 给定若干个城市和他们之间的距离</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[[   <span class="number">0</span>, <span class="number">2451</span>,  <span class="number">713</span>, <span class="number">1018</span>, <span class="number">1631</span>, <span class="number">1374</span>, <span class="number">2408</span>,  <span class="number">213</span>, <span class="number">2571</span>,  <span class="number">875</span>] , <span class="comment"># New York</span></div><div class="line">  [<span class="number">2451</span>,    <span class="number">0</span>, <span class="number">1745</span>, <span class="number">1524</span>,  <span class="number">831</span>, <span class="number">1240</span>,  <span class="number">959</span>, <span class="number">2596</span>,  <span class="number">403</span>, <span class="number">1589</span>], <span class="comment"># Los Angeles</span></div><div class="line">  [ <span class="number">713</span>, <span class="number">1745</span>,    <span class="number">0</span>,  <span class="number">355</span>,  <span class="number">920</span>,  <span class="number">803</span>, <span class="number">1737</span>,  <span class="number">851</span>, <span class="number">1858</span>,  <span class="number">262</span>], <span class="comment"># Chicago</span></div><div class="line">  [<span class="number">1018</span>, <span class="number">1524</span>,  <span class="number">355</span>,    <span class="number">0</span>,  <span class="number">700</span>,  <span class="number">862</span>, <span class="number">1395</span>, <span class="number">1123</span>, <span class="number">1584</span>,  <span class="number">466</span>], <span class="comment"># Minneapolis</span></div><div class="line">  [<span class="number">1631</span>,  <span class="number">831</span>,  <span class="number">920</span>,  <span class="number">700</span>,    <span class="number">0</span>,  <span class="number">663</span>, <span class="number">1021</span>, <span class="number">1769</span>,  <span class="number">949</span>,  <span class="number">796</span>], <span class="comment"># Denver</span></div><div class="line">  [<span class="number">1374</span>, <span class="number">1240</span>,  <span class="number">803</span>,  <span class="number">862</span>,  <span class="number">663</span>,    <span class="number">0</span>, <span class="number">1681</span>, <span class="number">1551</span>, <span class="number">1765</span>,  <span class="number">547</span>], <span class="comment"># Dallas</span></div><div class="line">  [<span class="number">2408</span>,  <span class="number">959</span>, <span class="number">1737</span>, <span class="number">1395</span>, <span class="number">1021</span>, <span class="number">1681</span>,    <span class="number">0</span>, <span class="number">2493</span>,  <span class="number">678</span>, <span class="number">1724</span>], <span class="comment"># Seattle</span></div><div class="line">  [ <span class="number">213</span>, <span class="number">2596</span>,  <span class="number">851</span>, <span class="number">1123</span>, <span class="number">1769</span>, <span class="number">1551</span>, <span class="number">2493</span>,    <span class="number">0</span>, <span class="number">2699</span>, <span class="number">1038</span>], <span class="comment"># Boston</span></div><div class="line">  [<span class="number">2571</span>,  <span class="number">403</span>, <span class="number">1858</span>, <span class="number">1584</span>,  <span class="number">949</span>, <span class="number">1765</span>,  <span class="number">678</span>, <span class="number">2699</span>,    <span class="number">0</span>, <span class="number">1744</span>], <span class="comment"># San Francisco</span></div><div class="line">  [ <span class="number">875</span>, <span class="number">1589</span>,  <span class="number">262</span>,  <span class="number">466</span>,  <span class="number">796</span>,  <span class="number">547</span>, <span class="number">1724</span>, <span class="number">1038</span>, <span class="number">1744</span>,    <span class="number">0</span>]] <span class="comment"># St. Louis</span></div></pre></td></tr></table></figure>
<p>2.构造求解器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"> <span class="comment"># Cities</span></div><div class="line"> city_names = [<span class="string">"New York"</span>, <span class="string">"Los Angeles"</span>, <span class="string">"Chicago"</span>, <span class="string">"Minneapolis"</span>, <span class="string">"Denver"</span>,</div><div class="line">                <span class="string">"Dallas"</span>, <span class="string">"Seattle"</span>, <span class="string">"Boston"</span>, <span class="string">"San Francisco"</span>, <span class="string">"St. Louis"</span>]</div><div class="line"></div><div class="line">   tsp_size = len(city_names)</div><div class="line"></div><div class="line"> <span class="comment"># Create routing model</span></div><div class="line"> <span class="keyword">if</span> tsp_size &gt; <span class="number">0</span>:</div><div class="line">   <span class="comment"># TSP of size tsp_size</span></div><div class="line">   <span class="comment"># Second argument = 1 to build a single tour (it's a TSP).</span></div><div class="line">   <span class="comment"># Nodes are indexed from 0 to tsp_size - 1. By default the start of</span></div><div class="line">   <span class="comment"># the route is node 0.</span></div><div class="line">   routing = pywrapcp.RoutingModel(tsp_size, <span class="number">1</span>)</div><div class="line">   search_parameters = pywrapcp.RoutingModel.DefaultSearchParameters()</div><div class="line"></div><div class="line">   <span class="comment"># Setting first solution heuristic: the</span></div><div class="line">   <span class="comment"># method for finding a first solution to the problem.</span></div><div class="line">   search_parameters.first_solution_strategy = (</div><div class="line">       routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)</div><div class="line"></div><div class="line">   <span class="comment"># Create the distance callback, which takes two arguments </span></div><div class="line"><span class="comment">#(the from and to node indices)</span></div><div class="line">   <span class="comment"># and returns the distance between these nodes.</span></div><div class="line"></div><div class="line">   dist_between_nodes = CreateDistanceCallback()</div><div class="line">   dist_callback = dist_between_nodes.Distance</div><div class="line">   routing.SetArcCostEvaluatorOfAllVehicles(dist_callback)</div></pre></td></tr></table></figure>
<p>3.准备callback函数及完成整个程序</p>
<blockquote>
<p>callback: a function that takes any pair of nodes in the graph for the problem and returns the distance between them — and then passes it to the solver</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateDistanceCallback</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="string">"""Create callback to calculate distances between points."""</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""Array of distances between points."""</span></div><div class="line"></div><div class="line">    self.matrix = </div><div class="line"> [[   <span class="number">0</span>, <span class="number">2451</span>,  <span class="number">713</span>, <span class="number">1018</span>, <span class="number">1631</span>, <span class="number">1374</span>, <span class="number">2408</span>,  <span class="number">213</span>, <span class="number">2571</span>,  <span class="number">875</span>], <span class="comment"># New York</span></div><div class="line">  [<span class="number">2451</span>,    <span class="number">0</span>, <span class="number">1745</span>, <span class="number">1524</span>,  <span class="number">831</span>, <span class="number">1240</span>,  <span class="number">959</span>, <span class="number">2596</span>,  <span class="number">403</span>, <span class="number">1589</span>], <span class="comment"># Los Angeles</span></div><div class="line">  [ <span class="number">713</span>, <span class="number">1745</span>,    <span class="number">0</span>,  <span class="number">355</span>,  <span class="number">920</span>,  <span class="number">803</span>, <span class="number">1737</span>,  <span class="number">851</span>, <span class="number">1858</span>,  <span class="number">262</span>], <span class="comment"># Chicago</span></div><div class="line">  [<span class="number">1018</span>, <span class="number">1524</span>,  <span class="number">355</span>,    <span class="number">0</span>,  <span class="number">700</span>,  <span class="number">862</span>, <span class="number">1395</span>, <span class="number">1123</span>, <span class="number">1584</span>,  <span class="number">466</span>], <span class="comment"># Minneapolis</span></div><div class="line">  [<span class="number">1631</span>,  <span class="number">831</span>,  <span class="number">920</span>,  <span class="number">700</span>,    <span class="number">0</span>,  <span class="number">663</span>, <span class="number">1021</span>, <span class="number">1769</span>,  <span class="number">949</span>,  <span class="number">796</span>], <span class="comment"># Denver</span></div><div class="line">  [<span class="number">1374</span>, <span class="number">1240</span>,  <span class="number">803</span>,  <span class="number">862</span>,  <span class="number">663</span>,    <span class="number">0</span>, <span class="number">1681</span>, <span class="number">1551</span>, <span class="number">1765</span>,  <span class="number">547</span>], <span class="comment"># Dallas</span></div><div class="line">  [<span class="number">2408</span>,  <span class="number">959</span>, <span class="number">1737</span>, <span class="number">1395</span>, <span class="number">1021</span>, <span class="number">1681</span>,    <span class="number">0</span>, <span class="number">2493</span>,  <span class="number">678</span>, <span class="number">1724</span>], <span class="comment"># Seattle</span></div><div class="line">  [ <span class="number">213</span>, <span class="number">2596</span>,  <span class="number">851</span>, <span class="number">1123</span>, <span class="number">1769</span>, <span class="number">1551</span>, <span class="number">2493</span>,    <span class="number">0</span>, <span class="number">2699</span>, <span class="number">1038</span>], <span class="comment"># Boston</span></div><div class="line">  [<span class="number">2571</span>,  <span class="number">403</span>, <span class="number">1858</span>, <span class="number">1584</span>,  <span class="number">949</span>, <span class="number">1765</span>,  <span class="number">678</span>, <span class="number">2699</span>,    <span class="number">0</span>, <span class="number">1744</span>], <span class="comment"># San Francisco</span></div><div class="line">  [ <span class="number">875</span>, <span class="number">1589</span>,  <span class="number">262</span>,  <span class="number">466</span>,  <span class="number">796</span>,  <span class="number">547</span>, <span class="number">1724</span>, <span class="number">1038</span>, <span class="number">1744</span>,    <span class="number">0</span>]] <span class="comment"># St. Louis</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Distance</span><span class="params">(self, from_node, to_node)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.matrix[from_node][to_node]</div></pre></td></tr></table></figure>
<p>4.调用求解器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">  <span class="comment"># Solve, returns a solution if any.</span></div><div class="line">  assignment = routing.SolveWithParameters(search_parameters)</div><div class="line">  <span class="keyword">if</span> assignment:</div><div class="line">    <span class="comment"># Solution cost.</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"Total distance: "</span> + str(assignment.ObjectiveValue()) + <span class="string">" miles\n"</span></div><div class="line">    <span class="comment"># Inspect solution.</span></div><div class="line">    <span class="comment"># Only one route here; otherwise iterate from 0 to routing.vehicles() - 1</span></div><div class="line">    route_number = <span class="number">0</span></div><div class="line">    index = routing.Start(route_number) </div><div class="line"> <span class="comment"># Index of the variable for the starting node.</span></div><div class="line">    route = <span class="string">''</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">not</span> routing.IsEnd(index):</div><div class="line">      <span class="comment"># Convert variable indices to node indices in the displayed route.</span></div><div class="line">      route += str(city_names[routing.IndexToNode(index)]) + <span class="string">' -&gt; '</span></div><div class="line">      index = assignment.Value(routing.NextVar(index))</div><div class="line">    route += str(city_names[routing.IndexToNode(index)])</div><div class="line">    <span class="keyword">print</span> <span class="string">"Route:\n\n"</span> + route</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'No solution found.'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">  <span class="keyword">print</span> <span class="string">'Specify an instance greater than 0.'</span></div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">A depot must be specified, setting one at node 0</div><div class="line">Total distance: 7293 miles</div><div class="line"></div><div class="line">Route:</div><div class="line"></div><div class="line">New York -&gt; Boston -&gt; Chicago -&gt; Minneapolis -&gt; Denver -&gt; Seattle -&gt;</div><div class="line">San Francisco -&gt; Phoenix -&gt; Dallas -&gt; St. Louis -&gt; New York</div></pre></td></tr></table></figure>
<h2 id="vrp问题求解"><a href="#vrp问题求解" class="headerlink" title="vrp问题求解"></a>vrp问题求解</h2><p>与tsp相比，示例vrp程序加入了车辆的容量限制，同时调度多辆车完成规划问题。</p>
<p>1.准备数据，生成每个站点的位置跟其货物需求；定义距离调用函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_data_array</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">  locations = [[<span class="number">82</span>, <span class="number">76</span>], [<span class="number">96</span>, <span class="number">44</span>], [<span class="number">50</span>, <span class="number">5</span>], [<span class="number">49</span>, <span class="number">8</span>], [<span class="number">13</span>, <span class="number">7</span>], [<span class="number">29</span>, <span class="number">89</span>], [<span class="number">58</span>, <span class="number">30</span>], </div><div class="line">               [<span class="number">14</span>, <span class="number">24</span>], [<span class="number">12</span>, <span class="number">39</span>], [<span class="number">3</span>, <span class="number">82</span>], [<span class="number">5</span>, <span class="number">10</span>], [<span class="number">98</span>, <span class="number">52</span>], [<span class="number">84</span>, <span class="number">25</span>], [<span class="number">61</span>, <span class="number">59</span>], </div><div class="line">               [<span class="number">88</span>, <span class="number">51</span>], [<span class="number">91</span>, <span class="number">2</span>], [<span class="number">19</span>, <span class="number">32</span>], [<span class="number">93</span>, <span class="number">3</span>], [<span class="number">50</span>, <span class="number">93</span>], [<span class="number">98</span>, <span class="number">14</span>], [<span class="number">5</span>, <span class="number">42</span>],</div><div class="line">               [<span class="number">61</span>, <span class="number">62</span>], [<span class="number">9</span>, <span class="number">97</span>], [<span class="number">80</span>, <span class="number">55</span>], [<span class="number">57</span>, <span class="number">69</span>], [<span class="number">23</span>, <span class="number">15</span>], [<span class="number">20</span>, <span class="number">70</span>], [<span class="number">85</span>, <span class="number">60</span>]]</div><div class="line"></div><div class="line">  demands = [<span class="number">0</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">18</span>,</div><div class="line">             <span class="number">19</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">20</span>]</div><div class="line">  data = [locations, demands]</div><div class="line">  <span class="keyword">return</span> data</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(x1, y1, x2, y2)</span>:</span></div><div class="line">    <span class="comment"># Manhattan distance</span></div><div class="line">    dist = abs(x1 - x2) + abs(y1 - y2)</div><div class="line">    <span class="keyword">return</span> dist</div><div class="line"></div><div class="line"><span class="comment"># Distance callback</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateDistanceCallback</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="string">"""Create callback to calculate distances between points."""</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, locations)</span>:</span></div><div class="line">    <span class="string">"""Initialize distance array."""</span></div><div class="line">    size = len(locations)</div><div class="line">    self.matrix = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> from_node <span class="keyword">in</span> xrange(size):</div><div class="line">      <span class="keyword">for</span> to_node <span class="keyword">in</span> xrange(size):</div><div class="line">          <span class="comment"># get x1,y1,x2,y2 from the data</span></div><div class="line">          self.matrix[from_node][to_node] = distance(x1, y1, x2, y2)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Distance</span><span class="params">(self, from_node, to_node)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.matrix[from_node][to_node]</div></pre></td></tr></table></figure>
<p>2.准备demand的调用函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Demand callback</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateDemandCallback</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="string">"""Create callback to get demands at each location."""</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, demands)</span>:</span></div><div class="line">    self.matrix = demands</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Demand</span><span class="params">(self, from_node, to_node)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.matrix[from_node]</div></pre></td></tr></table></figure>
<p>3.将demand生成dimension加入模型</p>
<blockquote>
<p>Routing problems involve quantities that accumulate along a vehicle’s route. In this example, such a quantity is demand — say, the weight or volume of a package that must be delivered. For every location where a vehicle stops along its route, the total demand on the vehicle increases by the demand at that location. (Other examples of these types of quantities are the distance a vehicle travels, or its travel time.)</p>
<p>The routing solver stores each quantity of this type in an object called a <em>dimension</em>. The dimension contains a callback for the quantity, along with related data and variables. You can add a dimension to a routing problem using the solver’s <code>AddDimension</code> method. The following code creates a dimension for the demand in this example.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Put a callback to the demands.</span></div><div class="line">demands_at_locations = CreateDemandCallback(demands)</div><div class="line">demands_callback = demands_at_locations.Demand</div><div class="line"></div><div class="line"><span class="comment"># Add a dimension for demand.</span></div><div class="line">slack_max = <span class="number">0</span></div><div class="line">vehicle_capacity = <span class="number">100</span></div><div class="line">fix_start_cumul_to_zero = <span class="keyword">True</span></div><div class="line">demand = <span class="string">"Demand"</span></div><div class="line">routing.AddDimension(demands_callback, slack_max, vehicle_capacity,</div><div class="line">                     fix_start_cumul_to_zero, demand)</div></pre></td></tr></table></figure>
<p>   <strong>AddDimension介绍:</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Methods to add dimensions to routes; dimensions represent quantities</span></div><div class="line"><span class="comment">// accumulated at nodes along the routes. They represent quantities such as</span></div><div class="line"><span class="comment">// weights or volumes carried along the route, or distance or times.</span></div><div class="line"><span class="comment">// Quantities at a node are represented by "cumul" variables and the increase</span></div><div class="line"><span class="comment">// or decrease of quantities between nodes are represented by "transit"</span></div><div class="line"><span class="comment">// variables. These variables are linked as follows:</span></div><div class="line"><span class="comment">// if j == next(i), cumul(j) = cumul(i) + transit(i) + slack(i)</span></div><div class="line"><span class="comment">// where slack is a positive slack variable (can represent waiting times for</span></div><div class="line"><span class="comment">// a time dimension).</span></div><div class="line"><span class="comment">// Setting the value of fix_start_cumul_to_zero to true will force the "cumul"</span></div><div class="line"><span class="comment">// variable of the start node of all vehicles to be equal to 0.</span></div><div class="line"></div><div class="line"><span class="comment">// Creates a dimension where the transit variable is constrained to be</span></div><div class="line"><span class="comment">// equal to evaluator(i, next(i)); 'slack_max' is the upper bound of the</span></div><div class="line"><span class="comment">// slack variable and 'capacity' is the upper bound of the cumul variables.</span></div><div class="line"><span class="comment">// 'name' is the name used to reference the dimension; this name is used to</span></div><div class="line"><span class="comment">// get cumul and transit variables from the routing model.</span></div><div class="line"><span class="comment">// Returns false if a dimension with the same name has already been created</span></div><div class="line"><span class="comment">// (and doesn't create the new dimension).</span></div><div class="line"><span class="comment">// Takes ownership of the callback 'evaluator'.</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AddDimension</span><span class="params">(NodeEvaluator2* evaluator, int64 slack_max, int64 capacity,</span></span></div><div class="line">                  <span class="keyword">bool</span> fix_start_cumul_to_zero, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name);</div></pre></td></tr></table></figure>
<p>4.调用求解器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Solve, displays a solution if any.</span></div><div class="line">assignment = routing.SolveWithParameters(search_parameters)</div><div class="line"><span class="keyword">if</span> assignment:</div><div class="line">  <span class="comment"># Display solution.</span></div><div class="line">  <span class="comment"># Solution cost.</span></div><div class="line">  <span class="keyword">print</span> <span class="string">"Total distance of all routes:"</span> +str(assignment.ObjectiveValue()) + <span class="string">"\n"</span></div><div class="line"><span class="comment"># 输出Routing结果</span></div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Total distance of all routes: 970</div><div class="line"></div><div class="line">Route for vehicle 0:</div><div class="line"></div><div class="line">0 -&gt; 14 -&gt; 2 -&gt; 3 -&gt; 23 -&gt; 4 -&gt; 11 -&gt; 28 -&gt; 6 -&gt; 26 -&gt; 0</div><div class="line"></div><div class="line">Distance of route 0: 300</div><div class="line">Demand met by vehicle 0: 100</div><div class="line"></div><div class="line">Route for vehicle 1:</div><div class="line"></div><div class="line">0 -&gt; 27 -&gt; 24 -&gt; 0</div><div class="line"></div><div class="line">Distance of route 1: 78</div><div class="line">Demand met by vehicle 1: 44</div></pre></td></tr></table></figure>
<p><strong>另一个例子(VRPTW)</strong>:</p>
<p>1.准备数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">start_times =  [<span class="number">28842</span>, <span class="number">50891</span>, <span class="number">10351</span>, <span class="number">49370</span>, <span class="number">22553</span>, <span class="number">53131</span>, <span class="number">8908</span>,</div><div class="line">                <span class="number">56509</span>, <span class="number">54032</span>, <span class="number">10883</span>, <span class="number">60235</span>, <span class="number">46644</span>, <span class="number">35674</span>, <span class="number">30304</span>,</div><div class="line">                <span class="number">39950</span>, <span class="number">38297</span>, <span class="number">36273</span>, <span class="number">52108</span>, <span class="number">2333</span>, <span class="number">48986</span>, <span class="number">44552</span>,</div><div class="line">                <span class="number">31869</span>, <span class="number">38027</span>, <span class="number">5532</span>, <span class="number">57458</span>, <span class="number">51521</span>, <span class="number">11039</span>, <span class="number">31063</span>,</div><div class="line">                <span class="number">38781</span>, <span class="number">49169</span>, <span class="number">32833</span>, <span class="number">7392</span>]</div><div class="line"></div><div class="line">end_times = [<span class="number">46842</span>, <span class="number">68891</span>, <span class="number">28351</span>, <span class="number">67370</span>, <span class="number">40553</span>, <span class="number">71131</span>, <span class="number">26908</span>,</div><div class="line">             <span class="number">74509</span>, <span class="number">72032</span>, <span class="number">28883</span>, <span class="number">78235</span>, <span class="number">64644</span>, <span class="number">53674</span>, <span class="number">48304</span>,</div><div class="line">             <span class="number">57950</span>, <span class="number">56297</span>, <span class="number">54273</span>, <span class="number">70108</span>, <span class="number">20333</span>, <span class="number">66986</span>, <span class="number">62552</span>,</div><div class="line">             <span class="number">49869</span>, <span class="number">56027</span>, <span class="number">23532</span>, <span class="number">75458</span>, <span class="number">69521</span>, <span class="number">29039</span>, <span class="number">49063</span>,</div><div class="line">             <span class="number">56781</span>, <span class="number">67169</span>, <span class="number">50833</span>, <span class="number">25392</span>]</div></pre></td></tr></table></figure>
<p>   在这个例子中，我们定义总的时间为服务时间+路上花费的时间，其中服务时间与每个站点所需货物量成正比，路上花费的时间跟站点间的距离成正比。</p>
<p>2.定义callback函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Service time (proportional to demand) callback.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateServiceTimeCallback</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="string">"""Create callback to get time windows at each location."""</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, demands, time_per_demand_unit)</span>:</span></div><div class="line">    self.matrix = demands</div><div class="line">    self.time_per_demand_unit = time_per_demand_unit</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ServiceTime</span><span class="params">(self, from_node, to_node)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.matrix[from_node] * self.time_per_demand_unit</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create the travel time callback (equals distance divided by speed).</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateTravelTimeCallback</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="string">"""Create callback to get travel times between locations."""</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dist_callback, speed)</span>:</span></div><div class="line">    self.dist_callback = dist_callback</div><div class="line">    self.speed = speed</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">TravelTime</span><span class="params">(self, from_node, to_node)</span>:</span></div><div class="line">    travel_time = self.dist_callback(from_node, to_node) / self.speed</div><div class="line">    <span class="keyword">return</span> travel_time</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create total_time callback (equals service time plus travel time).</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateTotalTimeCallback</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="string">"""Create callback to get total times between locations."""</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, service_time_callback, travel_time_callback)</span>:</span></div><div class="line">    self.service_time_callback = service_time_callback</div><div class="line">    self.travel_time_callback = travel_time_callback</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">TotalTime</span><span class="params">(self, from_node, to_node)</span>:</span></div><div class="line">    service_time = self.service_time_callback(from_node, to_node)</div><div class="line">    travel_time = self.travel_time_callback(from_node, to_node)</div><div class="line">    <span class="keyword">return</span> service_time + travel_time</div></pre></td></tr></table></figure>
<p>3.加入时间维度</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add time dimension.</span></div><div class="line">time_per_demand_unit = <span class="number">300</span></div><div class="line">horizon = <span class="number">24</span> * <span class="number">3600</span></div><div class="line">time = <span class="string">"Time"</span></div><div class="line">speed = <span class="number">10</span></div><div class="line"></div><div class="line">service_times = CreateServiceTimeCallback(demands, time_per_demand_unit)</div><div class="line">service_time_callback = service_times.ServiceTime</div><div class="line"></div><div class="line">travel_times = CreateTravelTimeCallback(dist_callback, speed)</div><div class="line">travel_time_callback = travel_times.TravelTime</div><div class="line"></div><div class="line">total_times = CreateTotalTimeCallback(service_time_callback, travel_time_callback)</div><div class="line">total_time_callback = total_times.TotalTime</div><div class="line"></div><div class="line">routing.AddDimension(total_time_callback,  <span class="comment"># total time function callback</span></div><div class="line">                     horizon,</div><div class="line">                     horizon,</div><div class="line">                     fix_start_cumul_to_zero,</div><div class="line">                     time)</div></pre></td></tr></table></figure>
<p>   The significant inputs to the <code>AddDimension</code> method are the following:</p>
<ul>
<li><code>total_time_callback</code> — Returns the service time plus travel time to the next location.</li>
<li><code>horizon</code> — An upper bound for the accumulated time over each vehicle’s route. This sets a global time window of [0, horizon] for all locations. To set the individual time windows at each location, you need to set ranges on the cumulative variable for time, as shown in <a href="https://developers.google.com/optimization/routing/tsp/vehicle_routing_time_windows#add-time-window-constraints" target="_blank" rel="external">Add time window constraints</a>.</li>
<li><code>fix_start_cumul_to_zero</code> — Since the value is <code>True</code>, the <a href="https://developers.google.com/optimization/routing/tsp/vehicle_routing#dim_vars" target="_blank" rel="external">cumulative variable</a> for time is set to 0 at the start of each vehicle’s route.</li>
<li><code>time</code> — The name of the dimension, which you can use to access data or variables stored in it.</li>
</ul>
<p>4.加入时间维度的限制</p>
<ul>
<li>获取该dimension</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">time_dimension = routing.GetDimensionOrDie(time)</div></pre></td></tr></table></figure>
<ul>
<li>为其中的每个站点设置开始、结束时间值</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> location <span class="keyword">in</span> range(<span class="number">1</span>, num_locations):</div><div class="line">	start = start_time[location]</div><div class="line">	end = end_time[location]</div><div class="line">	time_dimension.CmulVar(location).SetRange(start, end)</div></pre></td></tr></table></figure>
<h2 id="3-3-使用到的相关代码"><a href="#3-3-使用到的相关代码" class="headerlink" title="3.3 使用到的相关代码"></a>3.3 使用到的相关代码</h2><img src="/2017/03/08/vrpAndor-tools/DependsOn-tsp-cc.png" alt="DependsOn-tsp-cc.png" title="">
<img src="/2017/03/08/vrpAndor-tools/DependsOn-tsp-cc-all.png" alt="DependsOn-tsp-cc-all.png" title="">
<h2 id="3-4-关键变量、函数与API"><a href="#3-4-关键变量、函数与API" class="headerlink" title="3.4 关键变量、函数与API"></a>3.4 关键变量、函数与API</h2><p>1.求解相关</p>
<ol>
<li>初始解生成算法routing_first_solution<ul>
<li>default : select the first node with an unbound successor and connect it to the first available node</li>
<li>GlobalCheapestArc :iteratively connect two nodes which produce the cheapest route segment</li>
<li>LocalCheapestArc:select the first node with an unbound successor and connect it to the node which produces the cheapest route segment</li>
<li>PathCheapestArc :starting from a route “start” node, connect it to the node which produces the cheapest route segment, then extend the route by iterating on the last node added to the route</li>
</ul>
</li>
<li>search过程：<ul>
<li>Meta-heuristics启发式算法策略<ul>
<li>routing_guided_local_search (default: false): activates guided local search (cf. <a href="http://en.wikipedia.org/wiki/Guided_Local_Search" target="_blank" rel="external">http://en.wikipedia.org/wiki/Guided_Local_Search</a>);<br> this is generally the most efficient metaheuristic for vehicle routing; </li>
<li>routing_simulated_annealing (default: false): activates simulated annealing (cf. <a href="http://en.wikipedia.org/wiki/Simulated_annealing" target="_blank" rel="external">http://en.wikipedia.org/wiki/Simulated_annealing</a>); </li>
<li>routing_tabu_search (default: false): activates tabu search (cf. <a href="http://en.wikipedia.org/wiki/Tabu_search" target="_blank" rel="external">http://en.wikipedia.org/wiki/Tabu_search</a>).</li>
</ul>
</li>
<li>Local search neighborhoods<ul>
<li>routing_no_lns (default: false): 使用LNS，可能会找到更好的解法，不过通常比较慢<blockquote>
<p>forbids the use of Large Neighborhood Search (LNS); LNS can find good solutions but is usually very slow.<br>Refer to the description of PATHLNS in the LocalSearchOperators enum<br>in constraint_solver.h for more information. </p>
</blockquote>
</li>
<li>routing_no_tsp (default: true): 在求解当前模型时不使用精确算法求解“子”TSP问题<blockquote>
<p>forbids the use of exact methods to solve “sub”-traveling salesman problems (TSPs) of the current model  (such as sub-parts of a route, or one route in a multiple route problem). Uses dynamic programming to solve such TSPs with a maximum size (in number of nodes) up to cp_local_search_tsp_opt_size (flag with a default value of 13 nodes). It is not activated by default because it can slow down the search. </p>
</blockquote>
</li>
</ul>
</li>
<li>searching for solution 限制<ul>
<li>routing_solution_limit (default: kint64max) 在找到若干次更好的解后停止</li>
<li>routing_time_limit (default: kint64max) 在查找若干时间后停止</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>2.Routing相关</p>
<p>   有两类重要变量：</p>
<ol>
<li>路径相关的变量<ul>
<li>next(i) i节点的直接后继的节点号；可以通过IndexToNode()得到该节点</li>
<li>vehicle(i) 返回该节点属于车辆路径的编号</li>
</ul>
</li>
<li>Dimension相关的变量<ul>
<li>dimension变量</li>
<li>cumul(i, d)  dimension为d的节点i的累积值</li>
<li>transit(i, d)  dimension为d的节点i的delta值</li>
</ul>
</li>
</ol>
<p>3.关键API</p>
<ul>
<li>RoutingModel RoutingModel (int nodes, int vehicles, NodeIndex depot) : 构造VRP问题</li>
<li>const Assignment* RoutingModel :: SolveWithParameters (const RoutingSearchParameters&amp; search_parameters)：求解VRP问题</li>
<li>void SetArcCostEvaluatorOfAllVehicles(NodeEvaluator2* evaluator)：定义最小化变量问题</li>
<li>VRP问题：加入若干节点属于同一辆车的约束：void AddSoftSameVehicleConstraint(const std::vector<nodeindex>&amp; nodes, int64 cost);<br>示例：solver-&gt;AddSoftSameVehicleConstraint();<br>标注数组中的节点应该分到同一辆车上，如果没在同一辆车上，每多一个特例，总成本函数增加cost.</nodeindex></li>
<li><p>VRP问题：加入两个节点存在接送关系：void AddPickupAndDelivery(NodeIndex node1, NodeIndex node2);满足：<br>  1.node1,node2由同一辆车服务；<br>  2.node1在node2前被访问。<br> 使用示例:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//     Solver* const solver = routing.solver();</span></div><div class="line"><span class="comment">//     solver-&gt;AddConstraint(solver-&gt;MakeEquality(</span></div><div class="line"><span class="comment">//         routing.VehicleVar(routing.NodeToIndex(node1)),</span></div><div class="line"><span class="comment">//         routing.VehicleVar(routing.NodeToIndex(node2))));</span></div><div class="line"><span class="comment">//     solver-&gt;AddPickupAndDelivery(node1, node2);</span></div></pre></td></tr></table></figure>
</li>
<li><p>AddDimension():</p>
<ul>
<li>evaluator: 加入限制变量的callback函数</li>
<li>相关的两个变量： cumul(累加变量)   transit(站点变量)</li>
<li>if j == next(i), cumul(j) = cumul(i) + transit(i) + slack(i)</li>
<li>capacity: cumul变量的最大值</li>
<li>fix_start_cumul_to_zero:开始时是否置为0<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AddDimension</span><span class="params">(NodeEvaluator2* evaluator,</span></span></div><div class="line">                 int64 slack_max, </div><div class="line">                 int64 capacity,</div><div class="line">                 <span class="keyword">bool</span> fix_start_cumul_to_zero,</div><div class="line">                 <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name</div><div class="line">                );</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>自定义条件：在constraint_solver中加入constraint。示例:</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// b == (v == c)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsEqualCstCt</span><span class="params">(IntExpr* <span class="keyword">const</span> v, int64 c, IntVar* <span class="keyword">const</span> b)</span></span>;</div><div class="line"><span class="comment">// status var of (v == c)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsEqualCstVar</span><span class="params">(IntExpr* <span class="keyword">const</span> var, int64 value)</span></span>;</div><div class="line"><span class="comment">// b == (v1 == v2)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsEqualCt</span><span class="params">(IntExpr* <span class="keyword">const</span> v1, IntExpr* v2, IntVar* <span class="keyword">const</span> b)</span></span>;</div><div class="line"><span class="comment">// status var of (v1 == v2)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsEqualVar</span><span class="params">(IntExpr* <span class="keyword">const</span> var, IntExpr* v2)</span></span>;</div><div class="line"><span class="comment">// left == right</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeEquality</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right)</span></span>;</div><div class="line"><span class="comment">// expr == value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeEquality</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, int64 value)</span></span>;</div><div class="line"><span class="comment">// expr == value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeEquality</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, <span class="keyword">int</span> value)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// b == (v != c)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsDifferentCstCt</span><span class="params">(IntExpr* <span class="keyword">const</span> v, int64 c, IntVar* <span class="keyword">const</span> b)</span></span>;</div><div class="line"><span class="comment">// status var of (v != c)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsDifferentCstVar</span><span class="params">(IntExpr* <span class="keyword">const</span> v, int64 c)</span></span>;</div><div class="line"><span class="comment">// status var of (v1 != v2)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsDifferentVar</span><span class="params">(IntExpr* <span class="keyword">const</span> v1, IntExpr* <span class="keyword">const</span> v2)</span></span>;</div><div class="line"><span class="comment">// b == (v1 != v2)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsDifferentCt</span><span class="params">(IntExpr* <span class="keyword">const</span> v1, IntExpr* <span class="keyword">const</span> v2,</span></span></div><div class="line">                              IntVar* <span class="keyword">const</span> b);</div><div class="line"><span class="comment">// left != right</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeNonEquality</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right)</span></span>;</div><div class="line"><span class="comment">// expr != value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeNonEquality</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, int64 value)</span></span>;</div><div class="line"><span class="comment">// expr != value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeNonEquality</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, <span class="keyword">int</span> value)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// b == (v &lt;= c)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsLessOrEqualCstCt</span><span class="params">(IntExpr* <span class="keyword">const</span> v, int64 c,</span></span></div><div class="line">                                   IntVar* <span class="keyword">const</span> b);</div><div class="line"><span class="comment">// status var of (v &lt;= c)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsLessOrEqualCstVar</span><span class="params">(IntExpr* <span class="keyword">const</span> v, int64 c)</span></span>;</div><div class="line"><span class="comment">// status var of (left &lt;= right)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsLessOrEqualVar</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right)</span></span>;</div><div class="line"><span class="comment">// b == (left &lt;= right)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsLessOrEqualCt</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right,</span></span></div><div class="line">                                IntVar* <span class="keyword">const</span> b);</div><div class="line"><span class="comment">// left &lt;= right</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeLessOrEqual</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right)</span></span>;</div><div class="line"><span class="comment">// expr &lt;= value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeLessOrEqual</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, int64 value)</span></span>;</div><div class="line"><span class="comment">// expr &lt;= value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeLessOrEqual</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, <span class="keyword">int</span> value)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// b == (v &gt;= c)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsGreaterOrEqualCstCt</span><span class="params">(IntExpr* <span class="keyword">const</span> v, int64 c,</span></span></div><div class="line">                                      IntVar* <span class="keyword">const</span> b);</div><div class="line"><span class="comment">// status var of (v &gt;= c)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsGreaterOrEqualCstVar</span><span class="params">(IntExpr* <span class="keyword">const</span> v, int64 c)</span></span>;</div><div class="line"><span class="comment">// status var of (left &gt;= right)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsGreaterOrEqualVar</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right)</span></span>;</div><div class="line"><span class="comment">// b == (left &gt;= right)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsGreaterOrEqualCt</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right,</span></span></div><div class="line">                                   IntVar* <span class="keyword">const</span> b);</div><div class="line"><span class="comment">// left &gt;= right</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeGreaterOrEqual</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right)</span></span>;</div><div class="line"><span class="comment">// expr &gt;= value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeGreaterOrEqual</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, int64 value)</span></span>;</div><div class="line"><span class="comment">// expr &gt;= value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeGreaterOrEqual</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, <span class="keyword">int</span> value)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// b == (v &gt; c)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsGreaterCstCt</span><span class="params">(IntExpr* <span class="keyword">const</span> v, int64 c, IntVar* <span class="keyword">const</span> b)</span></span>;</div><div class="line"><span class="comment">// status var of (v &gt; c)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsGreaterCstVar</span><span class="params">(IntExpr* <span class="keyword">const</span> v, int64 c)</span></span>;</div><div class="line"><span class="comment">// status var of (left &gt; right)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsGreaterVar</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right)</span></span>;</div><div class="line"><span class="comment">// b == (left &gt; right)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsGreaterCt</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right,</span></span></div><div class="line">                            IntVar* <span class="keyword">const</span> b);</div><div class="line"><span class="comment">// left &gt; right</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeGreater</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right)</span></span>;</div><div class="line"><span class="comment">// expr &gt; value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeGreater</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, int64 value)</span></span>;</div><div class="line"><span class="comment">// expr &gt; value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeGreater</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, <span class="keyword">int</span> value)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// b == (v &lt; c)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsLessCstCt</span><span class="params">(IntExpr* <span class="keyword">const</span> v, int64 c, IntVar* <span class="keyword">const</span> b)</span></span>;</div><div class="line"><span class="comment">// status var of (v &lt; c)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsLessCstVar</span><span class="params">(IntExpr* <span class="keyword">const</span> v, int64 c)</span></span>;</div><div class="line"><span class="comment">// status var of (left &lt; right)</span></div><div class="line"><span class="function">IntVar* <span class="title">MakeIsLessVar</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right)</span></span>;</div><div class="line"><span class="comment">// b == (left &lt; right)</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeIsLessCt</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right,</span></span></div><div class="line">                         IntVar* <span class="keyword">const</span> b);</div><div class="line"><span class="comment">// left &lt; right</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeLess</span><span class="params">(IntExpr* <span class="keyword">const</span> left, IntExpr* <span class="keyword">const</span> right)</span></span>;</div><div class="line"><span class="comment">// expr &lt; value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeLess</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, int64 value)</span></span>;</div><div class="line"><span class="comment">// expr &lt; value</span></div><div class="line"><span class="function">Constraint* <span class="title">MakeLess</span><span class="params">(IntExpr* <span class="keyword">const</span> expr, <span class="keyword">int</span> value)</span></span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Quantities at a node are represented by “cumul” variables and the increase or decrease of quantities between nodes are represented by “transit” variables. These variables are linked as follows: if j == next(i), cumul(j) = cumul(i) + transit(i) + slack(i)</p>
</blockquote>
<p><strong>整理PPT：<a href="or-tools.pptx">or_tool.pptx</a></strong></p>
<p><strong>Reference</strong> </p>
<p><a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem" target="_blank" rel="external">https://en.wikipedia.org/wiki/Travelling_salesman_problem</a><br><a href="https://en.wikipedia.org/wiki/Vehicle_routing_problem" target="_blank" rel="external">https://en.wikipedia.org/wiki/Vehicle_routing_problem</a><br><a href="https://developers.google.com/optimization/reference/constraint_solver/routing/" target="_blank" rel="external">https://developers.google.com/optimization/reference/constraint_solver/routing/</a><br><a href="https://acrogenesis.com/or-tools/documentation/documentation_hub.html#user_manual" target="_blank" rel="external">https://acrogenesis.com/or-tools/documentation/documentation_hub.html#user_manual</a><br><a href="https://developers.google.com/optimization/" target="_blank" rel="external">https://developers.google.com/optimization/</a><br><a href="https://developers.google.com/optimization/routing/tsp/tsp" target="_blank" rel="external">https://developers.google.com/optimization/routing/tsp/tsp</a><br><a href="https://developers.google.com/optimization/routing/tsp/vehicle_routing_time_windows" target="_blank" rel="external">https://developers.google.com/optimization/routing/tsp/vehicle_routing_time_windows</a><br><a href="https://github.com/google/or-tools/blob/master/src/constraint_solver/routing.h" target="_blank" rel="external">https://github.com/google/or-tools/blob/master/src/constraint_solver/routing.h</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode Weekly Contest 22]]></title>
      <url>http://wlyPKU.github.io/2017/03/05/Leetcode-week22/</url>
      <content type="html"><![CDATA[<p>LeetCode Weekly Contest 22<br>[2017-03-05]</p>
<ol>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-22/problems/k-diff-pairs-in-an-array/" target="_blank" rel="external">k-diff Pairs in an Array</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-22/problems/lonely-pixel-i/" target="_blank" rel="external">Lonely Pixel I</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-22/problems/lonely-pixel-ii/" target="_blank" rel="external">Lonely Pixel II</a></li>
<li><a href="https://leetcode.com/contest/leetcode-weekly-contest-22/problems/freedom-trail/" target="_blank" rel="external">Freedom Trail</a><a id="more"></a>
</li>
</ol>
<hr>
<h1 id="K-diff-Pairs-in-an-Array"><a href="#K-diff-Pairs-in-an-Array" class="headerlink" title="K-diff Pairs in an Array"></a>K-diff Pairs in an Array</h1><p>Given an array of integers and an integer <strong>k</strong>, you need to find the number of <strong>unique</strong> k-diff pairs in the array. Here a <strong>k-diff</strong> pair is defined as an integer pair (i, j), where <strong>i</strong> and <strong>j</strong> are both numbers in the array and their absolute difference is <strong>k</strong>.<br><strong> Example 1: </strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>], k = <span class="number">2</span></div><div class="line">Output: <span class="number">2</span></div><div class="line">Explanation: There are <span class="literal">two</span> <span class="number">2</span>-diff pairs <span class="keyword">in</span> <span class="keyword">the</span> array, (<span class="number">1</span>, <span class="number">3</span>) <span class="keyword">and</span> (<span class="number">3</span>, <span class="number">5</span>).</div><div class="line">Although we have <span class="literal">two</span> <span class="number">1</span>s <span class="keyword">in</span> <span class="keyword">the</span> input, we should only <span class="literal">return</span> <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> unique pairs.</div></pre></td></tr></table></figure></p>
<p><strong> Example 2: </strong><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Input:</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], k = <span class="number">1</span></div><div class="line"><span class="symbol">Output:</span> <span class="number">4</span></div><div class="line"><span class="symbol">Explanation:</span> There are four <span class="number">1</span>-diff pairs <span class="keyword">in</span> the array, (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>) <span class="keyword">and</span> (<span class="number">4</span>, <span class="number">5</span>).</div></pre></td></tr></table></figure></p>
<p><strong> Example 3: </strong><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Input:</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>], k = <span class="number">0</span></div><div class="line"><span class="symbol">Output:</span> <span class="number">1</span></div><div class="line"><span class="symbol">Explanation:</span> There is one <span class="number">0</span>-diff pair <span class="keyword">in</span> the array, (<span class="number">1</span>, <span class="number">1</span>).</div></pre></td></tr></table></figure></p>
<p><strong> Note: </strong></p>
<ol>
<li>The pairs (i, j) and (j, i) count as the same pair.</li>
<li>The length of the array won’t exceed 10,000.</li>
<li>All the integers in the given input belong to the range: [-1e7, 1e7].</li>
</ol>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * for every number in the array:</div><div class="line">     *  - if there was a number previously k-diff with it, save the smaller to a set;</div><div class="line">     *  - and save the value to a set;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; starters;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; indices;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (indices.find(nums[i] - k) != indices.end()) &#123;</div><div class="line">                starters.insert(nums[i] - k);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (indices.find(nums[i] + k) != indices.end()) &#123;</div><div class="line">                starters.insert(nums[i]);</div><div class="line">            &#125;</div><div class="line">            indices.insert(nums[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> starters.size();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Lonely-Pixel-I"><a href="#Lonely-Pixel-I" class="headerlink" title="Lonely Pixel I"></a>Lonely Pixel I</h1><p>Given a picture consisting of black and white pixels, find the number of <strong>black</strong> lonely pixels.</p>
<p>The picture is represented by a 2D char array consisting of ‘B’ and ‘W’, which means black and white pixels respectively.</p>
<p>A black lonely pixel is character ‘B’ that located at a specific position where the same row and same column don’t have any other black pixels.</p>
<p><strong>Example:</strong><br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Input</span>: </div><div class="line">[[<span class="string">'W'</span>, <span class="string">'W'</span>, <span class="string">'B'</span>],</div><div class="line"> [<span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>],</div><div class="line"> [<span class="string">'B'</span>, <span class="string">'W'</span>, <span class="string">'W'</span>]]</div><div class="line"></div><div class="line"><span class="symbol">Output</span>: <span class="number">3</span></div><div class="line"><span class="symbol">Explanation</span>: <span class="symbol">All</span> the three <span class="string">'B'</span>s are black lonely pixels.</div></pre></td></tr></table></figure></p>
<p><strong>Note</strong></p>
<ol>
<li>The range of width and height of the input 2D array is [1,500].</li>
</ol>
<h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * suppose matrix is m*n, there is at most min(m, n) lonely pixels, </div><div class="line">	 * because there could be no more than 1 in each row, or column;</div><div class="line">     * therefore, if we record num of black pixel on each row and column, </div><div class="line">	 * we can easily tell whether each pixel is lonely or NO.</div><div class="line">     * </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findLonelyPixel</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; picture)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!picture.size() || !picture[<span class="number">0</span>].size()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> m = picture.size();</div><div class="line">        <span class="keyword">int</span> n = picture[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rows = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m, <span class="number">0</span>);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cols = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                rows[i] += picture[i][j] == <span class="string">'B'</span>;</div><div class="line">                cols[j] += picture[i][j] == <span class="string">'B'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> lonely = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n &amp;&amp; rows[i] &gt; <span class="number">0</span>; j++) &#123;</div><div class="line">                lonely += picture[i][j] == <span class="string">'B'</span> &amp;&amp; rows[i] == <span class="number">1</span> &amp;&amp; cols[j] == <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> lonely;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Lonely-Pixel-II"><a href="#Lonely-Pixel-II" class="headerlink" title="Lonely Pixel II"></a>Lonely Pixel II</h1><p>Given a picture consisting of black and white pixels, and a positive integer N, find the number of black pixels located at some specific row <strong>R</strong> and column <strong>C</strong> that align with all the following rules:</p>
<ol>
<li>Row R and column C both contain exactly N black pixels.</li>
<li>For all rows that have a black pixel at column C, they should be exactly the same as row R</li>
</ol>
<p>The picture is represented by a 2D char array consisting of ‘B’ and ‘W’, which means black and white pixels respectively.<br><strong>Example:</strong><br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Input</span>:                                            </div><div class="line">[[<span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>],    </div><div class="line"> [<span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>],    </div><div class="line"> [<span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>],    </div><div class="line"> [<span class="string">'W'</span>, <span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>]] </div><div class="line"></div><div class="line"><span class="symbol">N</span> = <span class="number">3</span></div><div class="line"><span class="symbol">Output</span>: <span class="number">6</span></div><div class="line"><span class="symbol">Explanation</span>: <span class="symbol">All</span> the bold <span class="string">'B'</span> are the black pixels we need (all <span class="string">'B'</span>s at column <span class="number">1</span> and <span class="number">3</span>).</div><div class="line">        <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">4</span>    <span class="number">5</span>         column index                                            </div><div class="line"><span class="number">0</span>    [[<span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>],    </div><div class="line"><span class="number">1</span>     [<span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>],    </div><div class="line"><span class="number">2</span>     [<span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>],    </div><div class="line"><span class="number">3</span>     [<span class="string">'W'</span>, <span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>, <span class="string">'B'</span>, <span class="string">'W'</span>]]    </div><div class="line">row index</div><div class="line"></div><div class="line"><span class="symbol">Take</span> <span class="string">'B'</span> at row <span class="symbol">R</span> = <span class="number">0</span> and column <span class="symbol">C</span> = <span class="number">1</span> as an example:</div><div class="line"><span class="symbol">Rule</span> <span class="number">1</span>, row <span class="symbol">R</span> = <span class="number">0</span> and column <span class="symbol">C</span> = <span class="number">1</span> both have exactly <span class="symbol">N</span> = <span class="number">3</span> black pixels. </div><div class="line"><span class="symbol">Rule</span> <span class="number">2</span>, the rows have black pixel at column <span class="symbol">C</span> = <span class="number">1</span> are row <span class="number">0</span>, row <span class="number">1</span> and row <span class="number">2.</span> <span class="symbol">They</span> are exactly the same as row <span class="symbol">R</span> = <span class="number">0.</span></div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>The range of width and height of the input 2D array is [1,200].</li>
</ol>
<h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * Analysis:</div><div class="line">    * rule <span class="number">1</span> can be easily achieved <span class="keyword">by</span> create <span class="number">2</span> vector&lt;int&gt; rows, cols; <span class="keyword">to</span> <span class="built_in">record</span> black pixel <span class="keyword">in</span> each row &amp; col;</div><div class="line">    * <span class="keyword">for</span> rule <span class="number">2</span>, you need <span class="keyword">to</span> <span class="number">1</span>st, know <span class="keyword">the</span> rows black <span class="keyword">on</span> col[j], which can be achieved <span class="keyword">by</span> using vector&lt;<span class="keyword">set</span>&lt;int&gt;&gt; cols;</div><div class="line">    * <span class="number">2</span>nd able <span class="keyword">to</span> compare those rows <span class="keyword">as</span> <span class="built_in">string</span> <span class="keyword">or</span> bitmap <span class="keyword">or</span> simply vector&lt;char&gt;;</div><div class="line">    * </div><div class="line">    * Steps:</div><div class="line">    * <span class="number">1.</span> create map&lt;int, <span class="keyword">set</span>&lt;int&gt;&gt; cols; map&lt;int, <span class="keyword">set</span>&lt;int&gt;&gt; rows;</div><div class="line">    * <span class="number">2.</span> <span class="keyword">for</span> <span class="keyword">every</span> pixel meet rule <span class="number">1</span>: pic[i][j] == 'B' &amp;&amp; rows[i].size() == N &amp;&amp; cols[j].size() == N</div><div class="line">    *       rule2: <span class="keyword">for</span> <span class="keyword">every</span> row k <span class="keyword">in</span> cols[j];  check <span class="keyword">that</span> row[k] = row[i];</div><div class="line">    */</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findBlackPixel</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; pic, <span class="keyword">int</span> N)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!pic.size() || !pic[<span class="number">0</span>].size()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> m = pic.size();</div><div class="line">        <span class="keyword">int</span> n = pic[<span class="number">0</span>].size();</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; rows;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; cols;</div><div class="line"></div><div class="line">        <span class="comment">/* 1. create map&lt;int, set&lt;int&gt;&gt; cols; map&lt;int, set&lt;int&gt;&gt; rows; */</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (pic[i][j] == <span class="string">'B'</span>) &#123;</div><div class="line">                    rows[i].insert(j);</div><div class="line">                    cols[j].insert(i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* 2. 2. for every pixel meet rule 1: pic[i][j] == 'B' &amp;&amp; rows[i].size() == N &amp;&amp; cols[j].size() == N */</span></div><div class="line">        <span class="keyword">int</span> lonelys = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n &amp;&amp; rows.count(i); j++) &#123;</div><div class="line">                <span class="keyword">if</span> (pic[i][j] == <span class="string">'B'</span> &amp;&amp; rows[i].size() == N &amp;&amp; cols[j].size() == N) &#123;</div><div class="line">                    <span class="comment">/* rule2: for every row k in cols[j];  check that row[k] = row[i]; */</span></div><div class="line">                    <span class="keyword">bool</span> lonely = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> r : cols[j]) &#123;</div><div class="line">                        <span class="keyword">if</span> (rows[r] != rows[i]) &#123;</div><div class="line">                            lonely = <span class="literal">false</span>; <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    lonelys += lonely;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> lonelys;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Freedom-Trail"><a href="#Freedom-Trail" class="headerlink" title="Freedom Trail"></a>Freedom Trail</h1><p>In the video game Fallout 4, the quest “Road to Freedom” requires players to reach a metal dial called the “Freedom Trail Ring”, and use the dial to spell a specific keyword in order to open the door.</p>
<p>Given a string <strong>ring</strong>, which represents the code engraved on the outer ring and another string <strong>key</strong>, which represents the keyword needs to be spelled. You need to find the <strong>minimum</strong> number of steps in order to spell all the characters in the keyword.</p>
<p>Initially, the first character of the <strong>ring</strong> is aligned at 12:00 direction. You need to spell all the characters in the string <strong>key</strong> one by one by rotating the ring clockwise or anticlockwise to make each character of the string <strong>key</strong> aligned at 12:00 direction and then by pressing the center button.<br>At the stage of rotating the ring to spell the key character <strong>key[i]</strong>:</p>
<ol>
<li>You can rotate the <strong>ring</strong> clockwise or anticlockwise <strong>one place</strong>, which counts as 1 step. The final purpose of the rotation is to align one of the string <strong>ring’s</strong> characters at the 12:00 direction, where this character must equal to the character <strong>key[i]</strong>.</li>
<li>If the character <strong>key[i]</strong> has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. After the pressing, you could begin to spell the next character in the key (next stage), otherwise, you’ve finished all the spelling.</li>
</ol>
<p><strong>Example:</strong><br><img src="/2017/03/05/Leetcode-week22/ring.jpg" alt="ring.jpg" title=""><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Input: ring = <span class="string">"godding"</span>, key = <span class="string">"gd"</span></div><div class="line">Output: <span class="number">4</span></div><div class="line">Explanation:</div><div class="line"> For <span class="keyword">the</span> <span class="keyword">first</span> key <span class="keyword">character</span> <span class="string">'g'</span>, since <span class="keyword">it</span> is already <span class="keyword">in</span> place, we just need <span class="number">1</span> step <span class="built_in">to</span> spell this <span class="keyword">character</span>. </div><div class="line"> For <span class="keyword">the</span> <span class="keyword">second</span> key <span class="keyword">character</span> <span class="string">'d'</span>, we need <span class="built_in">to</span> rotate <span class="keyword">the</span> ring <span class="string">"godding"</span> anticlockwise <span class="keyword">by</span> <span class="literal">two</span> steps <span class="built_in">to</span> make <span class="keyword">it</span> become <span class="string">"ddinggo"</span>.</div><div class="line"> Also, we need <span class="number">1</span> more step <span class="keyword">for</span> spelling.</div><div class="line"> So <span class="keyword">the</span> final output is <span class="number">4.</span></div></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>Length of both ring and <strong>key</strong> will be in range 1 to 100.</li>
<li>There are only lowercase letters in both strings and might be some duplcate characters in both strings.</li>
<li>It’s guaranteed that string <strong>key</strong> could always be spelled by rotating the string <strong>ring</strong>.</li>
</ol>
<h2 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> findRotateSteps(<span class="keyword">String</span> ring, <span class="keyword">String</span> key) &#123;</div><div class="line">        <span class="keyword">int</span> n = ring.length();</div><div class="line">        <span class="keyword">int</span> m = key.length();</div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n];</div><div class="line">        </div><div class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="built_in">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                dp[i][j] = Integer.MAX_VALUE;</div><div class="line">                <span class="built_in">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</div><div class="line">                    <span class="built_in">if</span> (ring.charAt(k) == key.charAt(i)) &#123;</div><div class="line">                        <span class="keyword">int</span> diff = Math.<span class="built_in">abs</span>(j - k);</div><div class="line">                        <span class="keyword">int</span> <span class="built_in">step</span> = Math.<span class="built_in">min</span>(diff, n - diff);</div><div class="line">                        dp[i][j] = Math.<span class="built_in">min</span>(dp[i][j], <span class="built_in">step</span> + dp[i + <span class="number">1</span>][k]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> dp[<span class="number">0</span>][<span class="number">0</span>] + m;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中Math.exp的近似算法]]></title>
      <url>http://wlyPKU.github.io/2017/01/11/Java-Math-exp/</url>
      <content type="html"><![CDATA[<p>实验过程中发现Java的Math.exp()操作特别耗时间,在坐标下降求解Logistic Regression的过程中Math.exp()几乎用到了70%的时间,因此我们思考是否可以通过近似的方法计算$e^x$的值,文中整理了两种实用的近似计算Math.exp()方法。<br><a id="more"></a><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/**</span></span></div><div class="line"><span class="bullet">* </span>Take <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>e<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">sup</span>&gt;</span></span>a<span class="markdown"><span class="xml"><span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span>.  The opposite of <span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>log()<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span>. If </span>the<span class="markdown"></span></div><div class="line"><span class="bullet">* </span>argument is NaN, the<span class="markdown"> result is NaN; if </span>the<span class="markdown"> argument is positive infinity,</span></div><div class="line"><span class="bullet">* </span>the<span class="markdown"> result is positive infinity; and if </span>the<span class="markdown"> argument is negative</span></div><div class="line"><span class="bullet">* </span>infinity, the<span class="markdown"> result is positive zero.</span></div><div class="line"><span class="bullet">*</span></div><div class="line"><span class="bullet">* </span>@param x the<span class="markdown"> number to raise to </span>the<span class="markdown"> power</span></div><div class="line"><span class="bullet">* </span>@return the<span class="markdown"> number raised to </span>the<span class="markdown"> power of <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>e<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span></div><div class="line"><span class="bullet">* </span>@see #log(double)</div><div class="line"><span class="bullet">* </span>@see #pow(double, double)</div><div class="line">*/</div><div class="line">public <span class="keyword">static</span> <span class="built_in">double</span> exp(<span class="built_in">double</span> x)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (x != x)</div><div class="line">		<span class="keyword">return</span> x;</div><div class="line">	<span class="keyword">if</span> (x &gt; EXP_LIMIT_H)</div><div class="line">		<span class="keyword">return</span> Double.POSITIVE_INFINITY;</div><div class="line">	<span class="keyword">if</span> (x &lt; EXP_LIMIT_L)</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		</div><div class="line">	<span class="comment">// Argument reduction.</span></div><div class="line">	<span class="built_in">double</span> hi;</div><div class="line">	<span class="built_in">double</span> lo;</div><div class="line">	<span class="built_in">int</span> k;</div><div class="line">	<span class="built_in">double</span> t = abs(x);</div><div class="line">	<span class="keyword">if</span> (t &gt; <span class="number">0.5</span> * LN2)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (t &lt; <span class="number">1.5</span> * LN2)</div><div class="line">		&#123;</div><div class="line">			hi = t - LN2_H;</div><div class="line">			lo = LN2_L;</div><div class="line">			k = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			k = (<span class="built_in">int</span>) (INV_LN2 * t + <span class="number">0.5</span>);</div><div class="line">			hi = t - k * LN2_H;</div><div class="line">			lo = k * LN2_L;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (x &lt; <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			hi = -hi;</div><div class="line">			lo = -lo;</div><div class="line">			k = -k;</div><div class="line">		&#125;</div><div class="line">		x = hi - lo;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">1</span> / TWO_28)</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		lo = hi = k = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// Now x is in primary range.</span></div><div class="line">	t = x * x;</div><div class="line">	<span class="built_in">double</span> c = x - t * (P1 + t * (P2 + t * (P3 + t * (P4 + t * P5))));</div><div class="line">	<span class="keyword">if</span> (k == <span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span> - (x * c / (c - <span class="number">2</span>) - x);</div><div class="line">	<span class="built_in">double</span> y = <span class="number">1</span> - (lo - x * c / (<span class="number">2</span> - c) - hi);</div><div class="line">	<span class="keyword">return</span> scale(y, k);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到Java的Math.exp()操作是比较复杂的,自然所消耗的时间也会比较多,然而对于一些对Math.exp()的精度要求不是特别高但操作数量巨大的应用而言,精度较高但复杂度同时较高的Math.exp算法就显得有些力不从心了。<br>本文整理了两种近似计算exp()的算法：</p>
<h1 id="算法一-使用浮点型表示的特性"><a href="#算法一-使用浮点型表示的特性" class="headerlink" title="算法一 使用浮点型表示的特性"></a>算法一 使用浮点型表示的特性</h1><p>算法如下:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div></pre></td><td class="code"><pre><div class="line">static double[] ExpAdjustment = new double[<span class="number">256</span>] &#123;</div><div class="line">	<span class="number">1.040389835</span>,</div><div class="line">	<span class="number">1.039159306</span>,</div><div class="line">	<span class="number">1.037945888</span>,</div><div class="line">	<span class="number">1.036749401</span>,</div><div class="line">	<span class="number">1.035569671</span>,</div><div class="line">	<span class="number">1.034406528</span>,</div><div class="line">	<span class="number">1.033259801</span>,</div><div class="line">	<span class="number">1.032129324</span>,</div><div class="line">	<span class="number">1.031014933</span>,</div><div class="line">	<span class="number">1.029916467</span>,</div><div class="line">	<span class="number">1.028833767</span>,</div><div class="line">	<span class="number">1.027766676</span>,</div><div class="line">	<span class="number">1.02671504</span>,</div><div class="line">	<span class="number">1.025678708</span>,</div><div class="line">	<span class="number">1.02465753</span>,</div><div class="line">	<span class="number">1.023651359</span>,</div><div class="line">	<span class="number">1.022660049</span>,</div><div class="line">	<span class="number">1.021683458</span>,</div><div class="line">	<span class="number">1.020721446</span>,</div><div class="line">	<span class="number">1.019773873</span>,</div><div class="line">	<span class="number">1.018840604</span>,</div><div class="line">	<span class="number">1.017921503</span>,</div><div class="line">	<span class="number">1.017016438</span>,</div><div class="line">	<span class="number">1.016125279</span>,</div><div class="line">	<span class="number">1.015247897</span>,</div><div class="line">	<span class="number">1.014384165</span>,</div><div class="line">	<span class="number">1.013533958</span>,</div><div class="line">	<span class="number">1.012697153</span>,</div><div class="line">	<span class="number">1.011873629</span>,</div><div class="line">	<span class="number">1.011063266</span>,</div><div class="line">	<span class="number">1.010265947</span>,</div><div class="line">	<span class="number">1.009481555</span>,</div><div class="line">	<span class="number">1.008709975</span>,</div><div class="line">	<span class="number">1.007951096</span>,</div><div class="line">	<span class="number">1.007204805</span>,</div><div class="line">	<span class="number">1.006470993</span>,</div><div class="line">	<span class="number">1.005749552</span>,</div><div class="line">	<span class="number">1.005040376</span>,</div><div class="line">	<span class="number">1.004343358</span>,</div><div class="line">	<span class="number">1.003658397</span>,</div><div class="line">	<span class="number">1.002985389</span>,</div><div class="line">	<span class="number">1.002324233</span>,</div><div class="line">	<span class="number">1.001674831</span>,</div><div class="line">	<span class="number">1.001037085</span>,</div><div class="line">	<span class="number">1.000410897</span>,</div><div class="line">	<span class="number">0.999796173</span>,</div><div class="line">	<span class="number">0.999192819</span>,</div><div class="line">	<span class="number">0.998600742</span>,</div><div class="line">	<span class="number">0.998019851</span>,</div><div class="line">	<span class="number">0.997450055</span>,</div><div class="line">	<span class="number">0.996891266</span>,</div><div class="line">	<span class="number">0.996343396</span>,</div><div class="line">	<span class="number">0.995806358</span>,</div><div class="line">	<span class="number">0.995280068</span>,</div><div class="line">	<span class="number">0.99476444</span>,</div><div class="line">	<span class="number">0.994259393</span>,</div><div class="line">	<span class="number">0.993764844</span>,</div><div class="line">	<span class="number">0.993280711</span>,</div><div class="line">	<span class="number">0.992806917</span>,</div><div class="line">	<span class="number">0.992343381</span>,</div><div class="line">	<span class="number">0.991890026</span>,</div><div class="line">	<span class="number">0.991446776</span>,</div><div class="line">	<span class="number">0.991013555</span>,</div><div class="line">	<span class="number">0.990590289</span>,</div><div class="line">	<span class="number">0.990176903</span>,</div><div class="line">	<span class="number">0.989773325</span>,</div><div class="line">	<span class="number">0.989379484</span>,</div><div class="line">	<span class="number">0.988995309</span>,</div><div class="line">	<span class="number">0.988620729</span>,</div><div class="line">	<span class="number">0.988255677</span>,</div><div class="line">	<span class="number">0.987900083</span>,</div><div class="line">	<span class="number">0.987553882</span>,</div><div class="line">	<span class="number">0.987217006</span>,</div><div class="line">	<span class="number">0.98688939</span>,</div><div class="line">	<span class="number">0.98657097</span>,</div><div class="line">	<span class="number">0.986261682</span>,</div><div class="line">	<span class="number">0.985961463</span>,</div><div class="line">	<span class="number">0.985670251</span>,</div><div class="line">	<span class="number">0.985387985</span>,</div><div class="line">	<span class="number">0.985114604</span>,</div><div class="line">	<span class="number">0.984850048</span>,</div><div class="line">	<span class="number">0.984594259</span>,</div><div class="line">	<span class="number">0.984347178</span>,</div><div class="line">	<span class="number">0.984108748</span>,</div><div class="line">	<span class="number">0.983878911</span>,</div><div class="line">	<span class="number">0.983657613</span>,</div><div class="line">	<span class="number">0.983444797</span>,</div><div class="line">	<span class="number">0.983240409</span>,</div><div class="line">	<span class="number">0.983044394</span>,</div><div class="line">	<span class="number">0.982856701</span>,</div><div class="line">	<span class="number">0.982677276</span>,</div><div class="line">	<span class="number">0.982506066</span>,</div><div class="line">	<span class="number">0.982343022</span>,</div><div class="line">	<span class="number">0.982188091</span>,</div><div class="line">	<span class="number">0.982041225</span>,</div><div class="line">	<span class="number">0.981902373</span>,</div><div class="line">	<span class="number">0.981771487</span>,</div><div class="line">	<span class="number">0.981648519</span>,</div><div class="line">	<span class="number">0.981533421</span>,</div><div class="line">	<span class="number">0.981426146</span>,</div><div class="line">	<span class="number">0.981326648</span>,</div><div class="line">	<span class="number">0.98123488</span>,</div><div class="line">	<span class="number">0.981150798</span>,</div><div class="line">	<span class="number">0.981074356</span>,</div><div class="line">	<span class="number">0.981005511</span>,</div><div class="line">	<span class="number">0.980944219</span>,</div><div class="line">	<span class="number">0.980890437</span>,</div><div class="line">	<span class="number">0.980844122</span>,</div><div class="line">	<span class="number">0.980805232</span>,</div><div class="line">	<span class="number">0.980773726</span>,</div><div class="line">	<span class="number">0.980749562</span>,</div><div class="line">	<span class="number">0.9807327</span>,</div><div class="line">	<span class="number">0.9807231</span>,</div><div class="line">	<span class="number">0.980720722</span>,</div><div class="line">	<span class="number">0.980725528</span>,</div><div class="line">	<span class="number">0.980737478</span>,</div><div class="line">	<span class="number">0.980756534</span>,</div><div class="line">	<span class="number">0.98078266</span>,</div><div class="line">	<span class="number">0.980815817</span>,</div><div class="line">	<span class="number">0.980855968</span>,</div><div class="line">	<span class="number">0.980903079</span>,</div><div class="line">	<span class="number">0.980955475</span>,</div><div class="line">	<span class="number">0.981017942</span>,</div><div class="line">	<span class="number">0.981085714</span>,</div><div class="line">	<span class="number">0.981160303</span>,</div><div class="line">	<span class="number">0.981241675</span>,</div><div class="line">	<span class="number">0.981329796</span>,</div><div class="line">	<span class="number">0.981424634</span>,</div><div class="line">	<span class="number">0.981526154</span>,</div><div class="line">	<span class="number">0.981634325</span>,</div><div class="line">	<span class="number">0.981749114</span>,</div><div class="line">	<span class="number">0.981870489</span>,</div><div class="line">	<span class="number">0.981998419</span>,</div><div class="line">	<span class="number">0.982132873</span>,</div><div class="line">	<span class="number">0.98227382</span>,</div><div class="line">	<span class="number">0.982421229</span>,</div><div class="line">	<span class="number">0.982575072</span>,</div><div class="line">	<span class="number">0.982735318</span>,</div><div class="line">	<span class="number">0.982901937</span>,</div><div class="line">	<span class="number">0.983074902</span>,</div><div class="line">	<span class="number">0.983254183</span>,</div><div class="line">	<span class="number">0.983439752</span>,</div><div class="line">	<span class="number">0.983631582</span>,</div><div class="line">	<span class="number">0.983829644</span>,</div><div class="line">	<span class="number">0.984033912</span>,</div><div class="line">	<span class="number">0.984244358</span>,</div><div class="line">	<span class="number">0.984460956</span>,</div><div class="line">	<span class="number">0.984683681</span>,</div><div class="line">	<span class="number">0.984912505</span>,</div><div class="line">	<span class="number">0.985147403</span>,</div><div class="line">	<span class="number">0.985388349</span>,</div><div class="line">	<span class="number">0.98563532</span>,</div><div class="line">	<span class="number">0.98588829</span>,</div><div class="line">	<span class="number">0.986147234</span>,</div><div class="line">	<span class="number">0.986412128</span>,</div><div class="line">	<span class="number">0.986682949</span>,</div><div class="line">	<span class="number">0.986959673</span>,</div><div class="line">	<span class="number">0.987242277</span>,</div><div class="line">	<span class="number">0.987530737</span>,</div><div class="line">	<span class="number">0.987825031</span>,</div><div class="line">	<span class="number">0.988125136</span>,</div><div class="line">	<span class="number">0.98843103</span>,</div><div class="line">	<span class="number">0.988742691</span>,</div><div class="line">	<span class="number">0.989060098</span>,</div><div class="line">	<span class="number">0.989383229</span>,</div><div class="line">	<span class="number">0.989712063</span>,</div><div class="line">	<span class="number">0.990046579</span>,</div><div class="line">	<span class="number">0.990386756</span>,</div><div class="line">	<span class="number">0.990732574</span>,</div><div class="line">	<span class="number">0.991084012</span>,</div><div class="line">	<span class="number">0.991441052</span>,</div><div class="line">	<span class="number">0.991803672</span>,</div><div class="line">	<span class="number">0.992171854</span>,</div><div class="line">	<span class="number">0.992545578</span>,</div><div class="line">	<span class="number">0.992924825</span>,</div><div class="line">	<span class="number">0.993309578</span>,</div><div class="line">	<span class="number">0.993699816</span>,</div><div class="line">	<span class="number">0.994095522</span>,</div><div class="line">	<span class="number">0.994496677</span>,</div><div class="line">	<span class="number">0.994903265</span>,</div><div class="line">	<span class="number">0.995315266</span>,</div><div class="line">	<span class="number">0.995732665</span>,</div><div class="line">	<span class="number">0.996155442</span>,</div><div class="line">	<span class="number">0.996583582</span>,</div><div class="line">	<span class="number">0.997017068</span>,</div><div class="line">	<span class="number">0.997455883</span>,</div><div class="line">	<span class="number">0.99790001</span>,</div><div class="line">	<span class="number">0.998349434</span>,</div><div class="line">	<span class="number">0.998804138</span>,</div><div class="line">	<span class="number">0.999264107</span>,</div><div class="line">	<span class="number">0.999729325</span>,</div><div class="line">	<span class="number">1.000199776</span>,</div><div class="line">	<span class="number">1.000675446</span>,</div><div class="line">	<span class="number">1.001156319</span>,</div><div class="line">	<span class="number">1.001642381</span>,</div><div class="line">	<span class="number">1.002133617</span>,</div><div class="line">	<span class="number">1.002630011</span>,</div><div class="line">	<span class="number">1.003131551</span>,</div><div class="line">	<span class="number">1.003638222</span>,</div><div class="line">	<span class="number">1.00415001</span>,</div><div class="line">	<span class="number">1.004666901</span>,</div><div class="line">	<span class="number">1.005188881</span>,</div><div class="line">	<span class="number">1.005715938</span>,</div><div class="line">	<span class="number">1.006248058</span>,</div><div class="line">	<span class="number">1.006785227</span>,</div><div class="line">	<span class="number">1.007327434</span>,</div><div class="line">	<span class="number">1.007874665</span>,</div><div class="line">	<span class="number">1.008426907</span>,</div><div class="line">	<span class="number">1.008984149</span>,</div><div class="line">	<span class="number">1.009546377</span>,</div><div class="line">	<span class="number">1.010113581</span>,</div><div class="line">	<span class="number">1.010685747</span>,</div><div class="line">	<span class="number">1.011262865</span>,</div><div class="line">	<span class="number">1.011844922</span>,</div><div class="line">	<span class="number">1.012431907</span>,</div><div class="line">	<span class="number">1.013023808</span>,</div><div class="line">	<span class="number">1.013620615</span>,</div><div class="line">	<span class="number">1.014222317</span>,</div><div class="line">	<span class="number">1.014828902</span>,</div><div class="line">	<span class="number">1.01544036</span>,</div><div class="line">	<span class="number">1.016056681</span>,</div><div class="line">	<span class="number">1.016677853</span>,</div><div class="line">	<span class="number">1.017303866</span>,</div><div class="line">	<span class="number">1.017934711</span>,</div><div class="line">	<span class="number">1.018570378</span>,</div><div class="line">	<span class="number">1.019210855</span>,</div><div class="line">	<span class="number">1.019856135</span>,</div><div class="line">	<span class="number">1.020506206</span>,</div><div class="line">	<span class="number">1.02116106</span>,</div><div class="line">	<span class="number">1.021820687</span>,</div><div class="line">	<span class="number">1.022485078</span>,</div><div class="line">	<span class="number">1.023154224</span>,</div><div class="line">	<span class="number">1.023828116</span>,</div><div class="line">	<span class="number">1.024506745</span>,</div><div class="line">	<span class="number">1.025190103</span>,</div><div class="line">	<span class="number">1.02587818</span>,</div><div class="line">	<span class="number">1.026570969</span>,</div><div class="line">	<span class="number">1.027268461</span>,</div><div class="line">	<span class="number">1.027970647</span>,</div><div class="line">	<span class="number">1.02867752</span>,</div><div class="line">	<span class="number">1.029389072</span>,</div><div class="line">	<span class="number">1.030114973</span>,</div><div class="line">	<span class="number">1.030826088</span>,</div><div class="line">	<span class="number">1.03155163</span>,</div><div class="line">	<span class="number">1.032281819</span>,</div><div class="line">	<span class="number">1.03301665</span>,</div><div class="line">	<span class="number">1.033756114</span>,</div><div class="line">	<span class="number">1.034500204</span>,</div><div class="line">	<span class="number">1.035248913</span>,</div><div class="line">	<span class="number">1.036002235</span>,</div><div class="line">	<span class="number">1.036760162</span>,</div><div class="line">	<span class="number">1.037522688</span>,</div><div class="line">	<span class="number">1.038289806</span>,</div><div class="line">	<span class="number">1.039061509</span>,</div><div class="line">	<span class="number">1.039837792</span>,</div><div class="line">	<span class="number">1.040618648</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">static double FastExp(double x)</div><div class="line">&#123;</div><div class="line">	var tmp = (long)(<span class="number">1512775</span> * x + <span class="number">1072632447</span>);</div><div class="line">	int index = (int)(tmp &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0xFF</span>;</div><div class="line">	return BitConverter.Int64BitsToDouble(tmp &lt;&lt; <span class="number">32</span>) * ExpAdjustment[index];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="算法二-使用Lookup-Table直接查表"><a href="#算法二-使用Lookup-Table直接查表" class="headerlink" title="算法二: 使用Lookup Table直接查表"></a>算法二: 使用Lookup Table直接查表</h1><p>使用$e^{3.45}=e^{3}\times e^{0.4}\times e^{0.05}$的性质可以进行如下近似:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preCompute</span><span class="params">()</span></span>&#123;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">           <span class="keyword">double</span> l = Math.<span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">-2</span>*i);</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)&#123;</div><div class="line">               expTable[i][j] = Math.<span class="built_in">exp</span>(j * l);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">exp</span><span class="params">(<span class="keyword">double</span> val)</span> </span>&#123;</div><div class="line">	<span class="keyword">double</span> result = <span class="number">1.0</span>;</div><div class="line">	<span class="keyword">int</span> bitNum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</div><div class="line">		bitNum = (<span class="keyword">int</span>)val % <span class="number">100</span>;</div><div class="line">		<span class="keyword">if</span>(bitNum &gt;= <span class="number">0</span>) &#123;</div><div class="line">			result *= expTable[i][bitNum];</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			result /= expTable[i][-bitNum];</div><div class="line">		&#125;</div><div class="line">		val*= <span class="number">100</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但算法二的缺点在于只能计算有限范围内$e^x$的值,如果需要计算的$e^x$的x值很大的话可能表会很大,同时其相对误差也可能会比较大,下面会详细些比较二者的差别：</p>
<h1 id="近似算法比较"><a href="#近似算法比较" class="headerlink" title="近似算法比较"></a>近似算法比较</h1><h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><p>我们对精确算法、模拟算法1、模拟算法2进行了对比,在服务器上依次运行100,000,000次三种算法,可以得到:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">空操作 <span class="number">4578</span>  <span class="keyword">ms</span></div><div class="line"><span class="title">精确解 15756</span> <span class="keyword">ms</span></div><div class="line"><span class="title">算法一 5623</span> <span class="keyword">ms</span></div><div class="line"><span class="title">算法二 6656</span> ms</div></pre></td></tr></table></figure></p>
<p>可以看到,近似算法跟精确解相比时间上大大缩短,可以有2-3倍的效率提升。</p>
<h2 id="准确度"><a href="#准确度" class="headerlink" title="准确度"></a>准确度</h2><p>算法一跟算法二都具有比较好的准确度,下图是两种近似算法的准确度图,从下图可以看到二者都具有比较高的准确度,算法一的误差率在0.6%内,算法二的误差率在1%内。<br><img src="/2017/01/11/Java-Math-exp/accuracy_method1.png" alt="算法1准确度" title="算法1准确度"><br><img src="/2017/01/11/Java-Math-exp/accuracy_method2.png" alt="算法2准确度" title="算法2准确度"><br>当然,有理论证明,算法一最差的误差率在4%(在某些特殊的值下),算法二最差的误差率在$5\times 10^{-8}%$内(如果存在[1,0,1,…,$10^{-10}$]的lookup table),可以证明,如果存在$10^{-a}$的lookuptable,那么误差率在$[-5\times[(10^{-(a+1)}-1],5\times[(10^{-(a+1)}-1]]$内。<br>更大的Lookup table会导致更多的时间消耗,但会更好；但由于误差率的计算是Exp’(x)/exp(x)，因此当计算x为负数时，exp(x)的准确值较小，相对误差会比较大。<br><img src="/2017/01/11/Java-Math-exp/accuracy_lookupTable.png" alt="算法2准确度与表大小的关系" title="算法2准确度与表大小的关系"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上,文章整理了两种近似计算exp()的算法,各有利弊,其中算法一基于Double的表示形式,同时辅助以ExpAdjustment[]数组,绝大部分点的误差率都在0.6%以内,不过在因为ExpAdjustment[]调节的值有限,算法一的最坏误差率在4%左右；而算法二的误差率可以通过lookup Table表的大小调节,误差率比较小,缺点是适用于若干有限值的计算(lookup table的大小有限)。</p>
<p>同时还发现存在pow的近似算法(<a href="http://martin.ankerl.com/tag/floating-point/" target="_blank" rel="external">Optimized pow() approximation for Java, C / C++, and C#</a>),<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">final</span> <span class="keyword">double</span> a, <span class="keyword">final</span> <span class="keyword">double</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">long</span> tmp = Double.doubleToLongBits(a);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> tmp2 = (<span class="keyword">long</span>)(b * (tmp - <span class="number">4606921280493453312</span>L)) + <span class="number">4606921280493453312</span>L;</div><div class="line">    <span class="function"><span class="keyword">return</span> Double.<span class="title">longBitsToDouble</span><span class="params">(tmp2)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以比Math.pow()快23倍(Intel Core2 Quad, Q9550, Java 1.7.0_01-b08, 64-Bit Server V)。误差率5%-12%,极端情况可以达到25%。</p>
<p>参考:<br><a href="http://martin.ankerl.com/tag/floating-point/" target="_blank" rel="external">http://martin.ankerl.com/tag/floating-point/</a><br><a href="https://gist.github.com/mratkovic/b273376496bb283c9dec" target="_blank" rel="external">https://gist.github.com/mratkovic/b273376496bb283c9dec</a><br><a href="http://ideone.com/fork/UwNgx" target="_blank" rel="external">http://ideone.com/fork/UwNgx</a><br><a href="http://developer.classpath.org/doc/java/lang/StrictMath-source.html" target="_blank" rel="external">http://developer.classpath.org/doc/java/lang/StrictMath-source.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Parallel SGD]]></title>
      <url>http://wlyPKU.github.io/2016/10/07/Parallelized-SGD/</url>
      <content type="html"><![CDATA[<p>Parallelizing SGD</p>
<ul>
<li>Parallelized Stochastic Gradient Descent</li>
<li>Hogwild!</li>
<li>Downpour SGD<a id="more"></a>
<h1 id="Parallelized-Stochastic-Gradient-Descent"><a href="#Parallelized-Stochastic-Gradient-Descent" class="headerlink" title="Parallelized Stochastic Gradient Descent"></a>Parallelized Stochastic Gradient Descent</h1></li>
<li><a href="http://www.research.rutgers.edu/~lihong/pub/Zinkevich11Parallelized.pdf" target="_blank" rel="external">Parallelized Stochastic Gradient Descent</a></li>
</ul>
<p>算法步骤:</p>
<ol>
<li>将训练数据集$D$负载均衡地划分为$c$个子集: $D=\bigcup_{i=1}^{c}D_i$,其中$\left|D_1\right|=\left|D_2\right|=\left|D_3\right|=…=\left|D_c\right|=T$,并将子集$D_i$分配到第i台机器.</li>
<li>在每台机器上，给定学习率$\eta$,并令向量$v:=0$.</li>
<li>对于$i\in\left\{ 1,2,…,c \right\} $,<strong>并行地</strong>执行:<ol>
<li>将$D_i$中的元素随机打乱,设得到的样本序列为$ \left\{  \tilde{x}_j , \tilde{y}_j \right\}^T_{j=1}$</li>
<li>初始化$w_0^{(i)}:=v$.</li>
<li>按照以下循环更新参数.<br><strong>FOR </strong> $j = 1,2,…,T$  <strong>DO</strong><br>{<br>$\quad\quad w_j^{(i)} = w_{j-1}^{(i)}-\eta\left. \frac{\partial l(x_i, y_i,w)}{\partial w}\right|_{(\tilde{x}_j , \tilde{y}_j , {w_{j-1}^{(i)}})}$<br>}</li>
</ol>
</li>
<li>通过<strong>全归约</strong>操作,使每台机器获得<strong>平均</strong>权值向量$v=\frac{1}{c} \sum_{k=1}^c w_T^{(i)}$</li>
<li>若达到收敛准则,则算法结束,返回$v$;否则,转至3.</li>
</ol>
<p>算法只涉及<strong>数据并行</strong>,没有<strong>模型并行</strong>(每台机器上都有一份完整的模型参数$w$),因此它适合于模型参数量相对较小,而训练数据集相对较大的情形.每台机器各自负责一个本地数据块的计算,计算完成后,执行一次通信(step 4),获取更新后的值.<br><img src="/2016/10/07/Parallelized-SGD/psgd.png" alt="算法示意" title="算法示意"><br><img src="/2016/10/07/Parallelized-SGD/psgd1.png" alt="实验示意" title="实验示意"></p>
<h1 id="Hogwild"><a href="#Hogwild" class="headerlink" title="Hogwild!"></a>Hogwild!</h1><ul>
<li><a href="https://people.eecs.berkeley.edu/~brecht/papers/hogwildTR.pdf" target="_blank" rel="external">Hogwild!: A Lock-Free Approach to Parallelizing Stochastic Gradient Descent</a></li>
</ul>
<p>Niu提出了被称为Hogwild的并行SGD方法。该方法在多个CPU时间进行并行。处理器通过共享内存来访问参数，并且这些参数不进行加锁。它为每一个cpu分配不重叠的一部分参数（分配互斥），每个cpu只更新其负责的参数。该方法只适合处理数据特征是稀疏的。该方法几乎可以达到一个最优的收敛速度，因为cpu之间不会进行相同信息重写。<br><img src="/2016/10/07/Parallelized-SGD/hogwild!.png" alt="算法示意" title="算法示意"><br><img src="/2016/10/07/Parallelized-SGD/hogwild!1.png" alt="实验示意" title="实验示意"></p>
<h1 id="Downpour-SGD"><a href="#Downpour-SGD" class="headerlink" title="Downpour SGD"></a>Downpour SGD</h1><ul>
<li><a href="http://doi.org/10.1109/ICDAR.2011.95" target="_blank" rel="external">Large Scale Distributed Deep Networks</a></li>
</ul>
<p>Downpour SGD 是 Dean et al. 4在 Google 的 DistBelief 框架中使用的一个异步 SGD 的变种（TensorFlow 的前身）。它在训练数据的子集上并行运行多个模型的复制。它们会把自己的更新发送到一个参数服务器上，而完整的参数被分发到许多的机器上。每个机器负责一小部分的模型参数的存储和更新。然而，因为各个复制模型直接并没有通信，即分享权重或者更新，它们的参数会持续遇到发散、妨碍收敛的问题。<br>请见:<a href="https://wlypku.github.io/2016/10/06/Downpour-SGD/">Downpour SGD</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SGD 变种]]></title>
      <url>http://wlyPKU.github.io/2016/10/06/SGD-variants/</url>
      <content type="html"><![CDATA[<p>A brief introduction to stochastic gradient descent and its variants.<br><a id="more"></a></p>
<h1 id="SGD模型"><a href="#SGD模型" class="headerlink" title="SGD模型"></a>SGD模型</h1><p>SGD指stochastic gradient descent, 即随机梯度下降,是梯度下降的batch版本.<br>对于训练数据集，我们首先将其分成n个batch，每个batch包含m个样本。我们每次更新都利用一个batch的数据，而非整个训练集。即：<br>\begin{equation}<br>\theta = \theta - \eta \cdot \nabla_\theta J( \theta; x^{(i)}; y^{(i)})<br>\end{equation}<br>其中, $\eta$ 为学习率，$g_t$为$x$在$t$时刻的梯度。<br>这么做的好处在于：</p>
<ol>
<li>当训练数据太多时，利用整个数据集更新往往时间上不显示。batch的方法可以减少机器的压力，并且可以更快地收敛。</li>
<li>当训练集有很多冗余时（类似的样本出现多次），batch方法收敛更快。以一个极端情况为例，若训练集前一半和后一半梯度相同。那么如果前一半作为一个batch，后一半作为另一个batch，那么在一次遍历训练集时，batch的方法向最优解前进两个step，而整体的方法只前进一个step。</li>
</ol>
<p><strong>缺点：（正因为有这些缺点才让这么多大神发展出了后续的各种算法）</strong></p>
<ol>
<li>选择合适的learning rate比较困难 - 对所有的参数更新使用同样的learning rate。对于稀疏数据或者特征，有时我们可能想更新快一些对于不经常出现的特征，对于常出现的特征更新慢一些，这时候SGD就不太能满足要求了</li>
<li>SGD容易收敛到局部最优，并且在某些情况下可能被困在鞍点【经查阅论文发现，其实在合适的初始化和step size的情况下，鞍点的影响并没这么大】</li>
</ol>
<hr>
<h1 id="非自适应算法"><a href="#非自适应算法" class="headerlink" title="非自适应算法"></a>非自适应算法</h1><h2 id="动量SGD"><a href="#动量SGD" class="headerlink" title="动量SGD"></a>动量SGD</h2><p>SGD方法的一个缺点是，其更新方向完全依赖于当前的batch，因而其更新十分不稳定。解决这一问题的一个简单的做法便是引入momentum。<br>momentum即动量，它模拟的是物体运动时的惯性，即更新的时候在一定程度上保留之前更新的方向，同时利用当前batch的梯度微调最终的更新方向。这样一来，可以在一定程度上增加稳定性，从而学习地更快，并且还有一定摆脱局部最优的能力：<br>\begin{equation}<br>v_t = \gamma v_{t-1} + \eta \nabla_\theta J( \theta)<br>\end{equation}<br>\begin{equation}<br>\theta = \theta - v_t<br>\end{equation}<br>其中，$\gamma$即momentum，表示要在多大程度上保留原来的更新方向，这个值在0-1之间，在训练开始时，由于梯度可能会很大，所以初始值一般选为0.5；当梯度不那么大时，改为0.9。$\eta$是学习率，即当前batch的梯度多大程度上影响最终更新方向，跟普通的SGD含义相同。$\gamma$ 与 $\eta$ 之和不一定为1。</p>
<div align="center"><br><img src="/2016/10/06/SGD-variants/without_momentum.jpg" alt="标准SGD" title="标准SGD"><br><img src="/2016/10/06/SGD-variants/with_momentum.jpg" alt="动量SGD" title="动量SGD"><br></div>

<p><strong>特点：</strong></p>
<ul>
<li>下降初期时，使用上一次参数更新，下降方向一致，乘上较大的$\gamma$能够进行很好的加速</li>
<li>下降中后期时，在局部最小值来回震荡的时候，$gradient\to0$，$\gamma$使得更新幅度增大，跳出陷阱</li>
<li>在梯度改变方向的时候，$\gamma$能够减少更新 总而言之，momentum项能够在相关方向加速SGD，抑制振荡，从而加快收敛</li>
</ul>
<p>SGD has trouble navigating ravines, i.e. areas where the surface curves much more steeply in one dimension than in another, which are common around local optima. In these scenarios, SGD oscillates across the slopes of the ravine while only making hesitant progress along the bottom towards the local optimum as in Image 1.<br>Momentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations as can be seen in Image 2. It does this by adding a fraction γ of the update vector of the past time step to the current update vector:<br>\begin{equation}<br>v_t = \gamma v_{t-1} + \eta \nabla_\theta J( \theta)<br>\end{equation}<br>\begin{equation}<br>\theta = \theta - v_t<br>\end{equation}<br>Some implementations exchange the signs in the equations. The momentum term γ is usually set to 0.9 or a similar value.When cross-validated, this parameter is usually set to values such as [0.5, 0.9, 0.95, 0.99]. Similar to annealing schedules for learning rates (discussed later, below), optimization can sometimes benefit a little from momentum schedules, where the momentum is increased in later stages of learning. A typical setting is to start with momentum of about 0.5 and anneal it to 0.99 or so over multiple epochs.<br>Essentially, when using momentum, we push a ball down a hill. The ball accumulates momentum as it rolls downhill, becoming faster and faster on the way (until it reaches its terminal velocity if there is air resistance, i.e. γ&lt;1).<br>The same thing happens to our parameter updates: The momentum term increases for dimensions whose gradients point in the same directions and reduces updates for dimensions whose gradients change directions. As a result, we gain faster convergence and reduced oscillation.</p>
<hr>
<h2 id="Nesterov-Momentum"><a href="#Nesterov-Momentum" class="headerlink" title="Nesterov Momentum"></a>Nesterov Momentum</h2><p>这是对传统momentum方法的一项改进，由Ilya Sutskever(2012 unpublished)在Nesterov工作的启发下提出的。<br>其基本思路如下图（转自Hinton的coursera公开课lecture 6a）:</p>
<div align="center"><br><img src="/2016/10/06/SGD-variants/nesterov.jpeg" alt="nesterov动量" title="nesterov动量"><br><img src="/2016/10/06/SGD-variants/Nesterov_Momentum.jpg" alt="nesterov动量" title="nesterov动量"><br></div>

<p>首先，按照原来的更新方向更新一步（棕色线），然后在该位置计算梯度值（红色线），然后用这个梯度值修正最终的更新方向（绿色线）。上图中描述了两步的更新示意图，其中蓝色线是标准momentum更新路径。</p>
<p>公式描述为：<br>\begin{equation}<br>v_t = \gamma v_{t-1} + \eta \nabla_\theta J( \theta - \gamma v_{t-1} )<br>\end{equation}<br>\begin{equation}<br>\theta = \theta - v_t<br>\end{equation}<br>However, a ball that rolls down a hill, blindly following the slope, is highly unsatisfactory. We’d like to have a smarter ball, a ball that has a notion of where it is going so that it knows to slow down before the hill slopes up again.\\<br>Nesterov accelerated gradient (NAG) is a way to give our momentum term this kind of prescience. We know that we will use our momentum term γvt−1 to move the parameters θ. Computing $\theta−\gamma v_t−1$ thus gives us an approximation of the next position of the parameters (the gradient is missing for the full update), a rough idea where our parameters are going to be. We can now effectively look ahead by calculating the gradient not w.r.t. to our current parameters θθ but w.r.t. the approximate future position of our parameters:<br>Like momentum,NAG is a first-order optimization method with better convergence rate guarantee than gradient descent in certain situations. In particular, for general smooth(non-strongly) convex functions and a deterministic gradient, NAG achieves a global convergence rate of O($1/T^2$) (versus the O(1/T) of gradient descent), with constant proportional to the Lipschitz coefficient of the derivative and the squared Euclidean distance to the solution. While NAG is not typically thought of as a type of momentum, it indeed turns out to be closely related to classical momentum, differing only in the precise update of the velocity vector v.</p>
<hr>
<h2 id="learing-rate-选择"><a href="#learing-rate-选择" class="headerlink" title="learing rate 选择"></a>learing rate 选择</h2><h3 id="常数learning-rate"><a href="#常数learning-rate" class="headerlink" title="常数learning rate"></a>常数learning rate</h3><h3 id="折半下降"><a href="#折半下降" class="headerlink" title="折半下降"></a>折半下降</h3><p>每若干轮降低下learning rate,如每5轮降低一半,或者每20轮降低0.1<br>Reduce the learning rate by some factor every few epochs. Typical values might be reducing the learning rate by a half every 5 epochs, or by 0.1 every 20 epochs. These numbers depend heavily on the type of problem and the model. One heuristic you may see in practice is to watch the validation error while training with a fixed learning rate, and reduce the learning rate by a constant (e.g. 0.5) whenever the validation error stops improving. \par</p>
<h3 id="指数下降"><a href="#指数下降" class="headerlink" title="指数下降"></a>指数下降</h3><p>\begin{equation}<br>\alpha = \frac{\alpha_0}{e^{kt}}<br>\end{equation}<br>其中是$k$超参数,$t$是迭代轮数</p>
<h3 id="frac-1-t-下降"><a href="#frac-1-t-下降" class="headerlink" title="$\frac{1}{t}$下降"></a>$\frac{1}{t}$下降</h3><p>\begin{equation}<br>\alpha = \frac{\alpha_0}{1+kt}<br>\end{equation}<br>数学形式,$k$是超参数,$t$是迭代轮数。</p>
<hr>
<h1 id="自适应算法"><a href="#自适应算法" class="headerlink" title="自适应算法"></a>自适应算法</h1><h2 id="Adagrad"><a href="#Adagrad" class="headerlink" title="Adagrad"></a>Adagrad</h2><p>上面提到的方法对于所有参数都使用了同一个更新速率。但是同一个更新速率不一定适合所有参数。比如有的参数可能已经到了仅需要微调的阶段，但又有些参数由于对应样本少等原因，还需要较大幅度的调动。<br>Adagrad就是针对这一问题提出的，自适应地为各个参数分配不同学习率的算法。其公式如下：<br>\begin{equation}<br>\theta_{t+1} = \theta_{t} - \dfrac{\eta}{\sqrt{G_{t} + \epsilon}} \odot g_{t}<br>\end{equation}<br>其中$G^{t}\in R^{d\times d}$是一个对角矩阵，其中<br>\begin{equation}<br>G_{i, i} = \sqrt{\sum_{T=1}^tg_{T,i}^2}<br>\end{equation}<br>而$\epsilon$是一个平滑系数，使得不会出现除零的现象，通常在$10^{-8}$量级。Adagrad的一个主要优势是考虑了不同参数可能处在更新的不同阶段，同时避免了调参的问题，通常可以取 $\eta$为0.01.<br>Adagrad的一个主要缺点在于其参数的平方和累加：因为随着训练轮数的增加，每一个累加项都是正数，这使得整体的学习速率最终会变得非常的小,最终模型会静止不动(可能尚未到达收敛点).</p>
<p><strong>特点：</strong></p>
<ul>
<li>前期$g_t$较小的时候， regularizer较大，能够放大梯度</li>
<li>后期$g_t$较大的时候，regularizer较小，能够约束梯度</li>
<li>适合处理稀疏梯度</li>
</ul>
<p><strong> 缺点：</strong></p>
<ul>
<li>由公式可以看出，仍依赖于人工设置一个全局学习率</li>
<li>$\eta$设置过大的话，会使regularizer过于敏感，对梯度的调节太大</li>
<li>中后期，分母上梯度平方的累加将会越来越大，使$gradient\to0$，使得训练提前结束</li>
</ul>
<hr>
<h2 id="Adadelta"><a href="#Adadelta" class="headerlink" title="Adadelta"></a>Adadelta</h2><p>Adagrad算法存在三个问题<br>1.其学习率是单调递减的，训练后期学习率非常小<br>2.其需要手工设置一个全局的初始学习率<br>3.更新时，左右两边的单位不同一<br>Adadelta针对上述三个问题提出了比较漂亮的解决方案。其公式如下：<br>\begin{equation}<br>E[g^2]_t = \gamma E[g^2]_{t-1} + (1 - \gamma) g^2_t<br>\end{equation}<br>\begin{equation}<br>E[\Delta \theta^2]_t = \gamma E[\Delta \theta^2]_{t-1} + (1 - \gamma) \Delta \theta^2_t<br>\end{equation}<br>\begin{equation}<br>RMS[\Delta \theta]_{t} = \sqrt{E[\Delta \theta^2]_t + \epsilon}\end{equation}<br>\begin{equation}<br>\Delta \theta_t = - \dfrac{RMS[\Delta \theta]_{t-1}}{RMS[g]_{t}} g_{t}<br>\end{equation}<br>\begin{equation}<br>\theta_{t+1} = \theta_t + \Delta \theta_t<br>\end{equation}<br>$\gamma$的值近似在0.9左右，同时$\epsilon$是一个平滑系数，使得不会出现除零的现象，通常在$10^{-8}$量级.<br>可以看到，如此一来adagrad中分子部分需要人工设置的初始学习率也消失了。</p>
<p>Experiment: neural network MINIST$ ADADELTA &gt; ADAGRAD &gt; MOMENTUM &gt; SGD$</p>
<div align="center"><br><img src="/2016/10/06/SGD-variants/adadelta.jpg" alt="实验比较" title="实验比较"><br></div>

<p><strong>特点：</strong></p>
<ul>
<li>训练初中期，加速效果不错，很快</li>
<li>训练后期，反复在局部最小值附近抖动</li>
</ul>
<hr>
<h2 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h2><p>RMSprop是一个未出版的，自适应学习速率方法，由Geoff Hinton提出。RMSprop和Adadelta的提出都源自于Adagrad，目的是为了解决Adagrad学习速率在迭代若干次后彻底消失的问题。本质上而言，其与Adadelta相同。<br>\begin{equation}<br>E[g^2]_t = 0.9 E[g^2]_{t-1} + 0.1 g^2_t<br>\end{equation}<br>\begin{equation}<br>\theta_{t+1} = \theta_{t} - \dfrac{\eta}{\sqrt{E[g^2]_t + \epsilon}} g_{t}<br>\end{equation}<br>Hinton建议设置$\epsilon$为0.9，而$\eta$的学习速率为0.001.</p>
<p><strong>特点：</strong></p>
<ul>
<li>其实RMSprop依然依赖于全局学习率</li>
<li>RMSprop算是Adagrad的一种发展，和Adadelta的变体，效果趋于二者之间</li>
<li>适合处理非平稳目标 - 对于RNN效果很好</li>
</ul>
<hr>
<h2 id="adam"><a href="#adam" class="headerlink" title="adam"></a>adam</h2><p>\begin{equation}<br>m_t = \beta_1 m_{t-1} + (1 - \beta_1) g_t<br>\end{equation}<br>\begin{equation}<br>v_t = \beta_2 v_{t-1} + (1 - \beta_2) g_t^2<br>\end{equation}<br>\begin{equation}<br>\hat{m}_t = \dfrac{m_t}{1 - \beta^t_1}<br>\end{equation}<br>\begin{equation}<br>\hat{v}_t = \dfrac{v_t}{1 - \beta^t_2}<br>\end{equation}<br>\begin{equation}<br>\theta_{t+1} = \theta_{t} - \dfrac{\eta}{\sqrt{\hat{v}_t} + \epsilon} \hat{m}_t<br>\end{equation}<br>该方法和RMSProp唯一的区别是smooth过程,这里使用的是m来做smooth操作,而不是使用原始的gradient vector. 论文中推荐的超参数为eps=1e-6, bata1=0.9, beta2=0.999, 在实践中, 如果没有其他的特殊理由,一般推荐使用Adam方法, 并且, Adam算法通常会比RMSProp算法效果好. 另外,也可以尝试SGD+Nesterov Momentum. 完整的Adam算法中还包括bias的纠正机制, 这事因为,在刚开始的几个steps中,m和v都要初始化, 并且在warm up 之前他们都biased at zero.<br>更多的细节可以参考论文原文.</p>
<p><strong>特点：</strong></p>
<ul>
<li>结合了Adagrad善于处理稀疏梯度和RMSprop善于处理非平稳目标的优点</li>
<li>对内存需求较小</li>
<li>为不同的参数计算不同的自适应学习率</li>
<li>也适用于大多非凸优化 - 适用于大数据集和高维空间</li>
</ul>
<p>论文:The method computes individual adaptive learning rates for different parameters from estimates of first and second moments of the gradients; the name Adam is derived from adaptive moment estimation. Our method is designed to combine the advantages of two recently popular methods: AdaGrad (Duchi et al., 2011), which works well with sparse gradients, and RMSProp (Tieleman &amp; Hinton, 2012), which works well in on-line and non-stationary settings; important connections to these and other stochastic optimization methods are clarified in section 5.Some of Adam’s advantages are that the magnitudes of parameter updates are invariant to rescaling of the gradient, its stepsizes are approximately bounded by the stepsize hyperparameter, it does not require a stationary objective, it works with sparse gradients, and it naturally performs a form of step size annealing.</p>
<hr>
<h2 id="Adamax"><a href="#Adamax" class="headerlink" title="Adamax"></a>Adamax</h2><ul>
<li><a href="https://arxiv.org/pdf/1412.6980v8.pdf" target="_blank" rel="external">ADAM: A METHOD FOR STOCHASTIC OPTIMIZATION</a><br>Adamax是Adam的一种变体，此方法对学习率的上限提供了一个更简单的范围。公式上的变化如下：<br>\begin{equation}<br>m_t = \beta_1 m_{t-1} + (1 - \beta_1) g_t<br>\end{equation}<br>\begin{equation}<br>v_t = max(\beta_2 \times v_{t-1}, \left| g_t\right|)<br>\end{equation}<br>\begin{equation}<br>\hat{m}_t = \dfrac{m_t}{1 - \beta^t_1}<br>\end{equation}<br>\begin{equation}<br>\theta_{t+1} = \theta_{t} - \dfrac{\eta}{v_t + \epsilon} \hat{m}_t<br>\end{equation}<br>可以看出，Adamax学习率的边界范围更简单.<br>parameter: Keras recommend:<br>Good default settings for the tested machine learning problems are $\eta= 0.002$, $\beta_1 = 0.9$ and $\beta_2= 0.999$. With $\beta_1^t$ we denote $\beta_1$ to the power $t$. Here, $\frac{\eta}{1-\beta_1^t}$is the learning rate with the bias-correction term for the first moment. </li>
</ul>
<hr>
<h2 id="Nadam"><a href="#Nadam" class="headerlink" title="Nadam"></a>Nadam</h2><ul>
<li><a href="http://cs229.stanford.edu/proj2015/054_report.pdf" target="_blank" rel="external">Incorporating Nesterov Momentum into Adam</a></li>
</ul>
<p>Nadam类似于带有Nesterov动量项的Adam。公式如下：<br>\begin{equation}<br>\hat{g_t}=\frac{g_t}{1-\Pi_{i=1}^t\beta_{1i}}<br>\end{equation}<br>\begin{equation}<br>m_t=\beta_{1t} \times m_{t-1}+(1-\beta_{1t})\times g_t<br>\end{equation}<br>\begin{equation}<br>\hat{m_t}=\frac{m_t}{1-\Pi_{i=1}^{t+1}\beta_{1i}}<br>\end{equation}<br>\begin{equation}<br>n_t=\beta_2\times n_{t-1}+(1-\beta_2)\times g_t^2<br>\end{equation}<br>\begin{equation}<br>\bar{m_t}=(1-\beta_{1t})\times \hat{g_t}+\beta_{1(t+1)}\times \hat{m_t}<br>\end{equation}<br>\begin{equation}<br>\hat{n_t}=\frac{n_t}{1-\beta_{2}^t}<br>\end{equation}<br>\begin{equation}<br>\Delta{\theta_t}=-\eta*\frac{\bar{m_t}}{\sqrt{\hat{n_t}}+\epsilon}<br>\end{equation}<br>可以看出，Nadam对学习率有了更强的约束，同时对梯度的更新也有更直接的影响。一般而言，在想使用带动量的RMSprop，或者Adam的地方，大多可以使用Nadam取得更好的效果。</p>
<p>parameter: Keras recommend: lr=0.002, beta_1=0.9, beta_2=0.999, epsilon=1e-08, schedule_decay=0.004<br><strong>All algorithms used $\beta_2$ = .999and $\epsilon$ = 1e−8 as suggested, with a momentum schedule given by $\beta_{1t} = \beta_1\times (1−0.5\times 0.96^{\frac{t}{250}})$ with $\beta_1$ = .99</strong></p>
<hr>
<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>经验之谈</p>
<ul>
<li>对于稀疏数据，尽量使用学习率可自适应的优化方法，不用手动调节，而且最好采用默认值</li>
<li>SGD通常训练时间更长，但是在好的初始化和学习率调度方案的情况下，结果更可靠</li>
<li>如果在意更快的收敛，并且需要训练较深较复杂的网络时，推荐使用学习率自适应的优化方法。</li>
<li>Adadelta，RMSprop，Adam是比较相近的算法，在相似的情况下表现差不多。</li>
<li>在想使用带动量的RMSprop，或者Adam的地方，大多可以使用Nadam取得更好的效果</li>
</ul>
<img src="/2016/10/06/SGD-variants/contours_evaluation_optimizers.gif" alt="SGD optimization on loss surface contours" title="SGD optimization on loss surface contours">
<img src="/2016/10/06/SGD-variants/saddle_point_evaluation_optimizers.gif" alt="SGD optimization on saddle point" title="SGD optimization on saddle point">
<p>Experiment: </p>
<ul>
<li>MNIST Logistic regression<br>Adam&gt; Nesterov &gt; AdaGrad ( converage cost)</li>
<li>IMDB BoW feature logsitic regression<br> $ Adam \approx Adagrad \approx RMSProp \approx Nesterov$</li>
<li>deepLearning </li>
</ul>
<div align="center"><br><img src="/2016/10/06/SGD-variants/1.png" alt="实验结果1" title="实验结果1"><br><img src="/2016/10/06/SGD-variants/2.png" alt="实验结果2" title="实验结果2"><br><img src="/2016/10/06/SGD-variants/3.png" alt="实验结果3" title="实验结果3"><br></div>

<p>MINST: Adagrad/Adadelta并不需要设置学习速率，相对安全,但调好参数的SGD+动量表现也非常出色。<br>原文:This demo lets you evaluate multiple trainers against each other on MNIST. By default I’ve set up a little benchmark that puts SGD/SGD with momentum/Adagrad/Adadelta/Nesterov against each other. For reference math and explanations on these refer to Matthew Zeiler’s Adadelta paper (Windowgrad is Idea #1 in the paper). In my own experience, Adagrad/Adadelta are “safer” because they don’t depend so strongly on setting of learning rates (with Adadelta being slightly better), but well-tuned SGD+Momentum almost always converges faster and at better final values.</p>
<p><strong>参考</strong><br><strong><a href="http://sebastianruder.com/optimizing-gradient-descent/" target="_blank" rel="external">http://sebastianruder.com/optimizing-gradient-descent/</a></strong><br><strong><a href="https://zhuanlan.zhihu.com/p/22252270" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/22252270</a></strong><br><a href="https://keras.io/optimizers/" target="_blank" rel="external">https://keras.io/optimizers/</a><br><a href="http://cs231n.github.io/neural-networks-3/#sgd" target="_blank" rel="external">http://cs231n.github.io/neural-networks-3/#sgd</a><br><a href="https://en.wikipedia.org/wiki/Stochastic_gradient_descent" target="_blank" rel="external">https://en.wikipedia.org/wiki/Stochastic_gradient_descent</a><br><a href="http://blog.csdn.net/luo123n/article/details/48239963" target="_blank" rel="external">http://blog.csdn.net/luo123n/article/details/48239963</a><br><a href="http://blog.csdn.net/majordong100/article/details/51428642" target="_blank" rel="external">http://blog.csdn.net/majordong100/article/details/51428642</a><br><a href="http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf" target="_blank" rel="external">http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf</a><br><a href="http://cs.stanford.edu/people/karpathy/convnetjs/demo/trainers.html" target="_blank" rel="external">http://cs.stanford.edu/people/karpathy/convnetjs/demo/trainers.html</a><br><strong>Paper</strong><br>Unit Tests for Stochastic Optimization<br>ADADELTA: AN ADAPTIVE LEARNING RATE METHOD<br>ADAM: A METHOD FOR STOCHASTIC OPTIMIZATION<br>Incorporating Nesterov Momentum into Adam</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Downpour SGD(大规模分布式深度网络)]]></title>
      <url>http://wlyPKU.github.io/2016/10/06/Downpour-SGD/</url>
      <content type="html"><![CDATA[<p>Parallel SGD Paper<br><a href="http://doi.org/10.1109/ICDAR.2011.95" target="_blank" rel="external"><strong>Large Scale Distributed Deep Networks</strong></a><br><a id="more"></a></p>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>最近关于无监督特征学习（unsupervised feature learning）和深度学习（deep learning）的工作表明，具有训练大型模型能力的系统能够显著地提升深度神经网络的训练效果。在这篇文章中，我们针对的问题是利用多达10^4数量的CPU来训练一个具有10^9数量的参数（parameter）的深度网络。为了达到训练的目的，我们开发了称为DistBelief的软件框架，其利用具有上千节点（译者注：为了一致性，译文中的节点均指机器，即计算节点；而神经网络中的节点，均称为单元）的计算集群来训练大型模型。</p>
<p>在该框架中，实现了两个算法用于大规模分布训练：</p>
<ol>
<li>Downpour（译者注：猜测这里的Downpour主要是指并行地参数更新，就像倾盆大雨中，雨点从多处同时落下一样）SGD（stochastic gradient descent），一个支持大量模型副本的异步随机梯度下降过程。</li>
<li>Sandblaster（译者注：形容来自coordinator的命令像砂粒一样喷向集群其他节点），一个支持多种批量（batch）计算的分布优化方法，包含了L-BFGS的分布式实现，Downpour SGD和Sandblaster L-BFGS 都具有提升系统扩展能力和加速深度网络训练的能力。</li>
</ol>
<p>我们已经成功地利用DistBelief训练出一个比先前研究中提到的大30余倍的深度网络模型，并且获得了针对ImageNet（一个具有21K个分类和10M图像视觉识别任务）的最先进的训练效果。同时，我们还证明了，以上提及的技术能够显著地提升一个中等大小的，用作商用语音识别服务的深度网络的训练效果。尽管我们的这些技术主要用在大型神经网络的训练上，但是相关的算法同样适用于任何基于梯度的机器学习算法。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>深度学习和无监督特征学习给许多实际应用带了新的巨大希望。它在包括语音识别[1, 2]、视觉物体识别[3, 4]和文本处理[5, 6]等不同领域上体现了最领先的性能优势和效果。 先前研究已经证明，通过增加样本数量和模型参数数量等不同手段，可以显著地提升分类算法的最终精确度[3, 4, 7]。该结论掀起了研究可扩展的深度学习训练和推断算法和提高其适用性等优化方法的热潮[7, 9]。近年来，在中等大小深度网络的训练上，一个重要的进步是因GPU的使用，使其变得更加的实用[1, 2, 3, 8]。但GPU众所周知的缺陷是，当其内存（通常小于6G）无法存放下模型时，训练的提升效果变得不再明显。这时，为了有效地使用GPU，研究者往往通过减少样本或变量规模的途径使得CPU和GPU之间的数据交换不在成为瓶颈。虽然数据或变量的减少对小规模问题（如针对于声学模型的语音识别）有效，但对具有大量样本和高维度变量的问题（如高分辨率图像）将失去效果。<br>在本文中，我们提出了一个替代的方法，使用大规模的计算集群来分布地对深度网络进行训练和推断。我们开发了一个既能提升节点内（通过多线程方式）又可提升节点间（通过消息传递）并行训练能力的软件框架，称为DistBelief。它管理了如并行计算、同步化和通信等底层的细节。除了支持模型并行，DistBelief同时还支持数据并行，通过单一模型的多个分布副本的方式来优化同一目标。在该框架中，我们设计并实现了两个用于大规模分布式训练的新方法：i)Downpuur SGD，一个利用自适应学习速率和支持大量模型副本的异步随机梯度下降过程；(ii)Sandblaster L-BFGS，L-BFGS过程的一个分布式实现，其利用了数据和模型的并行（原作者注：我们利用Sandblaster方法实现了L-BFGS，但是Sandblaster同样广泛适用于其他批量方法的优化）。两个方法相比较于常规的SGD或L-BFGS方法都获得了显著的速度提升。 关于大规模非凸方法优化，我们的实验呈现了一些出人意料的结果。首先，异步梯度下降，一个很少被用到非凸问题的方法，尤其是与Adagrad[10]自适应学习速率结合时，用以训练深度网络的效果很好。其次，当计算资源充足时，L-BFGS方法能够和许多SGD的变种方法相匹敌，甚至优于后者。 对于深度学习的特定应用，我们提出了两项发现：前面提及的分布式优化方法，不仅可以加速中等规模模型的训练，同时它也可以训练规模大于想象的模型。为了证明第一点，我们利用分布式集群来训练中等大小语音识别模型，获得了与GPU相同的分类精度，而耗时仅是后者的1/10。为了证明第二点，我们训练了一个具有1G数量参数的大型神经网络，并用训练结果把ImageNet（计算机视觉领域最大的数据库之一）判别分类结果提升到了最先进的水平。</p>
<h1 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h1><p>近年来，用于商业和学术的机器学习数据集呈空前增长的趋势。因此，一些研究者开始探索可扩展的机器学习算法来处理这些泛洪数据[11, 12, 13, 14, 15, 16, 17]。但大量的研究仍着眼于线性凸模型[11, 12, 17]。在凸模型中，分布式梯度计算自然是第一步，但是有时因为同步的问题会遭遇训练速度减慢。针对该问题，已经有一些有效果的工作，如异步随机梯度下降算法中的无锁参数更新（如Hogwild![19]）。不幸的是，将这些方法扩展到的非凸情况的研究，如处理训练深度网络中遇到的问题，还是一片未知的领域。特别地，在存在多个局部最小解的情况下，是否能够使用参数平均或者执行密集的异步参数更新方法，还是未知的问题。 在深度学习范畴中，大多数工作仍然集中在利用单节点训练较小规模模型（如Theano[20]）上。关于向上扩展深度学习的一些有意思的建议是，利用GPU来训练多个小型模型，然后将分别的预测结果取平均[21]，或者修改标准的深度网络使其能够从本质上并行化。而与这些前期工作不同，我们关注于扩展深度网络用于训练具有10^9参数数量的超大模型，同时避免给模型形式引入限制。在分布式扩展方面，模型的并行，其思想和[23]类似，是一个主要的组成部分，同时其也必须和巧妙的分布优化方法相结合以利用数据的并行性。 我们也考虑了用一些现有的大规模计算工具，如Mapreduce和GraphLab等来处理大规模深度学习。我们发现为数据并行处理而设计的Mapreduce，极其不适合深度网络训练中固有的迭代计算；而用于通用（通常是无结构的）图计算的GraphLab，同样没有利用模型并行深度网络中典型的分层图结构来提升计算效率。</p>
<h1 id="模型并行"><a href="#模型并行" class="headerlink" title="模型并行"></a>模型并行</h1><p>为了使超大规模深度网络的训练变得容易，我们开发了软件框架——DistBelief，用以支持神经网络的并行计算和分层图形模型。用户只需定义发生在每个单元上的计算过程以单元在向上传递和向下传递（原作者注：对于神经网络而言，“向上”和“向下”指的是“前馈”和“反向传播”，而对于隐式Markov模型，它们与“前向”和“后向”意思更相近）时需发送的消息。对于大型模型，用户可能会将模型加以划分（如图1所示），使得不同节点的计算任务被分配到了不同机器上。DistBelief自动地利用CPU资源将节点内计算并行化，同时它还管理了底层通信、同步化和在训练和推断时的机器间数据传输。 将深度网络分布到多个机器上所带来的性能提升主要取决于模型的连通结构和计算需求。具有大量参数或高计算需求的模型通过增加CPU和内存数量通常可以提升训练速度，直到增加到通信开销成为系统的瓶颈。我们已成功地在144个划分（机器）上运行DistBelief框架，且获得了显著的性能提升，同时在8或16个划分上运行的一个中等大小模型，也获得了很好的效果（请参考第5节中模型并行化基准测试中的实验结果）。显然地，局部连通的网络模型，因为需要更少的网络通信，所以比全连通网络模型更易于分布化。导致性能退化的一个主要原因是因不同机器上处理时间的不同，导致大量的机器在等待一个或单个节点完成本阶段任务（译者注：和MapReduce中Map阶段的长尾问题类似）。尽管如此，对于我们最大的模型来讲，我们仍可以高效地用总共有512核CPU 的32台机器（每台机器平均使用16核CPU的计算资源）来训练单个神经网络。当和下一节中讲到的利用模型多副本方法的分布式优化算法相结合时，将使得在多达10K的CPU数量上训练单个网络成为可能，从而进一步减少总的训练时间。</p>
<h1 id="分布式优化算法"><a href="#分布式优化算法" class="headerlink" title="分布式优化算法"></a>分布式优化算法</h1><p>DistBelief框架中的并行计算方法使我们能够部署和运行比前期工作中提到的大得多的神经网络模型。但是为了在合理时间内训练如此规模的模型，这就要求我们不仅需实现单个DistBelief实例内的并行，而且需要将训练任务分发到多个DistBelief实例。在本节中，我们将具体阐述这第二级的并行，即采用多个DistBelief模型的实例（或副本），同时来达到一个优化目标。<br><img src="/2016/10/06/Downpour-SGD/large_scale.png" alt="large_scale.png" title=""></p>
<ul>
<li>左：Downpour SGD，模型的副本采用异步方式从参数服务器（Parameter Server）中获取参数w和上传Δw到参数服务器。</li>
<li>右：Sandblaster L-BFGS：单个协调器（Coordinator）实例发送简短消息（message）到模型副本和参数服务器以协调批量优化过程。</li>
</ul>
<p>下面我们来对这两个分布优化方法做比较：Downpour SGD是在线方法，而L-BFGS是批量方法。两方法中模型副本都利用了中心分割化服务器组的概念来共享参数，也都利用了每个模型副本中DistBelief的并行性。但更重要的是，对不同副本的处理时间的不同，甚至整个模型副本的失效、移除和重启等情况都在两方法的考虑范围之内。</p>
<h2 id="Downpour-SGD"><a href="#Downpour-SGD" class="headerlink" title="Downpour SGD"></a>Downpour SGD</h2><p>随机梯度下降（SGD）方法，应该是最常用的训练深度神经网络的优化方法[26, 27, 3]。但不幸的是，传统SGD方法本质上的顺序性，使得在大型数据集下变得不再适用，因为这种完全串行方式所需要的机器间数据移动是非常耗时的。</p>
<p>为了将SGD应用到大数据集上，我们提出了Downpour SGD，一个使用单个DistBelief模型的多个分布副本的异步随机梯度下降变种。它的基本方法如下：将训练集划分若干子集，并对每个子集运行一个单独的模型副本。模型副本之间的通信均通过中心参数服务器组，该参数服务器组维护了模型参数的当前状态，并分割到多台机器上（例如，如果我们参数服务器组有10个节点，那么每个节点将负责存储和更新模型参数的1/10，如图1所示）。该方法在两个方面体现异步性：</p>
<ol>
<li>模型副本之间运行独立</li>
<li>参数服务器组各节点之间同样是独立的。</li>
</ol>
<p>考虑Downpour SGD的一个最简单的实现，在处理每个mini-batch（译者注：小型批量）之前，模型副本都会向参数服务器请求最新的模型参数。因为DistBelief框架也是分布在多台机器上，所以其框架的每个节点只需和参数服务器组中包含和该节点有关的模型参数的那部分节点进行通信。在DistBelief副本获得更新后的模型参数后，运行一次mini-batch样本来计算参数的梯度，并推送到参数服务器，以用于更新当前的模型参数值。<br>可以通过设定每Nfetch 次mini-batch操作向参数服务器获取一次更新后的参数和每npush次mini-batch操作推送一次梯度更新到参数服务器（这里nfetch不一定和npush相等）。事实上，获取参数，推送梯度和处理训练样本三种操作，可以以三个采用弱同步的线程实现（参见附录中的伪代码）。为了简单起见，同时也是为了和传统SGD方法相比较，在下面的实验中，我们设定: Nfetch=Npush=1<br>在处理机器失效方面，Downpour SGD比标准（同步）SGD要鲁棒。对于同步SGD来讲，如果一台机器失效，整个训练过程将会延时；但是对于异步SGD来讲，如果某个模型副本的一台机器失效，其他模型副本仍然继续处理样本并更新参数服务器中的模型参数。另一方面，Downpour SGD带来的多种异步处理形式给优化过程带来了进一步的随机性。这里面最显而易见的是，模型实例最可能是使用一个稍微过时的参数来计算梯度，因为这时其他的副本可能已经更新了参数服务器上的参数。但是，除此之外还有其他随机的来源：因为参数服务器组的每台机器是行为独立的，所以无法保证在给定时间点上，每个节点的参数被更新的次数相同，或者以同样的顺序被更新。更进一步的，因为模型副本使用不同的线程来获取参数和推送梯度值，故在同一时间戳上，单个副本内的参数将有额外的稍微不一致的现象。尽管对于非凸问题的这些操作的安全性缺乏理论基础，但是在实践中，我们发现放松一致性要求的做法是相当有效的。</p>
<p>我们发现，另外一项能极大提高Downpour SGD鲁棒性的技术是使用Adagrad[10]自适应学习速率方法。与使用固定的值作为学习速率的方式不同，Adagrad的每个参数使用单独的自适应学习速率。<br>可以看出，因为学习速率的计算仅与参数历史梯度值的平方和有关，所以Adagrad易于在每个参数服务器节点上单独实现。所有学习速率共享的缩放常量因子γ，通常大于（可能有一个数量级）不使用Adagrad情况下，采用固定学习速率的最优值。Adagrad的使用能够增加并发训练的模型副本数量，同时，采用“热启动”（即在启动其他副本之前，用单个模型来训练参数）的模型训练方法，几乎消除了在Downpour SGD中可能会出现的稳定性问题.</p>
<p>假设$\eta_{i,k}$是第i个参数在第k次迭代时的学习速率,$\Delta g_{i,k}$是其梯度值,那么：<br>\begin{equation}<br>\eta_{i,k}=\frac{\gamma}{\sqrt{\sum^k_{j=1} g_{i,k}}}<br>\end{equation}<br><img src="/2016/10/06/Downpour-SGD/downpour.jpeg" alt="downpour.jpeg" title=""></p>
<h2 id="Sandblaster-L-BFGS"><a href="#Sandblaster-L-BFGS" class="headerlink" title="Sandblaster L-BFGS"></a>Sandblaster L-BFGS</h2><p>已经证实批量处方法在小型深度网络的训练上效果很好[7]。为了将这些方法运用到大型模型和大型数据集上，我们引入了Sandblaster批量优化框架，同时讨论了L-BFGS在该框架的一个实现。 Sandblaster的主要思路是将参数的存储和操作分布化，算法（如L-BFGS）的核心位于协调器（coordinator）中。该协调器并不直接获取模型参数，相反地，它发出一系列命令（如内积，向量缩放，系数相关加法，乘法）到参数服务器节点，并且这些命令能在节点范围内执行。一些额外的信息，如L-BFGS的历史数据缓存，同样保存在计算出它的参数服务器节点上。这使得运行大型模型（10亿级参数）成为现实，而且不会因传输参数和梯度过度集中在一个节点上而导致性能下降。 在典型的L-BFGS的并行实现中，数据被分布到许多机器上，每个机器负责对样本数据的一个特定的子集计算梯度，而后梯度值被传输回中心服务器（或者通过树形结构来聚合[16]）。因为许多方法都需要等待最慢的机器处理完毕，所以它并不能很好地扩展到大型共享集群中。为了解决该（扩展性）问题，我们采用了如下的负载均衡的方案：协调器分配给这N个模型副本一小部分的任务量，并且该计算任务远小于总批量，每当副本完成计算处于闲置状态时，立即给其分配新的计算任务，如此下去。为了在整个批量计算的最后阶段进一步优化慢速副本的任务处理，协调器调度最快结束的副本同时计算未完成的任务，从最先结束的副本处取得计算结果。该方案和MapReduce中的“备份任务”的使用相类似[24]。数据预取方式和通过将顺序数据传输到同一生产者以提高数据亲和性的方法一道，使得数据的获取不再是问题。和Downpour SGD中和参数服务器之间的高频率，高吞吐参数同步方式相反，Sandblaster中的计算者仅仅需在每次批处理的开始阶段获取参数，并且只需在极少的结束部分（用以免遭备份失效和重启）处需要传输梯度到参数服务器。</p>
<img src="/2016/10/06/Downpour-SGD/sandblaster.jpeg" alt="sandblaster.jpeg" title="">
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>我们用两个不同的深度学习问题来衡量了我们设计的优化算法：(i)静态图像的物体识别和(ii)语音识别的声学处理。<br>语音识别任务是将一小段音频的中心区域（或帧）归类为数千种类型之一。我们使用了一个五层的深度网络：四个隐藏层，每个有2560个单元，并以sigmoid为激励函数；一个有8192个单元的softmax输出层。输入层是11个长度为25ms连续的相互重叠的语音，每个由40个对数动能值表示。层与层之间是全连接的，因此整个网络的参数数量有42M。我们用1.1G个弱标记样本集来训练模型，并且用保留的部分样本做测试集来衡量精确度。简单深度网络的配置和训练过程请参照[28]。<br>对于可视物体识别，我们训练了一个更大的局部区域连通的神经网络，并作用于ImageNet的有$1.6\times {10}^7$ 图像的数据集上，每个图像被缩放到100X100像素大小。整个网络有三个阶段，每个阶段都包含了过滤，池化，局部对比度归一化等操作，过滤层的每一个单元都和其前一层的10X10的小块图像相连接。我们的基础设施允许多个单元都和同一小块图像相连接，我们的实验中，同一连接单元数量从8增加到36不等。输出层由$2.1\times 10^4$个一对多模式的logistic分类器组成，每个分别代表ImageNet的一个物体种类。相似的深度网络配置和训练过程请参照[30]。</p>
<h2 id="模型并行基准测试"><a href="#模型并行基准测试" class="headerlink" title="模型并行基准测试"></a>模型并行基准测试</h2><p>为了测试DistBelief模型的并行性扩展，实验中以运行单个模型实例的划分（机器）数量作为变量，我们测量了用简单SGD训练处理单个mini-batch的平均时间。在图3中，我们通过计算训练的平均加速比来量化N个节点对并行化的影响：使用单个节点训练花费的时间对使用N个节点训练花费的时间的比值。模型中推断过程的加速比是相似的，因而没有显示出来。<br>中等大小的语音模型在8个机器节点上运行是最快的，相比于单个节点，加速比大约是2.2（每台机器配置其使用不超过20核CPU来训练模型）。将模型划分在大于8个机器节点上实际上会减缓训练过程，因为模型的全连通结构使得此时网络开销开始起决定性因素，同时节点的增加使得每个节点的计算量也相应地减少。<br><img src="/2016/10/06/Downpour-SGD/experiment1.png" alt="四个不同规模的深度网络使用单个DistBelief实例训练在集群机器不同规模下的加速比。具有较多参数的模型在机器增加时比较少参数模型获得更高的加速比" title="四个不同规模的深度网络使用单个DistBelief实例训练在集群机器不同规模下的加速比。具有较多参数的模型在机器增加时比较少参数模型获得更高的加速比"><br><img src="/2016/10/06/Downpour-SGD/experiment2.png" alt="左图：采用不同的优化方法，在（在一部分训练集）上的训练精度。右图：训练时间的变化下，测试集的分类精度的变化曲线。Downpour SGD和Sandblaster实验均采用了10小时平凡SGD热启动方式来初始化。" title="左图：采用不同的优化方法，在（在一部分训练集）上的训练精度。右图：训练时间的变化下，测试集的分类精度的变化曲线。Downpour SGD和Sandblaster实验均采用了10小时平凡SGD热启动方式来初始化。"><br>相反地，比语音识别模型规模更大，且具有局部连通性的图像模型，能够通过持续给每个模型副本增加节点数量，来提升加速比。可以看出，具有$1.7\times 10^9$个参数的最大模型加速比最高，在使用了81个节点的情况下，获了12倍的加速比。对于大型模型来讲，通过持续增加机器数量始终能提升训练速度，但是获得的性能回报逐渐变少。<br>优化方法的比较：为了衡量提出的分布优化方式的性能，我们在不同的配置下，运行前面提及的语音模型。考虑两种基准方式（译者注：作为比较的靶对象）：(i)用传统（单个副本）SGD方法训练DistBelief模型（在8个划分上），(ii)用CUDA[28]在GPU上训练与(i)中同样的模型。三个和基准方式相比较的分布优化方法是：(i)固定学习速率的Downpour SGD，(ii)使用Adagrad自适应学习速率的Downpour SGD，(iii)Sandblaster L-BFGS。<br>图4说明了对于不同的优化方法，以训练时间作为分类的性能时的模型比较。我们的目标是忽略资源要求下，在最短的训练时间内，获得最佳的测试集分类精度。传统单副本的SGD（黑色曲线）是最慢速的。具有20个副本的Downpour SGD方法（蓝色曲线）在此基础上获得了显著的提升。20个副本的Downpour SGD和Adagrad相结合（橙色曲线）是可以被认为是中等速率的，而使用了2000个模型副本的Sandblaster L-BFGS更加快速（绿色曲线）。但是，最快的是200个模型副本并和Adagrad相结合的Downpour SGD方法（红色曲线）。可见，只要供给足够的CPU资源，Sandblaster L-BFGS和Downpour SGD方法对模型的训练都能从本质上快于高性能GPU。<br>尽管我们没有限制以上实验的资源使用，但是我们可以考虑这些优化方法是如何用硬件资源来换取性能提升的。将测试集精度设定为固定值（16%），在改变机器数量和CPU数量的条件下，测试上述方法达到该精度所需训练时间，以此方式来分析资源使用和性能的关系，如图5。每条曲线的四个点其中之一对应于图4中的训练配置，其他三个点是替代的配置。<br><img src="/2016/10/06/Downpour-SGD/experiment3.png" alt="在不同机器数量（左图）和CPU数量（右图）下，几种优化策略达到固定精度值（16%）所花费的时间" title="在不同机器数量（左图）和CPU数量（右图）下，几种优化策略达到固定精度值（16%）所花费的时间"><br>在此坐标图中，距原点较近的点更优，因为它们在更少硬件资源的条件下，花费的训练时间更少。从这个角度上讲，使用Adagrad的Downpour SGD方法看起来是最好的权衡：对于任意固定机器数量或CPU数量条件下，该方法比Downpour SGD或Sandblaster L-BFGS花费更少的时间达到精度目标。对于任意给定达到精度目标的训练时间，使用Adagrad的Downpour SGD比Sandblaster L-BFGS使用更少的资源，并且在多数情况下，使用固定学习速率的Downpour SGD甚至都不能在最后期限内完成训练目标。Sandblaster L-BFGS看起来还能通过持续增加CPU数量来提高加速比，表明在极其大的（如3*10^4CPU使用量）资源使用条件下，应该会获得最快的训练时间。</p>
<h2 id="应用到ImageNet"><a href="#应用到ImageNet" class="headerlink" title="应用到ImageNet"></a>应用到ImageNet</h2><p>先前的实验证明了，我们的技术可以加速具有$10^7$参数数量的神经网络训练。但是，对于这些基于集群的分布式优化方法来讲，最有价值的优点，是它能扩展到远大于单个机器能够容纳得下的模型，更不用说单个GPU了。为了测试训练大型神经网络的能力，我们使用Downpour SGD训练了之前提及的具有$1.7\times 10^9$个参数的图像模型，用于分类任务。正如[30]中的细节描述，在ImageNet分类任务中，这个网络的训练结果获得了大约错误率15%交叉验证（Cross-Validation）的分类精度，比我们所已知的先前最高的精度提高了60%多。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>在这篇文章中，我们介绍了DistBelief，一个深度网络的分布并行训练的框架，并在该框架中发现了一些有效的分布优化策略。我们提出了Downpour SGD，一个高度异步的SGD变种算法，用以训练非凸的深度学习模型，其结果出乎意料的好。Sandblaster L-BFGS， L-BFGS的分布式实现，其与SGD相比具有竞争力。同时，对网络带宽的高效利用，使得其能够扩展到更大数量的并发线程来训练同一模型。这就是说，当具有2000数量CPU或更少时，Downpour SGD和Adagrad自适应学习速率方法的结合是最有效的方法。 Adagrad方法本身不是为异步SGD的使用而设计的，并且该方法最典型的应用也不是在非凸问题上。但是，在高度非线性的深度网络中，两者的结合的效果却如此的好。我们推测，在面对剧烈的异步更新时，Adagrad自动地对不稳定参数起到了稳定的效果，并且很自然地根据不同的深度网络层数的变化来调整学习速率。 实验结果表明，即使在中等规模的模型训练上，使用我们的大规模（分布式）方法，集群方法也比GPU要快，并且没有GPU对模型规模的限制。为了证明其训练更大模型的能力，我们通过训练一个超过10^9数量参数的模型，在ImageNet物体识别上获得了比先前最优的更好的精度水平。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li>G. Dahl, D. Yu, L. Deng, and A. Acero. Context-dependent pre-trained deep neural networks for large vocabulary speech recognition. IEEE Transactions on Audio, Speech, and Language Processing, 2012.</li>
<li>G. Hinton, L. Deng, D. Yu, G. Dahl, A. Mohamed, N. Jaitly, A. Senior, V. Vanhoucke, P. Nguyen, T. Sainath, and B. Kingsbury. Deep neural networks for acoustic modeling in speech recognition. IEEE Signal Processing Magazine, 2012.</li>
<li>D. C. Ciresan, U. Meier, L. M. Gambardella, and J. Schmidhuber. Deep big simple neural nets excel on handwritten digit recognition. CoRR, 2010.</li>
<li>A. Coates, H. Lee, and A. Y. Ng. An analysis of single-layer networks in unsupervised feature learning. In AISTATS 14, 2011.</li>
<li>Y. Bengio, R. Ducharme, P. Vincent, and C. Jauvin. A neural probabilistic language model. Journal of Machine Learning Research, 3:1137–1155, 2003.</li>
<li>R. Collobert and J. Weston. A unified architecture for natural language processing: Deep neural networks with multitask learning. In ICML, 2008.</li>
<li>Q. V. Le, J. Ngiam, A. Coates, A. Lahiri, B. Prochnow, and A. Y. Ng. On optimization methods for deep learning. In ICML, 2011.</li>
<li>R. Raina, A. Madhavan, and A. Y. Ng. Large-scale deep unsupervised learning using graphics processors. In ICML, 2009.</li>
<li>J. Martens. Deep learning via hessian-free optimization. In ICML, 2010.</li>
<li>J. C. Duchi, E. Hazan, and Y. Singer. Adaptive subgradient methods for online learning and stochastic optimization. Journal of Machine Learning Research, 12:2121–2159, 2011.</li>
<li>Q. Shi, J. Petterson, G. Dror, J. Langford, A. Smola, A. Strehl, and V. Vishwanathan. Hash kernels. In AISTATS, 2009.</li>
<li>J. Langford, A. Smola, and M. Zinkevich. Slow learners are fast. In NIPS, 2009.</li>
<li>G. Mann, R. McDonald, M. Mohri, N. Silberman, and D. Walker. Efficient large-scale distributed training of conditional maximum entropy models. In NIPS, 2009.</li>
<li>R. McDonald, K. Hall, and G. Mann. Distributed training strategies for the structured perceptron. In NAACL, 2010.</li>
<li>M. Zinkevich, M. Weimer, A. Smola, and L. Li. Parallelized stochastic gradient descent. In NIPS, 2010.</li>
<li>A. Agarwal, O. Chapelle, M. Dudik, and J. Langford. A reliable effective terascale linear learning system. In AISTATS, 2011.</li>
<li>A. Agarwal and J. Duchi. Distributed delayed stochastic optimization. In NIPS, 2011.</li>
<li>C. H. Teo, Q. V. Le, A. J. Smola, and S. V. N. Vishwanathan. A scalable modular convex solver for regularized risk minimization. In KDD, 2007.</li>
<li>F. Niu, B. Retcht, C. Re, and S. J. Wright. Hogwild! A lock-free approach to parallelizing stochastic gradient descent. In NIPS, 2011.</li>
<li>J. Bergstra, O. Breuleux, F. Bastien, P. Lamblin, R. Pascanu, G. Desjardins, J. Turian, D. Warde-Farley, and Y. Bengio. Theano: a CPU and GPU math expression compiler. In SciPy, 2010.</li>
<li>D. Ciresan, U. Meier, and J. Schmidhuber. Multi-column deep neural networks for image classification. Technical report, IDSIA, 2012.</li>
<li>L. Deng, D. Yu, and J. Platt. Scalable stacking and learning for building deep architectures. In ICASSP, 2012.</li>
<li>A. Krizhevsky. Learning multiple layers of features from tiny images. Technical report, U. Toronto, 2009.</li>
<li>J. Dean and S. Ghemawat. Map-Reduce: simplified data processing on large clusters. CACM, 2008.</li>
<li>Y. Low, J. Gonzalez, A. Kyrola, D. Bickson, C. Guestrin, and J. Hellerstein. Distributed GraphLab: A framework for machine learning in the cloud. In VLDB, 2012.</li>
<li>L. Bottou. Stochastic gradient learning in neural networks. In Proceedings of Neuro-Nˆımes 91, 1991.</li>
<li>Y. LeCun, L. Bottou, G. Orr, and K. Muller. Efficient backprop. In Neural Networks: Tricks of the trade. Springer, 1998.</li>
<li>V. Vanhoucke, A. Senior, and M. Z. Mao. Improving the speed of neural networks on cpus. In Deep Learning and Unsupervised Feature Learning Workshop, NIPS 2011, 2011.</li>
<li>J. Deng, W. Dong, R. Socher, L. -J. Li, K. Li, and L. Fei-Fei. ImageNet: A Large-Scale Hierarchical</li>
<li>Image Database. In CVPR, 2009. 30. Q. V. Le, M. A. Ranzato, R. Monga, M. Devin, K. Chen, G. S. Corrado, J. Dean, and A. Y. Ng. Building high-level features using large scale unsupervised learning. In ICML, 2012.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux常见文字处理命令]]></title>
      <url>http://wlyPKU.github.io/2016/08/30/Linux%E5%B8%B8%E8%A7%81%E6%96%87%E5%AD%97%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>本文主要介绍Linux的常见文字处理命令,如awk, sort, uniq, wc等操作。<br><a id="more"></a></p>
<h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。<br>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。<br>awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml">awk '</span><span class="template-variable">&#123;pattern + action&#125;</span><span class="xml">' </span><span class="template-variable">&#123;filenames&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<p>尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（<code>{}</code>）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。<br>awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。<br>通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p>
<h2 id="调用awk"><a href="#调用awk" class="headerlink" title="调用awk"></a>调用awk</h2><p>有三种方式调用awk:<br>1.命令行方式<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk [-F  field-<span class="keyword">separator</span>]  <span class="string">'commands'</span>  input-<span class="keyword">file</span>(s)</div></pre></td></tr></table></figure></p>
<p>其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。<br>在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。<br>2.shell脚本方式<br>将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。<br>相当于shell脚本首行的：<code>#!/bin/sh</code><br>可以换成：<code>#!/bin/awk</code><br>3.将所有的awk命令插入一个单独文件，然后调用：<br><code>awk -f awk-script-file input-file(s)</code><br>其中，-f选项加载awk-script-file中的awk脚本，input-file(s)跟上面的是一样的。</p>
<h2 id="入门实例"><a href="#入门实例" class="headerlink" title="入门实例"></a>入门实例</h2><p>假设last -n 5的输出如下<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="name">root@www</span> ~]# last -n <span class="number">5</span> &lt;==仅取出前五行</div><div class="line">root     pts/1   <span class="number">192.168</span>.1.100  Tue Feb <span class="number">10</span> <span class="number">11</span>:21   still logged in</div><div class="line">root     pts/1   <span class="number">192.168</span>.1.100  Tue Feb <span class="number">10</span> <span class="number">00</span>:46 - <span class="number">02</span>:28  (<span class="name">01:41</span>)</div><div class="line">root     pts/1   <span class="number">192.168</span>.1.100  Mon Feb  <span class="number">9</span> <span class="number">11</span>:41 - <span class="number">18</span>:30  (<span class="name">06:48</span>)</div><div class="line">dmtsai   pts/1   <span class="number">192.168</span>.1.100  Mon Feb  <span class="number">9</span> <span class="number">11</span>:41 - <span class="number">11</span>:41  (<span class="name">00:00</span>)</div><div class="line">root     tty1                   Fri Sep  <span class="number">5</span> <span class="number">14</span>:09 - <span class="number">14</span>:10  (<span class="name">00:01</span>)</div></pre></td></tr></table></figure></p>
<p>如果只是显示最近登录的5个帐号<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#last -n 5 | awk  <span class="string">'&#123;print $1&#125;'</span></span></div><div class="line">root</div><div class="line">root</div><div class="line">root</div><div class="line">dmtsai</div><div class="line">root</div></pre></td></tr></table></figure></p>
<p>awk工作流程是这样的：读入有’\n’换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是”空白键” 或 “[tab]键”,所以$1表示登录用户，$3表示登录用户ip,以此类推。</p>
<p>如果只是显示/etc/passwd的账户<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#cat /etc/passwd |awk  -F <span class="string">':'</span>  <span class="string">'&#123;print $1&#125;'</span>  </span></div><div class="line">root</div><div class="line">daemon</div><div class="line">bin</div><div class="line">sys</div></pre></td></tr></table></figure></p>
<p>这种是awk+action的示例，每行都会执行action{print $1}。</p>
<p>-F指定域分隔符为’:’。</p>
<p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#<span class="keyword">cat</span> /etc/passwd |awk  -F ':'  '&#123;<span class="keyword">print</span> <span class="variable">$1</span><span class="string">"\t"</span><span class="variable">$7&#125;</span>'</div><div class="line">root    /bin/bash</div><div class="line">daemon  /bin/<span class="keyword">sh</span></div><div class="line">bin     /bin/<span class="keyword">sh</span></div><div class="line">sys     /bin/<span class="keyword">sh</span></div></pre></td></tr></table></figure></p>
<p>如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加”blue,/bin/nosh”。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cat</span> /etc/passwd |awk  -F ':'  'BEGIN &#123;<span class="keyword">print</span> <span class="string">"name,shell"</span>&#125;  &#123;<span class="keyword">print</span> <span class="variable">$1</span><span class="string">","</span><span class="variable">$7&#125;</span> END &#123;<span class="keyword">print</span> <span class="string">"blue,/bin/nosh"</span>&#125;'</div><div class="line">name,<span class="keyword">shell</span></div><div class="line">root,/bin/bash</div><div class="line">daemon,/bin/<span class="keyword">sh</span></div><div class="line">bin,/bin/<span class="keyword">sh</span></div><div class="line">sys,/bin/<span class="keyword">sh</span></div><div class="line">....</div><div class="line">blue,/bin/nosh</div></pre></td></tr></table></figure>
<p>awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p>
<p>搜索/etc/passwd有root关键字的所有行<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#awk -F: '/root/' /etc/passwd</span></div><div class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></div></pre></td></tr></table></figure></p>
<p>这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。<br>搜索支持正则，例如找root开头的: awk -F: ‘/^root/‘ /etc/passwd</p>
<p>搜索/etc/passwd有root关键字的所有行，并显示对应的shell<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># awk -F: <span class="string">'/root/&#123;print $7&#125;'</span> <span class="regexp">/etc/</span>passwd</div><div class="line"><span class="regexp">/bin/</span>bash</div></pre></td></tr></table></figure></p>
<p> 这里指定了action{print $7}</p>
<h2 id="awk内置变量"><a href="#awk内置变量" class="headerlink" title="awk内置变量"></a>awk内置变量</h2><p>awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ARGC               命令行参数个数</div><div class="line">ARGV               命令行参数排列</div><div class="line">ENVIRON            支持队列中系统环境变量的使用</div><div class="line">FILENAME           awk浏览的文件名</div><div class="line">FNR                浏览文件的记录数</div><div class="line"><span class="built_in">FS</span>                 设置输入域分隔符，等价于命令行 -F选项</div><div class="line">NF                 浏览记录的域的个数</div><div class="line">NR                 已读的记录数</div><div class="line">OFS                输出域分隔符</div><div class="line">ORS                输出记录分隔符</div><div class="line">RS                 控制记录分隔符</div></pre></td></tr></table></figure></p>
<p>此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,……以此类推。</p>
<p>统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#awk  -F ':'  '&#123;print "filename:" FILENAME ",linenumber:" NR ",columns:" NF ",linecontent:"$0&#125;' /etc/passwd</span></div><div class="line"><span class="symbol">filename:</span>/etc/passwd,<span class="symbol">linenumber:</span><span class="number">1</span>,<span class="symbol">columns:</span><span class="number">7</span>,<span class="symbol">linecontent:</span><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></div><div class="line"><span class="symbol">filename:</span>/etc/passwd,<span class="symbol">linenumber:</span><span class="number">2</span>,<span class="symbol">columns:</span><span class="number">7</span>,<span class="symbol">linecontent:</span><span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:daemon</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/bin/sh</span></div><div class="line"><span class="symbol">filename:</span>/etc/passwd,<span class="symbol">linenumber:</span><span class="number">3</span>,<span class="symbol">columns:</span><span class="number">7</span>,<span class="symbol">linecontent:</span><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sh</span></div><div class="line"><span class="symbol">filename:</span>/etc/passwd,<span class="symbol">linenumber:</span><span class="number">4</span>,<span class="symbol">columns:</span><span class="number">7</span>,<span class="symbol">linecontent:</span><span class="symbol">sys:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:sys</span><span class="symbol">:/dev</span><span class="symbol">:/bin/sh</span></div></pre></td></tr></table></figure></p>
<p>使用printf替代print,可以让代码更加简洁，易读<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">awk</span>  -F <span class="string">':'</span>  <span class="string">'&#123;printf("filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n",FILENAME,NR,NF,<span class="variable">$0</span>)&#125;'</span> /etc/passwd</div></pre></td></tr></table></figure></p>
<h2 id="awk编程"><a href="#awk编程" class="headerlink" title="awk编程"></a>awk编程</h2><h3 id="变量和赋值"><a href="#变量和赋值" class="headerlink" title="变量和赋值"></a>变量和赋值</h3><p>除了awk的内置变量，awk还可以自定义变量。</p>
<p>下面统计/etc/passwd的账户人数<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'&#123;count++;print $0;&#125; END&#123;print "user count is ", count&#125;'</span> /etc/passwd</div><div class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></div><div class="line">......</div><div class="line">user count is  <span class="number">40</span></div></pre></td></tr></table></figure></p>
<p>count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。</p>
<p>这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">awk '<span class="type">BEGIN</span> &#123;<span class="built_in">count</span>=<span class="number">0</span>;<span class="built_in">print</span> <span class="string">"[start]user count is "</span>, <span class="built_in">count</span>&#125; &#123;<span class="built_in">count</span>=<span class="built_in">count</span>+<span class="number">1</span>;<span class="built_in">print</span> $<span class="number">0</span>;&#125; <span class="type">END</span>&#123;<span class="built_in">print</span> <span class="string">"[end]user count is "</span>, <span class="built_in">count</span>&#125;' /etc/passwd</div><div class="line">[start]user <span class="built_in">count</span> <span class="keyword">is</span>  <span class="number">0</span></div><div class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</div><div class="line">...</div><div class="line">[end]user <span class="built_in">count</span> <span class="keyword">is</span>  <span class="number">40</span></div></pre></td></tr></table></figure></p>
<p>统计某个文件夹下的文件占用的字节数<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ls -l |awk <span class="symbol">'BEGIN</span> &#123;size=<span class="number">0</span>;&#125; &#123;size=size+$<span class="number">5</span>;&#125; <span class="keyword">END</span>&#123;print <span class="string">"[end]size is "</span>, size&#125;'</div><div class="line">[<span class="keyword">end</span>]size <span class="keyword">is</span>  <span class="number">8657198</span></div></pre></td></tr></table></figure></p>
<p>如果以M为单位显示:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ls -l |awk 'BEGIN &#123;size=<span class="number">0</span>;&#125; &#123;size=size+$<span class="number">5</span>;&#125; END&#123;print <span class="string">"[end]size is "</span>, size/<span class="number">1024</span>/<span class="number">1024</span>,<span class="string">"M"</span>&#125;' </div><div class="line">[end]size is  <span class="number">8.25889</span> M</div></pre></td></tr></table></figure></p>
<p>注意，统计不包括文件夹的子目录。</p>
<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p> awk中的条件语句是从C语言中借鉴来的，见如下声明方式：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (expression) &#123;</div><div class="line">    statement;</div><div class="line">    statement;</div><div class="line">    ... ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (expression) &#123;</div><div class="line">    statement;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    statement2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (expression) &#123;</div><div class="line">    statement1;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (expression1) &#123;</div><div class="line">    statement2;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    statement3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ls -l |awk '<span class="keyword">BEGIN</span> &#123;<span class="keyword">size</span>=<span class="number">0</span>;print "[<span class="keyword">start</span>]<span class="keyword">size</span> <span class="keyword">is</span> <span class="string">", size&#125; &#123;if($5!=4096)&#123;size=size+$5;&#125;&#125; END&#123;print "</span>[<span class="keyword">end</span>]<span class="keyword">size</span> <span class="keyword">is</span> <span class="string">", size/1024/1024,"</span>M<span class="string">"&#125;' </span></div><div class="line">[end]size is  8.22339 M</div></pre></td></tr></table></figure></p>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>  因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。</p>
<p>显示/etc/passwd的账户<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">awk -F ':' 'BEGIN &#123;<span class="built_in">count</span>=<span class="number">0</span>;&#125; &#123;<span class="built_in">name</span>[<span class="built_in">count</span>] = $<span class="number">1</span>;<span class="built_in">count</span>++;&#125;; END&#123;<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NR; i++) print i, <span class="built_in">name</span>[i]&#125;' /etc/passwd</div><div class="line"><span class="number">0</span> root</div><div class="line"><span class="number">1</span> daemon</div><div class="line"><span class="number">2</span> bin</div><div class="line"><span class="number">3</span> sys</div><div class="line"><span class="number">4</span> sync</div><div class="line"><span class="number">5</span> games</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>这里使用for循环遍历数组</p>
<p>awk编程的内容极多，这里只罗列简单常用的用法，更多请参考<a href="http://www.gnu.org/software/gawk/manual/gawk.html" target="_blank" rel="external">The GNU Awk User’s Guide</a></p>
<hr>
<h1 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h1><p>uniq的作用是过滤重复部分显示文件内容，这个命令读取输入文件，并比较相邻的行。在正常情况下，第二个及以后更多个重复行将被删去，行比较是根据所用字符集的排序序列进行的。该命令加工后的结果写到输出文件中。输入文件和输出文件必须不同。如果输入文件用“- ”表示，则从标准输入读取。<br>该命令各选项含义如下：</p>
<p>– c 显示输出中，在每行行首加上本行在文件中出现的次数。它可取代- u和- d选项。<br>– d 只显示重复行。<br>– u 只显示文件中不重复的各行。<br>– n 前n个字段与每个字段前的空白一起被忽略。一个字段是一个非空格、非制表符的字符串，彼此由制表符和空格隔开(字段从0开始编号)。<br>+n 前n个字符被忽略，之前的字符被跳过(字符从0开始编号)。<br>– f n 与- n相同，这里n是字段数。<br>– s n 与+n相同，这里n是字符数。</p>
<p>接下来通过实践实例说明：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@stu100 ~]<span class="comment"># cat test</span></div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line">girl took <span class="keyword">bat </span>home</div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line">dog <span class="keyword">brought </span>hat home</div><div class="line">dog <span class="keyword">brought </span>hat home</div><div class="line">dog <span class="keyword">brought </span>hat home</div></pre></td></tr></table></figure></p>
<p>看test文件的内容<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@stu100 ~]<span class="comment"># uniq test</span></div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line">girl took <span class="keyword">bat </span>home</div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line">dog <span class="keyword">brought </span>hat home</div></pre></td></tr></table></figure></p>
<p>uniq命令不加任何参数，仅显示连续重复的行一次</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@stu100 ~]<span class="comment"># uniq -c test</span></div><div class="line"><span class="number">2</span> <span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line"><span class="number">1</span> girl took <span class="keyword">bat </span>home</div><div class="line"><span class="number">2</span> <span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line"><span class="number">3</span> dog <span class="keyword">brought </span>hat home</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<p>-c 参数显示文件中每行连续出现的次数。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@stu100 ~]<span class="comment"># cat test |sort | uniq -c</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">4</span> <span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line"><span class="number">3</span> dog <span class="keyword">brought </span>hat home</div><div class="line"><span class="number">1</span> girl took <span class="keyword">bat </span>home</div></pre></td></tr></table></figure>
<p>排序后再显示</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@stu100 ~]<span class="comment"># uniq -d test</span></div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line">dog <span class="keyword">brought </span>hat home</div></pre></td></tr></table></figure>
<p>-d选项仅显示文件中连续重复出现的行。</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@stu100 ~]<span class="meta"># uniq -u test</span></div><div class="line">girl took bat <span class="built_in">home</span></div></pre></td></tr></table></figure>
<p>-u选项显示文件中没有连续出现的行。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@stu100 ~]<span class="comment"># uniq -f 2 -s 2 test</span></div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div></pre></td></tr></table></figure>
<p>忽略每行的前2个字段，忽略第二个空白字符和第三个字段的首字符，结果at home</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@stu100 ~]<span class="comment"># uniq -f 1 test</span></div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line">dog <span class="keyword">brought </span>hat home</div></pre></td></tr></table></figure>
<p>忽略每行的第一个字段，这样boy ，girl开头的行看起来是连续重复的行。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@stu100 ~]<span class="comment"># uniq -D test</span></div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line"><span class="keyword">boy </span>took <span class="keyword">bat </span>home</div><div class="line">dog <span class="keyword">brought </span>hat home</div><div class="line">dog <span class="keyword">brought </span>hat home</div><div class="line">dog <span class="keyword">brought </span>hat home</div></pre></td></tr></table></figure>
<p>显示所有重复的行，每个重复的行都显示</p>
<hr>
<h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p>功能说明：将文本文件内容加以排序。<br>语　　法：sort [-bcdfimMnr][-o&lt;输出文件&gt;][-t&lt;分隔字符&gt;][+&lt;起始栏位&gt;-&lt;结束栏位&gt;][–help][–verison][文件]<br>补充说明：sort可针对文本文件的内容，以行为单位来排序。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[rocrocket<span class="variable">@rocrocket</span> programming]<span class="variable">$ </span>cat seq.txt</div><div class="line">banana</div><div class="line">apple</div><div class="line">pear</div><div class="line">orange</div><div class="line">[rocrocket<span class="variable">@rocrocket</span> programming]<span class="variable">$ </span>sort seq.txt</div><div class="line">apple</div><div class="line">banana</div><div class="line">orange</div><div class="line">pear</div></pre></td></tr></table></figure></p>
<p>参　　数：<br>  -b   忽略每行前面开始出的空格字符。<br>  -c   检查文件是否已经按照顺序排序。<br>  -d   排序时，处理英文字母、数字及空格字符外，忽略其他的字符。<br>  -f   排序时，将小写字母视为大写字母。<br>  -i   排序时，除了040至176之间的ASCII字符外，忽略其他的字符。<br>  -m   将几个排序好的文件进行合并。<br>  -M   将前面3个字母依照月份的缩写进行排序。<br>  -n   依照数值的大小排序。<br>  -o&lt;输出文件&gt;   将排序后的结果存入指定的文件。<br>  -r   以相反的顺序来排序。<br>  -t&lt;分隔字符&gt;   指定排序时所用的栏位分隔字符。<br>  +&lt;起始栏位&gt;-&lt;结束栏位&gt;   以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。<br>  –help   显示帮助。<br>  –version   显示版本信息</p>
<p>sort的-n、-r、-k、-t选项的使用：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@mail text]</span># <span class="selector-tag">cat</span> <span class="selector-tag">sort</span><span class="selector-class">.txt</span> </div><div class="line"><span class="selector-tag">AAA</span><span class="selector-pseudo">:BB</span><span class="selector-pseudo">:CC</span> </div><div class="line"><span class="selector-tag">aaa</span><span class="selector-pseudo">:30</span><span class="selector-pseudo">:1.6</span> </div><div class="line"><span class="selector-tag">ccc</span><span class="selector-pseudo">:50</span><span class="selector-pseudo">:3.3</span> </div><div class="line"><span class="selector-tag">ddd</span><span class="selector-pseudo">:20</span><span class="selector-pseudo">:4.2</span> </div><div class="line"><span class="selector-tag">bbb</span><span class="selector-pseudo">:10</span><span class="selector-pseudo">:2.5</span> </div><div class="line"><span class="selector-tag">eee</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:5.4</span> </div><div class="line"><span class="selector-tag">eee</span><span class="selector-pseudo">:60</span><span class="selector-pseudo">:5.1</span></div><div class="line"></div><div class="line">#将<span class="selector-tag">BB</span>列按照数字从小到大顺序排列： </div><div class="line"><span class="selector-attr">[root@mail text]</span># <span class="selector-tag">sort</span> <span class="selector-tag">-nk</span> 2 <span class="selector-tag">-t</span>: <span class="selector-tag">sort</span><span class="selector-class">.txt</span> </div><div class="line"><span class="selector-tag">AAA</span><span class="selector-pseudo">:BB</span><span class="selector-pseudo">:CC</span> </div><div class="line"><span class="selector-tag">bbb</span><span class="selector-pseudo">:10</span><span class="selector-pseudo">:2.5</span> </div><div class="line"><span class="selector-tag">ddd</span><span class="selector-pseudo">:20</span><span class="selector-pseudo">:4.2</span> </div><div class="line"><span class="selector-tag">aaa</span><span class="selector-pseudo">:30</span><span class="selector-pseudo">:1.6</span> </div><div class="line"><span class="selector-tag">eee</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:5.4</span> </div><div class="line"><span class="selector-tag">ccc</span><span class="selector-pseudo">:50</span><span class="selector-pseudo">:3.3</span> </div><div class="line"><span class="selector-tag">eee</span><span class="selector-pseudo">:60</span><span class="selector-pseudo">:5.1</span> </div><div class="line"></div><div class="line">#将<span class="selector-tag">CC</span>列数字从大到小顺序排列： </div><div class="line"><span class="selector-attr">[root@mail text]</span># <span class="selector-tag">sort</span> <span class="selector-tag">-nrk</span> 3 <span class="selector-tag">-t</span>: <span class="selector-tag">sort</span><span class="selector-class">.txt</span> </div><div class="line"><span class="selector-tag">eee</span><span class="selector-pseudo">:40</span><span class="selector-pseudo">:5.4</span> </div><div class="line"><span class="selector-tag">eee</span><span class="selector-pseudo">:60</span><span class="selector-pseudo">:5.1</span> </div><div class="line"><span class="selector-tag">ddd</span><span class="selector-pseudo">:20</span><span class="selector-pseudo">:4.2</span> </div><div class="line"><span class="selector-tag">ccc</span><span class="selector-pseudo">:50</span><span class="selector-pseudo">:3.3</span> </div><div class="line"><span class="selector-tag">bbb</span><span class="selector-pseudo">:10</span><span class="selector-pseudo">:2.5</span> </div><div class="line"><span class="selector-tag">aaa</span><span class="selector-pseudo">:30</span><span class="selector-pseudo">:1.6</span> </div><div class="line"><span class="selector-tag">AAA</span><span class="selector-pseudo">:BB</span><span class="selector-pseudo">:CC</span> </div><div class="line"></div><div class="line"># <span class="selector-tag">-n</span>是按照数字大小排序，<span class="selector-tag">-r</span>是以相反顺序，<span class="selector-tag">-k</span>是指定需要爱排序的栏位，<span class="selector-tag">-t</span>指定栏位分隔符为冒号</div></pre></td></tr></table></figure></p>
<h2 id="k选项的具体语法格式："><a href="#k选项的具体语法格式：" class="headerlink" title="-k选项的具体语法格式："></a>-k选项的具体语法格式：</h2><p>-k选项的语法格式：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">FStart</span><span class="string">.</span><span class="comment">CStart</span> <span class="comment">Modifie</span><span class="string">,</span><span class="comment">FEnd</span><span class="string">.</span><span class="comment">CEnd</span> <span class="comment">Modifier</span> </div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">Start</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">,</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">End</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> </div><div class="line">   <span class="comment">FStart</span><span class="string">.</span><span class="comment">CStart</span> <span class="comment">选项</span> <span class="string">,</span> <span class="comment">FEnd</span><span class="string">.</span><span class="comment">CEnd</span> <span class="comment">选项</span></div></pre></td></tr></table></figure></p>
<p>这个语法格式可以被其中的逗号<code>,</code>分为两大部分，Start部分和End部分。Start部分也由三部分组成，其中的Modifier部分就是我们之前说过的类似n和r的选项部分。我们重点说说Start部分的FStart和C.Start。C.Start也是可以省略的，省略的话就表示从本域的开头部分开始。FStart.CStart，其中FStart就是表示使用的域，而CStart则表示在FStart域中从第几个字符开始算“排序首字符”。同理，在End部分中，你可以设定FEnd.CEnd，如果你省略.CEnd，则表示结尾到“域尾”，即本域的最后一个字符。或者，如果你将CEnd设定为0(零)，也是表示结尾到“域尾”。 </p>
<p>从公司英文名称的第二个字母开始进行排序：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sort -t ' ' -k <span class="number">1.2</span> facebook.txt </div><div class="line">baidu <span class="number">100</span> <span class="number">5000</span> </div><div class="line">sohu <span class="number">100</span> <span class="number">4500</span> </div><div class="line">google <span class="number">110</span> <span class="number">5000</span> </div><div class="line">guge <span class="number">50</span> <span class="number">3000</span></div></pre></td></tr></table></figure></p>
<p>使用了<code>-k 1.2</code>，表示对第一个域的第二个字符开始到本域的最后一个字符为止的字符串进行排序。你会发现baidu因为第二个字母是a而名列榜首。sohu和 google第二个字符都是o，但sohu的h在google的o前面，所以两者分别排在第二和第三。guge只能屈居第四了。</p>
<p>只针对公司英文名称的第二个字母进行排序，如果相同的按照员工工资进行降序排序：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sort -t ' ' -k <span class="number">1.2</span>,<span class="number">1.2</span> -nrk <span class="number">3</span>,<span class="number">3</span> facebook.txt </div><div class="line">baidu <span class="number">100</span> <span class="number">5000</span> </div><div class="line">google <span class="number">110</span> <span class="number">5000</span> </div><div class="line">sohu <span class="number">100</span> <span class="number">4500</span> </div><div class="line">guge <span class="number">50</span> <span class="number">3000</span></div></pre></td></tr></table></figure></p>
<p>由于只对第二个字母进行排序，所以我们使用了-k 1.2,1.2的表示方式，表示我们“只”对第二个字母进行排序。（如果你问“我使用-k 1.2怎么不行？”，当然不行，因为你省略了End部分，这就意味着你将对从第二个字母起到本域最后一个字符为止的字符串进行排序）。对于员工工资进行排 序，我们也使用了-k 3,3，这是最准确的表述，表示我们“只”对本域进行排序，因为如果你省略了后面的3，就变成了我们“对第3个域开始到最后一个域位置的内容进行排序” 了。</p>
<hr>
<h1 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h1><p>Linux系统中的wc(Word Count)命令的功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出。</p>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>wc [选项]文件…</p>
<h2 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h2><p>统计指定文件中的字节数、字数、行数，并将统计结果显示输出。该命令统计指定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所指定文件的总统计数。</p>
<h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><p>-c 统计字节数。<br>-l 统计行数。<br>-m 统计字符数。这个标志不能与 -c 标志一起使用。<br>-w 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。<br>-L 打印最长行的长度。<br>-help 显示帮助信息<br>–version 显示版本信息</p>
<h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><h3 id="实例1：查看文件的字节数、字数、行数"><a href="#实例1：查看文件的字节数、字数、行数" class="headerlink" title="实例1：查看文件的字节数、字数、行数"></a>实例1：查看文件的字节数、字数、行数</h3><p>命令：<br>      wc test.txt<br>输出：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[root@localhost test]</span># <span class="selector-tag">cat</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span> </div><div class="line"><span class="selector-tag">hnlinux</span></div><div class="line"><span class="selector-tag">peida</span><span class="selector-class">.cnblogs</span><span class="selector-class">.com</span></div><div class="line"><span class="selector-tag">ubuntu</span></div><div class="line"><span class="selector-tag">ubuntu</span> <span class="selector-tag">linux</span></div><div class="line"><span class="selector-tag">redhat</span></div><div class="line"><span class="selector-tag">Redhat</span></div><div class="line"><span class="selector-tag">linuxmint</span></div><div class="line"><span class="selector-attr">[root@localhost test]</span># <span class="selector-tag">wc</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span></div><div class="line"> 7  8 70 <span class="selector-tag">test</span><span class="selector-class">.txt</span></div><div class="line"><span class="selector-attr">[root@localhost test]</span># <span class="selector-tag">wc</span> <span class="selector-tag">-l</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span> </div><div class="line">7 <span class="selector-tag">test</span><span class="selector-class">.txt</span></div><div class="line"><span class="selector-attr">[root@localhost test]</span># <span class="selector-tag">wc</span> <span class="selector-tag">-c</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span> </div><div class="line">70 <span class="selector-tag">test</span><span class="selector-class">.txt</span></div><div class="line"><span class="selector-attr">[root@localhost test]</span># <span class="selector-tag">wc</span> <span class="selector-tag">-w</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span> </div><div class="line">8 <span class="selector-tag">test</span><span class="selector-class">.txt</span></div><div class="line"><span class="selector-attr">[root@localhost test]</span># <span class="selector-tag">wc</span> <span class="selector-tag">-m</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span> </div><div class="line">70 <span class="selector-tag">test</span><span class="selector-class">.txt</span></div><div class="line"><span class="selector-attr">[root@localhost test]</span># <span class="selector-tag">wc</span> <span class="selector-tag">-L</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span> </div><div class="line">17 <span class="selector-tag">test</span><span class="selector-class">.txt</span></div></pre></td></tr></table></figure></p>
<p>说明：</p>
<table>
<thead>
<tr>
<th>行数</th>
<th>单词数</th>
<th>字节数</th>
<th>文件名</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>8</td>
<td>70</td>
<td>text.txt</td>
</tr>
</tbody>
</table>
<h3 id="实例2：用wc命令怎么做到只打印统计数字不打印文件名"><a href="#实例2：用wc命令怎么做到只打印统计数字不打印文件名" class="headerlink" title="实例2：用wc命令怎么做到只打印统计数字不打印文件名"></a>实例2：用wc命令怎么做到只打印统计数字不打印文件名</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost <span class="keyword">test</span>]# wc -<span class="keyword">l</span> <span class="keyword">test</span>.txt </div><div class="line">7 <span class="keyword">test</span>.txt</div><div class="line">[root@localhost <span class="keyword">test</span>]# <span class="keyword">cat</span> <span class="keyword">test</span>.txt |wc -<span class="keyword">l</span></div></pre></td></tr></table></figure>
<p>说明：<br>使用管道线，这在编写shell脚本时特别有用。</p>
<h3 id="实例3：用来统计当前目录下的文件数"><a href="#实例3：用来统计当前目录下的文件数" class="headerlink" title="实例3：用来统计当前目录下的文件数"></a>实例3：用来统计当前目录下的文件数</h3><p>命令：<br>ls -l | wc -l<br>输出：<br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@localhost test]<span class="comment"># cd test6</span></div><div class="line">[root@localhost test6]<span class="comment"># ll</span></div><div class="line">总计 604</div><div class="line">---xr--r--<span class="number"> 1 </span>root mail <span class="number"> 302108 </span>11-30 08:39 linklog.log</div><div class="line">---xr--r--<span class="number"> 1 </span>mail users<span class="number"> 302108 </span>11-30 08:39 log2012.log</div><div class="line">-rw-r--r--<span class="number"> 1 </span>mail users    <span class="number"> 61 </span>11-30 08:39 log2013.log</div><div class="line">-rw-r--r--<span class="number"> 1 </span>root mail      <span class="number"> 0 </span>11-30 08:39 log2014.log</div><div class="line">-rw-r--r--<span class="number"> 1 </span>root mail      <span class="number"> 0 </span>11-30 08:39 log2015.log</div><div class="line">-rw-r--r--<span class="number"> 1 </span>root mail      <span class="number"> 0 </span>11-30 08:39 log2016.log</div><div class="line">-rw-r--r--<span class="number"> 1 </span>root mail      <span class="number"> 0 </span>11-30 08:39 log2017.log</div><div class="line">[root@localhost test6]<span class="comment"># ls -l | wc -l</span></div><div class="line">8</div><div class="line">[root@localhost test6]<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>说明：<br>数量中包含当前目录</p>
<p><strong>综合示例</strong>:<br><strong>使用linux命令或者shell实现：文件words存放英文单词，格式为以空格分割（单词可以重复），统计这个文件中出现次数最多的前10个单词。</strong><br><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@demo:~$ cat IHavaADream.txt  \</div><div class="line">             | awk -F ' ' '&#123;for(i=1;i&lt;=NF;i++)print $i;&#125;'\</div><div class="line">             | sort | uniq -c | sort -k1,1nr | head -10</div><div class="line">    <span class="number"> 52 </span>of</div><div class="line">    <span class="number"> 48 </span>the</div><div class="line">    <span class="number"> 28 </span>to</div><div class="line">    <span class="number"> 24 </span>and</div><div class="line">    <span class="number"> 21 </span>a</div><div class="line">    <span class="number"> 20 </span>be</div><div class="line">    <span class="number"> 17 </span>will</div><div class="line">    <span class="number"> 14 </span>freedom</div><div class="line">    <span class="number"> 13 </span>have</div><div class="line">    <span class="number"> 13 </span>I</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符串全排列]]></title>
      <url>http://wlyPKU.github.io/2016/08/25/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%85%A8%E6%8E%92%E5%88%97/</url>
      <content type="html"><![CDATA[<p>问题：给定字符串S，生成该字符串的全排列。<br>比如输入为abc，那么输出有以下几种：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">abc</span> acb <span class="keyword">bac </span><span class="keyword">bca </span>cab cba</div></pre></td></tr></table></figure></p>
<p>即如果输入字符串的长度为N的话，会输出N!个结果。<br>本文整理了求字符串全排列的若干方法。</p>
<a id="more"></a>
<h1 id="方法1-使用STL库的标准函数"><a href="#方法1-使用STL库的标准函数" class="headerlink" title="方法1 使用STL库的标准函数"></a>方法1 使用STL库的标准函数</h1><p>C++ STL中提供了std::next_permutation与std::prev_permutation可以获取数字或者是字符的全排列，其中std::next_permutation提供升序、std::prev_permutation提供降序。<br>1.std::next_permutation函数原型<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　template &lt;class <span class="keyword">BidirectionalIterator&gt;</span></div><div class="line">　　<span class="keyword">bool </span>next_permutation (<span class="keyword">BidirectionalIterator </span>first, <span class="keyword">BidirectionalIterator </span>last )<span class="comment">;</span></div><div class="line">　　template &lt;class <span class="keyword">BidirectionalIterator, </span>class <span class="built_in">Compare</span>&gt;</div><div class="line">　　<span class="keyword">bool </span>next_permutation (<span class="keyword">BidirectionalIterator </span>first,<span class="keyword">BidirectionalIterator </span>last, <span class="built_in">Compare</span> comp)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>说明：next_permutation，重新排列范围内的元素[第一，最后一个）返回按照字典序排列的下一个值较大的组合。<br>返回值：如果有一个更高的排列，它重新排列元素，并返回true；如果这是不可能的（因为它已经在最大可能的排列），它按升序排列重新元素，并返回false。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">"aba"</span>;</div><div class="line">    <span class="built_in">std</span>::sort(s.begin(), s.end());</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">'\n'</span>;</div><div class="line">    &#125; <span class="keyword">while</span>(<span class="built_in">std</span>::next_permutation(s.begin(), s.end()));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="方法2-仿STL库的标准函数实现"><a href="#方法2-仿STL库的标准函数实现" class="headerlink" title="方法2 仿STL库的标准函数实现"></a>方法2 仿STL库的标准函数实现</h1><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　[例]字符集&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,较小的数字较先,这样按字典序生成的全排列是:</div><div class="line">     　　　　<span class="number">123,132,213,231</span>,<span class="number">312,321</span></div></pre></td></tr></table></figure>
<p>※ 一个全排列可看做一个字符串，字符串可有前缀、后缀。<br>    生成给定全排列的下一个排列.所谓一个的下一个就是这一个与下一个之间没有其他的。这就要求这一个与下一个有尽可能长的共同前缀，也即变化限制在尽可能短的后缀上。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[例]<span class="number">839647521</span>是<span class="number">1</span>-<span class="number">-9</span>的排列。<span class="number">1</span>—<span class="number">9</span>的排列最前面的是<span class="number">123456789</span>，最后面的<span class="number">987654321</span>，从右向左扫描若都是增的，就到了<span class="number">987654321</span>，也就没有下一个了。否则找出第一次出现下降的位置。</div></pre></td></tr></table></figure></p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">【例】 一般而言，设P是[1,n]的一个全排列。</div><div class="line">　　　　　　P=P1P2…Pn=P1P2…Pj<span class="string">-1</span>PjPj<span class="string">+1</span>…Pk<span class="string">-1</span>PkPk<span class="string">+1</span>…Pn</div><div class="line">　　　　find:　　j=max&#123;i|Pi&lt;Pi<span class="string">+1</span>&#125;</div><div class="line">　　　　　　　　　k=max&#123;i|Pi&gt;Pj&#125;</div><div class="line">　　　　　　1，  对换Pj，Pk，</div><div class="line">　　　　　　2，  将Pj<span class="string">+1</span>…Pk<span class="string">-1</span>PjPk<span class="string">+1</span>…Pn翻转</div><div class="line">         P’= P1P2…Pj<span class="string">-1</span>PkPn…Pk<span class="string">+1</span>PjPk<span class="string">-1</span>…Pj<span class="string">+1</span>即P的下一个</div></pre></td></tr></table></figure>
<p>【例】 如何得到346987521的下一个</p>
<ol>
<li>从尾部往前找第一个P(i-1) &lt; P(i)的位置<br> 3   4   <strong>6</strong> &lt;- 9 &lt;- 8 &lt;- 7 &lt;- 5 &lt;- 2 &lt;- 1<br>最终找到6是第一个变小的数字，记录下6的位置i-1</li>
<li>从i位置往后找到最后一个大于6的数<br>3 4 6 -&gt; 9 -&gt; 8 -&gt; <strong>7</strong> 5 2 1<br>最终找到7的位置，记录位置为m</li>
<li>交换位置i-1和m的值<br>3 4 <strong>7</strong> 9 8 <strong>6</strong> 5 2 1</li>
<li>倒序i位置后的所有数据<br>3 4 7 <strong>1 2 5 6 8 9</strong><br>则347125689为346987521的下一个排列</li>
</ol>
<p>依照上面的讲述不难将代码写出来，如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PermutationList</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fromIndex, endIndex, changeIndex;</div><div class="line">    Sort(<span class="number">0</span>, length - <span class="number">1</span>);</div><div class="line">    <span class="keyword">do</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 输出一种全排列</span></div><div class="line">        Output();</div><div class="line">        fromIndex = endIndex = length - <span class="number">1</span>;</div><div class="line">        <span class="comment">// 向前查找第一个变小的元素</span></div><div class="line">        <span class="keyword">while</span> (fromIndex &gt; <span class="number">0</span> &amp;&amp; words[fromIndex] &lt; words[fromIndex - <span class="number">1</span>]) --fromIndex;</div><div class="line">        changeIndex = fromIndex;</div><div class="line">        <span class="keyword">if</span> (fromIndex == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="comment">// 向后查找最后一个大于words[fromIndex-1]的元素</span></div><div class="line">        <span class="keyword">while</span> (changeIndex + <span class="number">1</span> &lt; length &amp;&amp; words[changeIndex + <span class="number">1</span>] &gt; words[fromIndex - <span class="number">1</span>]) ++changeIndex;</div><div class="line">        Swap(fromIndex - <span class="number">1</span>, changeIndex);   <span class="comment">// 交换两个值</span></div><div class="line">        InvertArray(fromIndex, endIndex);   <span class="comment">// 对后面的所有值进行反向处理</span></div><div class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="方法3-递归方法求全排列"><a href="#方法3-递归方法求全排列" class="headerlink" title="方法3 递归方法求全排列"></a>方法3 递归方法求全排列</h1><p>　　递归方法很容易理解：分别将每个位置交换到最前面位，之后全排列剩下的位。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">【例】递归全排列 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></div><div class="line">    <span class="number">1.</span> for循环将每个位置的数据交换到第一位</div><div class="line">  		 swap(<span class="number">1</span>,<span class="number">1</span>~<span class="number">5</span>)</div><div class="line">	<span class="number">2.</span> 按相同的方式全排列剩余的位</div></pre></td></tr></table></figure></p>
<h2 id="递归全排列1"><a href="#递归全排列1" class="headerlink" title="递归全排列1"></a>递归全排列1</h2><p>由于递归方法很容易理解，而且网上也有很多的资料，所以不过多讲述，代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">      <span class="comment"><span class="doctag">///</span> 递归方式生成全排列的方法 3-1</span></div><div class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="fromIndex"&gt;</span>全排列的起始位置<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">      <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="endIndex"&gt;</span>全排列的终止位置<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PermutationList</span>(<span class="params"><span class="keyword">int</span> fromIndex, <span class="keyword">int</span> endIndex</span>)</span></div><div class="line">      &#123;</div><div class="line">          <span class="keyword">if</span> (fromIndex == endIndex)</div><div class="line">              Output();</div><div class="line">          <span class="keyword">else</span></div><div class="line">          &#123;</div><div class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> index = fromIndex; index &lt;= endIndex; ++index)</div><div class="line">              &#123;</div><div class="line">                  <span class="comment">//此处排序主要是为了生成字典序全排列，否则递归会打乱字典序</span></div><div class="line">                  sort(fromIndex, endIndex);</div><div class="line">                  Swap(fromIndex, index);</div><div class="line">                  PermutationList(fromIndex + <span class="number">1</span>, endIndex);</div><div class="line">                  Swap(fromIndex, index);</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>不过<strong>需要注意,如果不加入第15行的<code>sort(fromIndex, endIndex);</code>那么生成的全排列就是非完全升序的</strong>.</p>
<div align="center"><br><img src="/2016/08/25/字符串全排列/outorder-permutation.jpg" alt="outorder-permutation.jpg" title=""><br></div>

<p>同时可以对进行修改,使其生成的全排列是完全升序的</p>
<h2 id="递归全排列2"><a href="#递归全排列2" class="headerlink" title="递归全排列2"></a>递归全排列2</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line"><span class="keyword">void</span> p(<span class="built_in">char</span>* <span class="built_in">str</span>, <span class="built_in">int</span> i, <span class="built_in">int</span> <span class="built_in">size</span>)</div><div class="line">&#123;</div><div class="line">	<span class="comment">//到达字符串末尾则停止并输出 </span></div><div class="line">	<span class="keyword">if</span>(i == <span class="built_in">size</span>)</div><div class="line">	&#123;</div><div class="line">		cout &lt;&lt; <span class="built_in">str</span> &lt;&lt; endl;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="built_in">int</span> j = i; j &lt; <span class="built_in">size</span>; j++)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">//置换; </span></div><div class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> k = j; k &gt; i; k--)</div><div class="line">		&#123;</div><div class="line">			swap(<span class="built_in">str</span>[k], <span class="built_in">str</span>[k - <span class="number">1</span>]);</div><div class="line">		&#125;</div><div class="line">		p(<span class="built_in">str</span>, i + <span class="number">1</span>, <span class="built_in">size</span>);</div><div class="line">		<span class="comment">//置换; </span></div><div class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> k = i; k &lt; j; k++)</div><div class="line">		&#123;</div><div class="line">			swap(<span class="built_in">str</span>[k], <span class="built_in">str</span>[k + <span class="number">1</span>]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">int</span> main()</div><div class="line">&#123;</div><div class="line">	<span class="built_in">char</span> <span class="built_in">str</span>[<span class="number">7</span>];</div><div class="line">	cin &gt;&gt; <span class="built_in">str</span>;</div><div class="line">	<span class="built_in">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</div><div class="line">	<span class="comment">//判断字符长度 </span></div><div class="line">	<span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">str</span>[i] == <span class="string">'\0'</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">size</span> = i;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	p(<span class="built_in">str</span>, <span class="number">0</span>, <span class="built_in">size</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="方法4-递归方法求全排列2"><a href="#方法4-递归方法求全排列2" class="headerlink" title="方法4 递归方法求全排列2"></a>方法4 递归方法求全排列2</h1><p>思路是这样的：我们维护两个序列，一个序列是要进行全排列的序列，我们暂称之为源序列，另一个序列是全排列之后的结果序列，我们称其为结果序列。过程如下：</p>
<ol>
<li>初始时源序列为输入的字符串序列，结果序列为空</li>
<li><p>如果源序列中的元素个数大于1，则对源序列中的每一个元素，进行如下操作：</p>
<ol>
<li>以结果序列+该元素生成新的结果序列</li>
<li>将该元素从源序列中剔除并保持其他元素顺序不变生成新的源序列</li>
</ol>
<p>然后以I产生的结果序列和II产生的源序列为基础递归2）过程</p>
</li>
<li>如果源序列中元素个数不大于1，则打印结果序列+源序列</li>
</ol>
<p>下面给出了该思路的C++实现，参考[1][2]<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> permutation(<span class="keyword">string</span> <span class="built_in">begin</span>, <span class="keyword">string</span> <span class="built_in">end</span>)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> endLength = <span class="built_in">end</span>.<span class="built_in">size</span>(), beginLength = <span class="built_in">begin</span>.<span class="built_in">size</span>();</div><div class="line">	<span class="built_in">if</span>(endLength == <span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		cout &lt;&lt; <span class="built_in">begin</span> &lt;&lt; <span class="built_in">end</span> &lt;&lt; endl;</div><div class="line">		<span class="built_in">return</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">string</span> newEnd;</div><div class="line">	<span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; endLength; i++)</div><div class="line">	&#123;</div><div class="line">		newEnd = <span class="built_in">end</span>.substr(<span class="number">0</span>, i) + <span class="built_in">end</span>.substr(i+<span class="number">1</span>);</div><div class="line">		permutation(<span class="built_in">begin</span> + <span class="built_in">end</span>[i], newEnd);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> main()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">string</span> str;</div><div class="line">	<span class="keyword">string</span> n = <span class="string">""</span>;</div><div class="line">	cin &gt;&gt; str;</div><div class="line">	permutation(n, str);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<div align="center"><br><img src="/2016/08/25/字符串全排列/inorder-permutation.png" alt="inorder-permutation.png" title=""><br></div>

<p>综上,文章介绍了四种字符串全排列的方法:</p>
<ul>
<li>去重: 方法1,方法2</li>
<li>不去重按序：方法3-2,方法4</li>
<li>不去重不排序：方法3-1</li>
</ul>
<p>参考:</p>
<ol>
<li><a href="http://www.java2s.com/Tutorial/Java/0100__Class-Definition/RecursivemethodtofindallpermutationsofaString.htm" target="_blank" rel="external">Recursive method to find all permutations of a String</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_6fb300a30100mvzp.html" target="_blank" rel="external">关于全排列算法的思考</a></li>
<li><a href="http://www.cnblogs.com/pmars/archive/2013/12/04/3458289.html" target="_blank" rel="external">字典序全排列算法研究</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二分查找]]></title>
      <url>http://wlyPKU.github.io/2016/08/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      <content type="html"><![CDATA[<p> 二分查找算法是在有序数组中用到的较为频繁的一种算法，在未接触二分查找算法时，最通用的一种做法是，对数组进行遍历，跟每个元素进行比较，其时间为O(n).但二分查找算法则更优，因为其查找时间为O(lgn)，譬如数组{1， 2， 3， 4， 5， 6， 7， 8， 9}，查找元素6，用二分查找的算法执行的话，其顺序为：</p>
<ol>
<li>第一步查找中间元素，即5，由于5&lt;6，则6必然在5之后的数组元素中，那么就在{6， 7， 8， 9}中查找,</li>
<li>寻找{6， 7， 8， 9}的中位数，为7,7&gt;6，则6应该在7左边的数组元素中，那么只剩下6，即找到了。</li>
</ol>
<a id="more"></a>
<p>二分查找算法就是不断将数组进行对半分割，每次拿中间元素和goal进行比较。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> findTarget(<span class="keyword">int</span> *<span class="keyword">array</span>, <span class="keyword">int</span> <span class="built_in">begin</span>, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> target)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">while</span>(<span class="built_in">begin</span> &lt;= <span class="built_in">end</span>)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">int</span> pMid = <span class="built_in">begin</span> + (<span class="built_in">begin</span> - <span class="built_in">end</span>) / <span class="number">2</span>;</div><div class="line">        <span class="built_in">if</span>(<span class="keyword">array</span>[pMid] == target)</div><div class="line">        &#123;</div><div class="line">        	<span class="built_in">return</span> pMid;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">else</span> <span class="built_in">if</span>(<span class="keyword">array</span>[pMid] &gt; target)</div><div class="line">        &#123;</div><div class="line">        	<span class="built_in">end</span> = pMid - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">else</span></div><div class="line">        &#123;</div><div class="line">        	<span class="built_in">begin</span> = pMid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> main()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> length, target;</div><div class="line">    cin &gt;&gt; length;</div><div class="line">    <span class="keyword">int</span> <span class="keyword">array</span>[<span class="number">1000</span>];</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</div><div class="line">    &#123;</div><div class="line">    	cin &gt;&gt; <span class="keyword">array</span>[i];</div><div class="line">    &#125;</div><div class="line">    sort(<span class="keyword">array</span>, length + <span class="keyword">array</span>);</div><div class="line">    cin &gt;&gt; target;</div><div class="line">    cout &lt;&lt; findlastTarget(<span class="keyword">array</span>, <span class="number">0</span>, num - <span class="number">1</span>, target) &lt;&lt; endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>大家对于二分查找并不陌生，一般意义上的二分查找，往往返回给我们的是目标元素在排序数组中出现的一个随机的位置，但是在很多时候，我们却是需要目标元素的第一个和最后一个位置，才有意义。举个例子来说，我们要求得目标元素在排序数组中出现的次数，假如利用一般的方法，逐个比较目标元素和数组元素，时间复杂度<code>O(n)</code>，不能够令我们满意，既然数组是排序的我们很容易想到二分查找，在这里我们能不能使用二分查找的算法呢，答案是肯定的。只要我们能够利用二分查找找到目标元素出现的第一个和最后一个位置，就能够求得它出现的次数。我们如何来求得目标元素出现的第一个和最后一个位置呢，其实很简单，我们只需要对于二分查找的退出条件，做一个简单的设定就能得到我们理想的结果哦！<br>下面我们来看一下代码:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> find1stTarget(<span class="keyword">int</span> *<span class="keyword">array</span>, <span class="keyword">int</span> <span class="built_in">begin</span>, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> target)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">while</span>(<span class="built_in">begin</span> &lt; <span class="built_in">end</span>)</div><div class="line">    &#123;</div><div class="line">    	<span class="keyword">int</span> pMid = (<span class="built_in">begin</span> + <span class="built_in">end</span>) / <span class="number">2</span>;</div><div class="line">        <span class="built_in">if</span>(<span class="keyword">array</span>[pMid] &lt; target)</div><div class="line">        &#123;</div><div class="line">        	<span class="built_in">begin</span> = pMid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">else</span></div><div class="line">        &#123;</div><div class="line">        	<span class="built_in">end</span> = pMid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">if</span>(<span class="keyword">array</span>[<span class="built_in">begin</span>] == target)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">return</span> <span class="built_in">begin</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里跟一般的二分查找的代码相比，仅仅是判断语句上做了一点细微的变化，序列是递增排列的，当中间值小于目标元素的时候，目标元素在序列的右边：begin = pMid + 1;其余的情况目标值在序列的左边：end = pMid；我们要查找的第一个目标元素的位置，一般的情况就是目标元素存在多个情况，由上述的两个判断条件，我们可以知道，如果查找到了目标元素，并且该目标元素不是第一个的时候，此时继续执行向左查找，而不终止，直到找到第一个元素为止。<br>同理，寻找最后一个元素也是:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> findlastTarget(<span class="keyword">int</span> *<span class="keyword">array</span>, <span class="keyword">int</span> <span class="built_in">begin</span>, <span class="keyword">int</span> <span class="built_in">end</span>, <span class="keyword">int</span> target)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">while</span>(<span class="built_in">begin</span> &lt; <span class="built_in">end</span>)</div><div class="line">	&#123;</div><div class="line">        <span class="keyword">int</span> pMid = (<span class="built_in">begin</span> + <span class="built_in">end</span> + <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">//保证取到中间靠后的位置</span></div><div class="line">        <span class="built_in">if</span>(<span class="keyword">array</span>[pMid] &gt; target)</div><div class="line">		&#123;</div><div class="line">            <span class="built_in">end</span> = pMid - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">		<span class="built_in">else</span></div><div class="line">		&#123;</div><div class="line">            <span class="built_in">begin</span> = pMid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">if</span>(<span class="keyword">array</span>[<span class="built_in">begin</span>] == target)</div><div class="line">    &#123;</div><div class="line">    	<span class="built_in">return</span> <span class="built_in">begin</span>;</div><div class="line">	&#125;</div><div class="line">    <span class="built_in">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>大家可以看出，跟我们取第一个元素时候的判断条件恰好相反，而两种情况处理的方式我们可以归结为以下两句话：</p>
<ol>
<li><p><strong>当我们要找到目标元素出现的第一个位置时候：当中间值大于等于目标元素的时候，我们要保留当前中间值的位置，并且在左边继续查找。</strong><br>这句话用条件语句表述就是：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">array</span>[pMid] &lt; target)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">begin</span> = pMid + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>当我们要找目标元素出现的最后一个位置的时候：当中间值小于等于目标元素的时候，我们要保留中间值的位置，并且在右边继续查找。</strong></p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">array</span>[pMid] &gt; target)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">end</span> = pMid - <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>同时注意为了取到稍后的元素,需要执行<code>int pMid = (begin + end + 1) / 2;</code>,保证取到中间靠后的位置.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STL总结]]></title>
      <url>http://wlyPKU.github.io/2016/08/23/STL%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>STL（Standard Template Library，标准模板库)是惠普实验室开发的一系列软件的统称。它是由Alexander Stepanov、Meng Lee和David R Musser在惠普实验室工作时所开发出来的。现在虽说它主要出现在C++中，但在被引入C++之前该技术就已经存在了很长的一段时间。<br>组成的库来说提供了更好的代码重用机会。在C++标准中，STL被组织为下面的13个头文件：<code>&lt;algorithm&gt;</code>、<code>&lt;deque&gt;</code>、<code>&lt;functional&gt;</code>、<code>&lt;iterator&gt;</code>、<code>&lt;vector&gt;</code>、<code>&lt;list&gt;</code>、<code>&lt;map&gt;</code>、<code>&lt;memory&gt;</code>、<code>&lt;numeric&gt;</code>、<code>&lt;queue&gt;</code>、<code>&lt;set&gt;</code>、<code>&lt;stack&gt;</code>和<code>&lt;utility&gt;</code>。<br>STL可分为容器(containers)、迭代器(iterators)、空间配置器(allocator)、配接器(adapters)、算法(algorithms)、仿函数(functors)六个部分。<br>本文就是主要介绍STL的基本内容。<br><a id="more"></a></p>
<h1 id="序列容器"><a href="#序列容器" class="headerlink" title="序列容器"></a>序列容器</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">容器里的元素是有位置的,有前有后</div></pre></td></tr></table></figure>
<h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">静态连续数组.</div><div class="line"><span class="symbol">C</span>++<span class="number">11</span>中新增.</div><div class="line">大小是固定的,不能改变.</div><div class="line">和<span class="symbol">C</span>语言中本来支持的数组[]特性类似;</div><div class="line">支持随机存取, 支持容器都支持的迭代器操作,支持判断数组中元素的数量等操作;</div></pre></td></tr></table></figure>
<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">动态连续数组.</div><div class="line">大小可变</div><div class="line">使用的内存是连续的.</div><div class="line">所以支持随机存取</div><div class="line">在末端的增删操作性能好,但是中间的插入删除性能差.</div></pre></td></tr></table></figure>
<p>示例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">v.push_back(<span class="number">1</span>);</div><div class="line">v.push_back(<span class="number">2</span>);</div><div class="line">v.push_back(<span class="number">3</span>);</div><div class="line">v.pop_back();</div><div class="line">v.push_back(<span class="number">4</span>);</div><div class="line"><span class="built_in">cout</span> &lt;&lt; v.front() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ite = v.begin(); ite != v.end(); ite++)&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; *ite &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">&#125;</div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">双头队列<span class="comment">;</span></div><div class="line">可在头部和尾部插入删除<span class="comment">;</span></div><div class="line">使用的内存是不连续的, 但是一段一段的<span class="comment">;</span></div><div class="line">随机存取时间复杂度为o(<span class="number">1</span>)<span class="comment">;</span></div><div class="line">头尾插入删除基本也是o(<span class="number">1</span>)<span class="comment">;</span></div><div class="line">插入删除任意元素是o(n)</div></pre></td></tr></table></figure>
<h2 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">单向链表<span class="comment">;</span></div><div class="line">c++<span class="number">11</span>中新增<span class="comment">;</span></div><div class="line">不支持随机存取<span class="comment">;</span></div><div class="line">列表里增加,删除,移动一个元素, 不会使得指向其他元素的迭代器失效, 只会使自己失效<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">双向链表</div><div class="line">插入删除元素常量时间<span class="comment">;</span></div><div class="line">增加, 删除, 移动元素, 不会使得其他元素的迭代器失效<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>示例<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l;</div><div class="line">l.push_back(<span class="number">1</span>);</div><div class="line">l.push_back(<span class="number">2</span>);</div><div class="line">l.push_front(<span class="number">3</span>);</div><div class="line">l.insert(l.begin(),<span class="number">4</span>);</div><div class="line">l.insert(l.end(), <span class="number">5</span>);</div><div class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = find(l.begin(), l.end(), <span class="number">1</span>);</div><div class="line"><span class="keyword">if</span>(iter != l.end())</div><div class="line">&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found 1 in the list."</span> &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">&#125; </div><div class="line"><span class="keyword">for</span>(iter = l.begin(); iter != l.end(); iter++)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出</span></div><div class="line">Found <span class="number">1</span> in the <span class="built_in">list</span>.</div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure></p>
<h1 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h1><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">关联容器里的值,都按照某种规则<span class="comment">(元素值的大小)</span>进行了排序;</div></pre></td></tr></table></figure>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">集合</div><div class="line">包含的都是关键字, 每个都是唯一的;</div><div class="line">搜索, 删除 , 插入的时间复杂度是o(<span class="built_in">log</span>(<span class="built_in">n</span>))</div></pre></td></tr></table></figure>
<p>示例<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span>&lt;int&gt; <span class="keyword">se</span>;</div><div class="line"><span class="keyword">se</span>.insert(1);</div><div class="line"><span class="keyword">se</span>.insert(2);</div><div class="line"><span class="keyword">se</span>.insert(3);</div><div class="line"><span class="keyword">se</span>.insert(4);</div><div class="line"><span class="keyword">se</span>.<span class="keyword">erase</span>(3);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">set</span>&lt;int&gt;::iterator it = <span class="keyword">se</span>.begin(); it != <span class="keyword">se</span>.end(); it++)</div><div class="line">&#123;</div><div class="line">	cout &lt;&lt; *it &lt;&lt; endl;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出</span></div><div class="line">1</div><div class="line">2</div><div class="line">4</div></pre></td></tr></table></figure></p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">映射</div><div class="line">包含的元素都是关键字-值, 按照关键字进行了排序</div><div class="line">搜索, 删除, 插入的时间复杂度是o(<span class="built_in">log</span>(<span class="built_in">n</span>))</div><div class="line">常用红黑树实现;</div></pre></td></tr></table></figure>
<p>示例<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; m;</div><div class="line">m.insert(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::value_type(<span class="string">"()"</span>, <span class="number">0</span>));</div><div class="line">m.insert(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::value_type(<span class="string">"*"</span>, <span class="number">1</span>));</div><div class="line">m.insert(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::value_type(<span class="string">"-"</span>, <span class="number">2</span>));</div><div class="line">m.insert(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::value_type(<span class="string">"/"</span>, <span class="number">1</span>));</div><div class="line">m.insert(<span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::value_type(<span class="string">"+"</span>, <span class="number">2</span>));</div><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator ite = m.find(<span class="string">"+"</span>);</div><div class="line"><span class="keyword">if</span>(ite != m.end())</div><div class="line">&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found \"+\" value "</span> &lt;&lt; (*ite).second &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator ite = m.begin(); ite != m.end(); ite++)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; (*ite).first &lt;&lt; <span class="string">" "</span> &lt;&lt; (*ite).second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出(字典序: () &lt; * &lt; + &lt; - &lt; /)</span></div><div class="line">Found <span class="string">"+"</span> value <span class="number">2</span></div><div class="line">() <span class="number">0</span></div><div class="line">* <span class="number">1</span></div><div class="line">+ <span class="number">2</span></div><div class="line">- <span class="number">2</span></div><div class="line">/ <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h2 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">可重复集合<span class="comment">;</span></div><div class="line">可以有等值的元素存在<span class="comment">;</span></div><div class="line">c++<span class="number">11</span>中新增<span class="comment">;</span></div><div class="line">等值的元素, 按照插入顺序<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">可重复映射</div><div class="line">包含的元素中, 允许关键字相等</div><div class="line">c++<span class="number">11</span>中新增<span class="comment">;</span></div><div class="line">关键字等值的元素, 按照插入顺序<span class="comment">;</span></div></pre></td></tr></table></figure>
<h1 id="无序关联容器"><a href="#无序关联容器" class="headerlink" title="无序关联容器"></a>无序关联容器</h1><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">容器中的值</span><span class="string">,</span> <span class="comment">不进行排序;</span></div><div class="line"><span class="comment">都是c</span><span class="literal">+</span><span class="literal">+</span><span class="comment">11中新增</span></div></pre></td></tr></table></figure>
<h2 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">无序集合<span class="comment">;</span></div><div class="line">等值的元素唯一<span class="comment">;</span></div><div class="line">搜索, 插入, 删除的时间复杂度为常量<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">无序映射<span class="comment">;</span></div><div class="line">关键字等值的元素唯一<span class="comment">;</span></div><div class="line">搜索, 插入, 删除的时间复杂度为常量<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="unordered-multiset"><a href="#unordered-multiset" class="headerlink" title="unordered_multiset"></a>unordered_multiset</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">无序的可重复集合</div><div class="line">可以容纳等值的元素</div><div class="line">元素不排序</div><div class="line">搜索,插入,删除的时间复杂度为常量</div></pre></td></tr></table></figure>
<h2 id="unordered-multimap"><a href="#unordered-multimap" class="headerlink" title="unordered_multimap"></a>unordered_multimap</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">无序可重复映射</div><div class="line">可以容纳关键字等值的元素<span class="comment">;</span></div><div class="line">不排序<span class="comment">;</span></div><div class="line">搜索, 插入, 删除的时间复杂度为常量<span class="comment">;</span></div></pre></td></tr></table></figure>
<h1 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">为序列容器提供了不一样的接口</div></pre></td></tr></table></figure>
<h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LIFO栈</div></pre></td></tr></table></figure>
<p>示例<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">s.push(<span class="number">1</span>);</div><div class="line">s.push(<span class="number">2</span>);</div><div class="line">s.push(<span class="number">3</span>);</div><div class="line">s.pop();</div><div class="line"><span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">while</span>(!s.empty())</div><div class="line">&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	s.pop();</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></p>
<h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FIFO队列</div></pre></td></tr></table></figure>
<p>示例<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">q.push(<span class="number">1</span>);</div><div class="line">q.push(<span class="number">2</span>);</div><div class="line">q.push(<span class="number">3</span>);</div><div class="line">q.pop();</div><div class="line">q.push(<span class="number">4</span>);</div><div class="line"><span class="built_in">cout</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">while</span>(!q.empty())</div><div class="line">&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	q.pop();</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure></p>
<h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">队列的第一个元素总是最大的那个</div></pre></td></tr></table></figure>
<p>示例<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; pq;</div><div class="line">pq.push(<span class="number">4</span>);</div><div class="line">pq.push(<span class="number">1</span>);</div><div class="line">pq.push(<span class="number">2</span>);</div><div class="line">pq.push(<span class="number">3</span>);</div><div class="line">pq.pop();</div><div class="line"><span class="built_in">cout</span> &lt;&lt; pq.top() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">while</span>(!pq.empty())</div><div class="line">&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; pq.top() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	pq.pop();</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure></p>
<h1 id="容器的线程安全性"><a href="#容器的线程安全性" class="headerlink" title="容器的线程安全性"></a>容器的线程安全性</h1><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">总体来说, 容器的线程安全是不靠谱的, 专家们说, 别靠容器自己来保证线程安全.</div></pre></td></tr></table></figure>
<p><ul></ul></p>
<p><li>对于不同的线程,可以同时用任何函数(不是成员函数哦)访问不同的容器(似乎有些废话); </li></p>
<p><li>对于不同的线程,可以同时访问相同容器的只读成员函数;</li></p>
<p><li>不同的线程, 可以同时修改同一容器中的不同元素, 除了vector&lt;bool&gt;</li></p>
<p><li>Elements of the same container can be modified concurrently with those member functions that are not specified to access these elements. More generally, the C++ standard library functions do not read objects indirectly accessible through their arguments (including other elements of a container) except when required by its specification.</li></p>
<p><li>In any case, container operations (as well as algorithms, or any other C++ standard library functions) may be parallelized internally as long as this does not change the user-visible results (e.g. std::transform may be parallelized, but not std::for_each which is specified to visit each element of a sequence in order)</li><br></p>
<p></p><p>最终是一张大表:</p><br><img src="/2016/08/23/STL总结/c++.png" alt="c++.png" title=""><p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git && SVN 安装]]></title>
      <url>http://wlyPKU.github.io/2016/08/23/Git-SVN-%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>为了利于版本控制与合作,可以选择在自己的机器上搭建Git和SVN的版本控制,本文是在服务器上配置Git服务器与SVN服务器、http访问的简单教程。<br><a id="more"></a></p>
<h1 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h1><p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。<br>搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。</p>
<h2 id="安装及初始化"><a href="#安装及初始化" class="headerlink" title="安装及初始化"></a>安装及初始化</h2><p>假设你已经有sudo权限的用户账号，下面开始安装。</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install git</div></pre></td></tr></table></figure>
<h3 id="创建一个git用户，用来运行git服务"><a href="#创建一个git用户，用来运行git服务" class="headerlink" title="创建一个git用户，用来运行git服务"></a>创建一个git用户，用来运行git服务</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">sudo</span> <span class="keyword">adduser </span>git</div></pre></td></tr></table></figure>
<h3 id="创建证书登录"><a href="#创建证书登录" class="headerlink" title="创建证书登录"></a>创建证书登录</h3><pre><code>收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
</code></pre><p>使用命令：<code>ssh-keygen –t rsa</code>生成密钥，如下图<br><img src="/2016/08/23/Git-SVN-安装/rsa.jpg" alt="rsa.jpg" title=""><br>完成之后，在.ssh目录下，我们可以看到id_rsa和id_rsa.pub文件，id_rsa.pub为公钥.我们首先查看/home/git/.ssh目录下是否存在authorized_kesys文件，<br>如果没有，可以通过<code>touch authorized_keys</code>创建此文件。<br>Authorized_keys创建完成后，将生成的公钥id_rsa.pub的内容追 加到authroized_keys中,注意是<strong>追加</strong>到此文件中，可以使用命令<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat <span class="regexp">/home/gi</span>t<span class="regexp">/id_rsa.pub&gt;&gt;/</span>home<span class="regexp">/git/</span>.ssh<span class="regexp">/authorized_keys</span></div></pre></td></tr></table></figure></p>
<h2 id="创建repository及设置权限"><a href="#创建repository及设置权限" class="headerlink" title="创建repository及设置权限"></a>创建repository及设置权限</h2><h3 id="初始化Git仓库"><a href="#初始化Git仓库" class="headerlink" title="初始化Git仓库"></a>初始化Git仓库</h3><p>先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo git init <span class="comment">--bare sample.git</span></div></pre></td></tr></table></figure></p>
<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">chown</span> <span class="selector-tag">-R</span> <span class="selector-tag">git</span><span class="selector-pseudo">:git</span> <span class="selector-tag">sample</span><span class="selector-class">.git</span></div></pre></td></tr></table></figure></p>
<h3 id="禁用shell登录"><a href="#禁用shell登录" class="headerlink" title="禁用shell登录"></a>禁用shell登录</h3><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：<code>git:x:1001:1001:,,,:/home/git:/bin/bash</code><br>改为：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git:</span><span class="symbol">x:</span><span class="number">1001</span><span class="symbol">:</span><span class="number">1001</span><span class="symbol">:</span>,,,<span class="symbol">:/home/git</span><span class="symbol">:/usr/bin/git-shell</span></div></pre></td></tr></table></figure></p>
<p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>
<h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><p>现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone git<span class="variable">@server:</span>/srv/sample.git</div><div class="line">Cloning into <span class="string">'sample'</span>...</div><div class="line"><span class="attribute">warning</span>: You appear to have cloned an empty repository.</div></pre></td></tr></table></figure></p>
<h2 id="常见git指令"><a href="#常见git指令" class="headerlink" title="常见git指令"></a>常见git指令</h2><p>通过以上的步骤我们就完成了git服务器的搭建，完成搭建后，我们需要了解一下与git服务器交互过程中所用到命令。主要命令有 git clone、git remote、git fetch、git pull、git push等，下面我们逐一了解</p>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>此命令是我们和远程仓库交互的第一步，通过此命令，我们可以将远程版本库克隆到本地.<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#本地库名称可以省略，省略后在本地会生成一个和远程版本库名字相同的目录。</span></div><div class="line">git <span class="keyword">clone</span> <span class="title">版本库的网址 本地库名称</span></div></pre></td></tr></table></figure></p>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>此命令用于管理远程主机名，此命令在没有参数的情况下可以列出所有主机名。<br>显示origin是在使用clone命令，克隆远程版本库时Git自动为远程主机命名。<br>通过命令 git remote –v，可查看版本库的网址。</p>
<h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><p>此命令可以将远程版本库的更新，更新到本地库。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git</span> fetch 主机名字</div></pre></td></tr></table></figure></p>
<p>在默认情况下，git fetch origin将会更新远程主机origin上的所有分支，如果只想更新某个分支，则在主机名origin后面加分支名。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch origin <span class="literal">master</span></div></pre></td></tr></table></figure></p>
<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p>此命令用于将本地分支的更新推送到远程主机。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">git</span> <span class="keyword">push </span>远程主机名 本地分支名：远程分支名</div></pre></td></tr></table></figure></p>
<p>如果省略远程分支名，则表示将本地分支推送与存在最终关系的远程分支，如果远程分支不存在，则会被新建。<br>如：<code>git push origin master</code>,表示将本地master分支推送到origin主机的master分支上。<br>如果省略本地分子名，则表示要删除远程主机中分支，如<code>git push origin : master</code>,则表示删除origin主机中master分支</p>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>此命令用于获取远程分支中更新。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git pull 远程主机 远程分支：本地分支</div><div class="line">#如：git pull <span class="built_in">origin</span> master:master,表示将远程主机<span class="built_in">origin</span>中的master分支跟新到本地分支master</div></pre></td></tr></table></figure></p>
<p>参考:</p>
<ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="external">搭建Git服务器</a></li>
<li><a href="http://developer.51cto.com/art/201507/483448.htm" target="_blank" rel="external">Git服务器搭建全过程分步详解</a></li>
</ul>
<hr>
<h1 id="SVN安装"><a href="#SVN安装" class="headerlink" title="SVN安装"></a>SVN安装</h1><h2 id="安装SVN"><a href="#安装SVN" class="headerlink" title="安装SVN"></a>安装SVN</h2><h3 id="更新apt-get源-安装时开始就是没更新源-版本不一致弄了好久"><a href="#更新apt-get源-安装时开始就是没更新源-版本不一致弄了好久" class="headerlink" title="更新apt-get源(安装时开始就是没更新源,版本不一致弄了好久)"></a>更新apt-get源(安装时开始就是没更新源,版本不一致弄了好久)</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></div></pre></td></tr></table></figure>
<h3 id="安装所需的文件"><a href="#安装所需的文件" class="headerlink" title="安装所需的文件"></a>安装所需的文件</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install subversion libapache2-<span class="keyword">mod</span>-svn libapache2-svn apache2</div></pre></td></tr></table></figure>
<h3 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">groupadd subversion</span></div></pre></td></tr></table></figure>
<h3 id="创建一个svn实例"><a href="#创建一个svn实例" class="headerlink" title="创建一个svn实例"></a>创建一个svn实例</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> /<span class="built_in">home</span>/svn/ </div><div class="line">svnadmin create example</div></pre></td></tr></table></figure>
<h3 id="修改-etc-apache2-mods-enabled-dav-svn-conf"><a href="#修改-etc-apache2-mods-enabled-dav-svn-conf" class="headerlink" title="修改/etc/apache2/mods-enabled/dav_svn.conf:"></a>修改/etc/apache2/mods-enabled/dav_svn.conf:</h3><p>去掉下面行的注释。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="params">&lt;Location /svn&gt;</span>   （apache下的位置）</div><div class="line">  DAV svn </div><div class="line">  SVNParentPath <span class="meta-keyword">/home/</span>svn   （如果有多个库，使用该选项）</div><div class="line">  SVNListParentPath on     （打开这个选项可以列出ParentPath下面的所有库）</div><div class="line">  AuthType Basic   （认证类型为基本认证 ）</div><div class="line">  AuthName <span class="string">"Subversion Repository"</span>（认证名称,将在IE界面弹出一个对话框,其标题）</div><div class="line">  AuthUserFile <span class="meta-keyword">/etc/</span>apache2/dav_svn.passwd    （认证密码文件）</div><div class="line">  <span class="meta"># AuthzSVNAcessFile /etc/apache2/dav_svn.authz     （目录权限文件）</span></div><div class="line"></div><div class="line">  Require valid-user    （要求验证用户，即不能匿名访问）</div><div class="line"><span class="params">&lt;/Location&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h2><p>下为加入新的SVN时需要执行的步骤:<br>目标:新加一个名为zhangzhipeng的版本库，并将用户名zhangzhipeng加入到svn用户中</p>
<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /<span class="built_in">home</span>/svn</div><div class="line">sudo <span class="built_in">mkdir</span> zhangzhipeng</div></pre></td></tr></table></figure>
<h3 id="将用户名加入subversion组中"><a href="#将用户名加入subversion组中" class="headerlink" title="将用户名加入subversion组中"></a>将用户名加入subversion组中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">groups zhangzhipeng    <span class="comment"># 先查看是否已在组中</span></div><div class="line">zhangzhipeng : zhangzhipeng</div><div class="line">sudo usermod -G subversion <span class="_">-a</span> zhangzhipeng</div><div class="line">groups zhangzhipeng    <span class="comment"># 现在可以看到多加了个组别</span></div></pre></td></tr></table></figure>
<h3 id="为刚才所建目录新建版本库，并添加对应权限"><a href="#为刚才所建目录新建版本库，并添加对应权限" class="headerlink" title="为刚才所建目录新建版本库，并添加对应权限"></a>为刚才所建目录新建版本库，并添加对应权限</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo svnadmin create /home/svn/zhangzhipeng</div><div class="line">sudo <span class="keyword">chown</span> -R www-data:subversion zhangzhipeng    <span class="comment"># 允许apache对该目录作修改</span></div><div class="line">sudo <span class="keyword">chmod</span> -R g+ws zhangzhipeng</div></pre></td></tr></table></figure>
<h3 id="为新加的svn账号zhangzhipeng设置密码"><a href="#为新加的svn账号zhangzhipeng设置密码" class="headerlink" title="为新加的svn账号zhangzhipeng设置密码"></a>为新加的svn账号zhangzhipeng设置密码</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#后面再添加用户的时候(添加第二个用户及以后时)去掉-c选项。</span></div><div class="line">sudo htpasswd -c <span class="regexp">/etc/</span>aoache2<span class="regexp">/dav_svn.passwd zhangzhipeng</span></div></pre></td></tr></table></figure>
<h3 id="重启apache使设置生效"><a href="#重启apache使设置生效" class="headerlink" title="重启apache使设置生效"></a>重启apache使设置生效</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service apache2 <span class="built_in">restart</span></div></pre></td></tr></table></figure>
<p>即可在<a href="http://localhost/svn/zhangzhipeng处访问。" target="_blank" rel="external">http://localhost/svn/zhangzhipeng处访问。</a></p>
<hr>
<p>同时，如果需要在shell里进行svn的版本控制，需要对svn的repository进行权限设置：<br>具体可参考:</p>
<ul>
<li><a href="http://svnbook.red-bean.com/en/1.5/svn-book.pdf" target="_blank" rel="external">svn-book</a></li>
<li><a href="http://blog.chinaunix.net/uid-10167808-id-25994.html" target="_blank" rel="external"> SVN服务器之用户权限配置——authz文件 </a></li>
</ul>
<p>svn命令可参考<a href="http://www.tuicool.com/articles/M7FJbiq" target="_blank" rel="external">svn常用命令详解</a><br>安装过程也可参考</p>
<ul>
<li><a href="https://help.ubuntu.com/lts/serverguide/subversion.html" target="_blank" rel="external">Subversion官方指南</a></li>
<li><a href="http://www.blogjava.net/jasmine214--love/archive/2010/09/26/332989.html" target="_blank" rel="external">通过Apache来访问SVN的配置方法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Stunnel+Squid访问Facebook]]></title>
      <url>http://wlyPKU.github.io/2016/08/23/Stunnel-Squid%E8%AE%BF%E9%97%AEFacebook/</url>
      <content type="html"><![CDATA[<p>由于访问Google、Facebook、Dropbox等网站的途径被封锁，实验室需要一个能够直连外网的代理Proxy。因此，配置了stunnel+squid的代理。需要一台可以连接外网的VPS和能够连接VPS的实验室服务器。<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">       <span class="comment">主机</span>                <span class="comment">实验室服务器</span>                      <span class="comment">VPS</span></div><div class="line"><span class="comment">路径</span>     <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="title">[</span><span class="comment">stunnel客户端</span><span class="title">]</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="title">[</span><span class="comment">stunnel服务端</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">squid</span><span class="title">]</span></div><div class="line"><span class="comment">端口</span>                 <span class="comment">8080</span>                              <span class="comment">443</span>             <span class="comment">3128</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>stunnel的优点和shadowsocks一样,但是却比shadowsocks更安全,stunnel可以来ssl证书,比shadowsocks的密码认证更安全,也能有效的避免中间人攻击,把你的shadowsocks数据拦截下,然后暴力破解应该是易如反掌.</p>
<h1 id="squid安装"><a href="#squid安装" class="headerlink" title="squid安装"></a>squid安装</h1><p>单独的stunnel是无法使用的,必须配合http代理,如squid<br>ubuntu linux服务器端安装:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install squid3 stunnel4</div></pre></td></tr></table></figure></p>
<p>squid默认代理端口号3128,可自行修改,默认此代理只能本地有权限访问<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">grep</span> --color <span class="string">'http_port'</span> <span class="regexp">/etc/</span>squid3<span class="regexp">/squid.conf</span></div></pre></td></tr></table></figure></p>
<h1 id="stunnel的证书和服务器端配置"><a href="#stunnel的证书和服务器端配置" class="headerlink" title="stunnel的证书和服务器端配置"></a>stunnel的证书和服务器端配置</h1><h2 id="生成自定义证书"><a href="#生成自定义证书" class="headerlink" title="生成自定义证书:"></a>生成自定义证书:</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sudo -s </div><div class="line">cd /etc/stunnel</div><div class="line"><span class="selector-id">#stunnel</span>.pem是生成的证书文件名字</div><div class="line">openssl req -new -x509 -days <span class="number">365</span> -nodes -out stunnel<span class="selector-class">.pem</span> -keyout stunnel<span class="selector-class">.pem</span></div><div class="line">#生成证书的过程中需要填写一些国家城市公司等信息,全部随便填写即可</div><div class="line">#下面的命令执行的时间叫长 耐心等待</div><div class="line">openssl gendh <span class="number">2048</span> &gt;&gt; stunnel<span class="selector-class">.pem</span></div><div class="line">#出现unable to write <span class="string">'random state'</span>错误的请执行 rm ~/<span class="selector-class">.rnd</span></div><div class="line">#查看生成的证书相关信息</div><div class="line">openssl x509 -subject -dates -fingerprint -<span class="keyword">in</span> stunnel.pem</div></pre></td></tr></table></figure>
<h2 id="stunnel服务器对客户端证书的验证-stunnel的配置"><a href="#stunnel服务器对客户端证书的验证-stunnel的配置" class="headerlink" title="stunnel服务器对客户端证书的验证,stunnel的配置"></a>stunnel服务器对客户端证书的验证,stunnel的配置</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#查看stunnel默认配置,下面命令结果的最后一行是默认配置</span></div><div class="line">cat <span class="meta-keyword">/etc/</span>stunnel/README</div><div class="line"><span class="meta">#添加默认配置</span></div><div class="line">sudo cp <span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/doc/</span>stunnel4<span class="meta-keyword">/examples/</span>stunnel.conf-sample <span class="meta-keyword">/etc/</span>stunnel/stunnel.conf</div></pre></td></tr></table></figure>
<ol>
<li>编辑/etc/stunnel/stunnel.conf文件找到 chroot = /var/lib/stunnel4/这一行,假如有注释把注释去掉</li>
<li>开启调试模式,/etc/stunnel/stunnel.conf文件找到 debug = 7去掉注释,添加foreground = yes到debug = 7下面</li>
</ol>
<h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /var/<span class="class"><span class="keyword">lib</span>/<span class="title">stunnel4</span>/</span></div><div class="line">sudo mkdir certs</div><div class="line">cp /etc/stunnel/stunnel.pem certs/<span class="string">`openssl x509 -hash -noout -in /etc/stunnel/stunnel.pem`</span>.</div></pre></td></tr></table></figure>
<p>接下来编辑/etc/stunnel/stunnel.conf</p>
<ol>
<li>找到cert = /etc/stunnel/mail.pem修改成cert = /etc/stunnel/stunnel.pem,设置cert证书路径</li>
<li>找到verify = 2去掉注释改成verify = 3,开启证书有效性验证</li>
<li>找到CApath = /certs有注释去掉注释,这个目录是建立在chroot = /var/lib/stunnel4/基础上,实际就是/var/lib/stunnel4/certs目录,也就是验证证书的目录</li>
<li>找到CAfile = /etc/stunnel/certs.pem,有注释去掉注释,并改成之前生成自定义证书的目录:CAfile = /etc/stunnel/stunnel.pem</li>
</ol>
<p>关于证书的全部设置结束</p>
<h2 id="配置stunnel的端口和squid的http代理"><a href="#配置stunnel的端口和squid的http代理" class="headerlink" title="配置stunnel的端口和squid的http代理"></a>配置stunnel的端口和squid的http代理<br></h2><p>编辑/etc/stunnel/stunnel.conf,找到<br><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">; <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</div><div class="line">; <span class="bullet">* Service definitions (remove all services for inetd mode)               *</span></div><div class="line">; <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</div></pre></td></tr></table></figure></p>
<p>从这里一直文件结尾,全部删除,添加如下内容:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">[https]</span></div><div class="line"><span class="attr">accept</span>  = <span class="number">443</span></div><div class="line"><span class="attr">connect</span> = <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">3128</span></div></pre></td></tr></table></figure></p>
<p>简单解释:[https]这个https可以随便写, 3128是squid的http代理默认端口,stunnel将使用这个代理,也就是127.0.0.1:3128. connect部分是stunnel客户端将要连接的代理服务器地址和端口号,端口号443可自信随意修改.</p>
<p>stunnel服务器端的所有配置完毕,重新启动:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo killall stunnel4</div><div class="line">sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/stunnel4 start</span></div></pre></td></tr></table></figure></p>
<h1 id="Stunnel客户端配置"><a href="#Stunnel客户端配置" class="headerlink" title="Stunnel客户端配置"></a>Stunnel客户端配置</h1><p>最后是配置stunnel客户端:本人也是ubuntu系统 ubuntu desktop</p>
<h2 id="安装stunnel"><a href="#安装stunnel" class="headerlink" title="安装stunnel"></a>安装stunnel</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install stunnel4</div></pre></td></tr></table></figure>
<h2 id="添加默认配置文件"><a href="#添加默认配置文件" class="headerlink" title="添加默认配置文件"></a>添加默认配置文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cp <span class="regexp">/usr/</span>share<span class="regexp">/doc/</span>stunnel4<span class="regexp">/examples/</span>stunnel.conf-sample <span class="regexp">/etc/</span>stunnel<span class="regexp">/stunnel.conf</span></div></pre></td></tr></table></figure>
<p>开启stunnel调试模式,参考上面stunnel服务器端配置</p>
<h2 id="配置证书-1"><a href="#配置证书-1" class="headerlink" title="配置证书"></a>配置证书</h2><ol>
<li><p>把上面stunnel服务器端生成的证书,复制一份到本地<br>可以这样</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp 你的用户名@服务器地址<span class="symbol">:/etc/stunnel/stunnel</span>.pem /etc/stunnel/stunnel.pem</div></pre></td></tr></table></figure>
</li>
<li><p>编辑本地/etc/stunnel/stunnel.conf文件,设置证书路径:<br>找到<code>cert = /etc/stunnel/mail.pem</code>修改成<code>cert = /etc/stunnel/stunnel.pem</code></p>
</li>
<li>找到<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">; <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</div><div class="line">; <span class="bullet">* Service definitions (remove all services for inetd mode)               *</span></div><div class="line">; <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</div></pre></td></tr></table></figure>
</li>
</ol>
<p>一直到文件结尾全部删除,添加如下内容:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">[https]</span></div><div class="line"><span class="attr">client</span> = <span class="literal">yes</span></div><div class="line"><span class="attr">accept</span>  = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span></div><div class="line"><span class="attr">connect</span> = stunnel服务器地址:<span class="number">443</span></div></pre></td></tr></table></figure></p>
<p>简单解释:client = yes表示stunnel是运行的是客户端模式,默认没有代表服务器模式<br>accept  = 127.0.0.1:8080当然就是浏览器需要设置的http代理端口了<br>connect = stunnel服务器地址:443,请自行修改成你的服务器地址和上面设置的端口号44</p>
<h2 id="重启stunnel客户端"><a href="#重启stunnel客户端" class="headerlink" title="重启stunnel客户端"></a>重启stunnel客户端</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo killall stunnel4</div><div class="line">sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/stunnel4 start</span></div></pre></td></tr></table></figure>
<p>假如所有一切运行正常,然后可以关闭调试模式.注释 foreground = yes 一行<br>ubuntu命令行测试非常简单:本地终端执行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export http_proxy=<span class="string">'127.0.0.1:8080'</span></div><div class="line">wget www<span class="selector-class">.bing</span><span class="selector-class">.com</span></div></pre></td></tr></table></figure></p>
<p>若有失败错误,请自行查看调试信息!!</p>
<p>开机自启动可参考:/etc/stunnel/README文件所描述的,把stunnel服务器端和客户端的/etc/default/stunnel4文件里面的ENABLED设置成1</p>
<p>参考：<a href="http://www.myexception.cn/linux-unix/1713467.html" target="_blank" rel="external">vps的ubuntu linux下轻便搭建stunnel通过https代理上外网</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一阶机器学习优化算法Paper汇总]]></title>
      <url>http://wlyPKU.github.io/2016/08/23/%E4%B8%80%E9%98%B6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>对一阶机器学习优化算法ADMM、Coordinate Descent和Gradient Descent的paper加以简单整理。<br><a id="more"></a></p>
<h1 id="ADMM"><a href="#ADMM" class="headerlink" title="ADMM"></a>ADMM</h1><ul>
<li><p><a href="https://web.stanford.edu/~boyd/papers/pdf/admm_distr_stats.pdf" target="_blank" rel="external">Distributed Optimization and Statistical Learning via the Alternating Direction Method of Multipliers</a></p>
</li>
<li><p><a href="https://web.stanford.edu/~boyd/papers/pdf/admm_slides.pdf" target="_blank" rel="external">Alternating Direction Method of Multipliers (PPT)</a></p>
</li>
<li><p><a href="http://www.simonlucey.com/lasso-using-admm/" target="_blank" rel="external">LASSO using ADMM</a></p>
</li>
<li><p><a href="http://users.ece.gatech.edu/~justin/CVXOPT-Spring-2015/resources/14-notes-admm.pdf" target="_blank" rel="external">Alternating direction method of multipliers</a></p>
</li>
<li><p><a href="https://web.stanford.edu/~boyd/papers/admm/logreg-l1/logreg.html" target="_blank" rel="external">L1 logistic regression ADMM demo</a></p>
</li>
<li><p><a href="http://mullover.me/2016/01/19/admm-for-distributed-statistical-learning/" target="_blank" rel="external"><strong>用ADMM实现统计学习问题的分布式计算</strong></a></p>
</li>
<li><p><a href="http://joegaotao.github.io/cn/2014/02/admm/" target="_blank" rel="external"><strong>分布式计算、统计学习与ADMM算法</strong></a></p>
</li>
</ul>
<h1 id="Coordinate-Descent"><a href="#Coordinate-Descent" class="headerlink" title="Coordinate Descent"></a>Coordinate Descent</h1><ul>
<li><p><a href="http://www.slideshare.net/sanghyukchun/131121-2-coordinate-descent-method" target="_blank" rel="external">Coordinate Descent method(PPT)</a></p>
</li>
<li><p><a href="https://www.cs.cmu.edu/~ggordon/10725-F12/slides/25-coord-desc.pdf" target="_blank" rel="external">Coordinate descent(PPT)</a></p>
</li>
<li><p><a href="http://www.jmlr.org/papers/volume13/yuan12a/yuan12a.pdf" target="_blank" rel="external">An Improved GLMNET for L1-regularized Logistic Regression</a></p>
</li>
<li><p><a href="http://www.optimization-online.org/DB_FILE/2014/12/4679.pdf" target="_blank" rel="external">Coordinate Descent Algorithms</a></p>
</li>
<li><p><a href="http://www.csie.ntu.edu.tw/~cjlin/papers/l1.pdf" target="_blank" rel="external"><strong>A Comparison of Optimization Methods and Software for Large-scale L1-regularized Linear Classification
</strong></a></p>
</li>
<li><p><a href="https://arxiv.org/pdf/0803.3876.pdf" target="_blank" rel="external">COORDINATE DESCENT ALGORITHMS FOR LASSO PENALIZED REGRESSION</a></p>
</li>
<li><p><a href="https://github.com/acharuva/svm_cd/blob/master/svm_cd.py" target="_blank" rel="external">SVM Coordinate demo</a></p>
</li>
</ul>
<p>parallel</p>
<ul>
<li><a href="https://arxiv.org/pdf/1105.5379v1.pdf" target="_blank" rel="external">Parallel Coordinate Descent for L1-Regularized Loss Minimization</a></li>
<li><a href="https://www.csie.ntu.edu.tw/~cjlin/papers/multicore_cddual.pdf" target="_blank" rel="external">Parallel Dual Coordinate Descent Method for Large-scale Linear Classification in Multi-core Environments(SVM parallel)</a></li>
</ul>
<h1 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h1><ul>
<li><p><a href="http://www.cs.rpi.edu/~magdon/courses/LFD-Slides/SlidesLect09.pdf" target="_blank" rel="external">Logistic Regression and Gradient Descent(PPT)</a></p>
</li>
<li><p><a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2012/01/tricks-2012.pdf" target="_blank" rel="external"><strong>Stochastic Gradient Descent Tricks</strong></a></p>
</li>
</ul>
<p>variants</p>
<ul>
<li><a href="http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf" target="_blank" rel="external">Adaptive Subgradient Methods for Online Learning and Stochastic Optimization</a></li>
<li><a href="https://arxiv.org/pdf/1212.5701v1.pdf" target="_blank" rel="external">ADADELTA: AN ADAPTIVE LEARNING RATE METHOD</a></li>
<li><a href="https://arxiv.org/pdf/1412.6980v8.pdf" target="_blank" rel="external">ADAM: A METHOD FOR STOCHASTIC OPTIMIZATION</a></li>
<li><a href="http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf" target="_blank" rel="external">RMSprop(ppt)</a></li>
<li><a href="https://arxiv.org/pdf/1312.6055v3.pdf" target="_blank" rel="external">Unit Tests for Stochastic Optimization</a><br>parallel</li>
<li><a href="https://people.eecs.berkeley.edu/~brecht/papers/hogwildTR.pdf" target="_blank" rel="external">Hogwild!: A Lock-Free Approach to Parallelizing Stochastic Gradient Descent</a></li>
<li><a href="http://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/43138.pdf" target="_blank" rel="external">Delay-Tolerant Algorithms for Asynchronous Distributed Online Learning</a></li>
<li><a href="https://papers.nips.cc/paper/4687-large-scale-distributed-deep-networks.pdf" target="_blank" rel="external">Large Scale Distributed Deep Networks(Downpour SGD)</a></li>
<li><p><a href="https://arxiv.org/pdf/1412.6651v8.pdf" target="_blank" rel="external">Deep learning with Elastic Averaging SGD</a></p>
</li>
<li><p><a href="http://sebastianruder.com/optimizing-gradient-descent/" target="_blank" rel="external"><strong>An overview of gradient descent optimization algorithms</strong></a></p>
</li>
</ul>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ul>
<li><a href="http://mlss.tuebingen.mpg.de/2013/wright_slides.pdf" target="_blank" rel="external"><strong>Optimization (and Learning)</strong></a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用GitHub Pages和Hexo快速搭建个人博客]]></title>
      <url>http://wlyPKU.github.io/2016/08/23/%E5%88%A9%E7%94%A8GitHub-Pages%E5%92%8CHexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><a href="http://hexo.io" target="_blank" rel="external">hexo</a>是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的@tommy351。本文是利用Github和Hexo搭建博客的教程。</p>
<p><div align="center"><br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/hexo.png" alt="hexo.png" title=""><br></div><br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>“工欲善其事，必先利其器”，在搭建个人博客的过程中，我深刻体会到这句话的含义。虽然早就决定了要搭建个人博客，但是我并没有草草动手，而是提前做了大量的调研工作，包括采用哪种博客系统、选择哪种主题、怎么购买并绑定个性域名等等。事实证明，正因为前期的充分准备，搭建过程才能按部就班地进行。下面先介绍为何选择GitHub Pages和Hexo来搭建博客，然后介绍搭建博客的详细过程。这篇文章可能长的让人想哭，但如果你坚持看完了，肯定会有收获的。此外，本教程不仅面向计算机专业的同学，任何想搭建个人独立博客的同学，都可以来看看。</p>
<h1 id="why-GitHub-Pages-and-Hexo"><a href="#why-GitHub-Pages-and-Hexo" class="headerlink" title="why GitHub Pages and Hexo"></a>why GitHub Pages and Hexo</h1><p>之前在关于我里面提到过，搭建博客会有三个阶段，我选择的是第三种方法。因为GitHub的存在，我们得以简单快速地搭建个人博客。</p>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>GitHub，是一个代码托管网站和社交编程网站。这里聚集了世界上各路技术牛叉的大牛，和最优秀的代码库。把你的博客托管在这里，还有什么不放心的呢O(∩_∩)O。</p>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>GitHub Pages，是用来托管GitHub上静态网页的免费站点，那GitHub Pages具体有哪些功能呢：</p>
<ul>
<li><p>有300M免费空间，资料自己管理，保存可靠；</p>
</li>
<li><p>享受 GitHub 的便利，上面有很多大牛，眼界会开阔很多；</p>
</li>
<li><p>可以使用很多现成的博客框架，搭建过程简单快速。</p>
</li>
</ul>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo是一个简单、快速、强大的静态博客框架,出自台湾大学生tommy351之手。我也看过使用Jekyll、Octopress搭建个人博客的过程，确实要繁琐许多。相比之下Hexo更轻便更快捷，下面是Hexo官网强调Hexo的四大特点：</p>
<ul>
<li><p>极速生成静态页面</p>
</li>
<li><p>支持Markdown</p>
</li>
<li><p>一键部署博客</p>
</li>
<li><p>丰富的插件支持</p>
</li>
</ul>
<p>相信大家对GitHub Pages和Hexo有了一定的了解，下面进入正题。</p>
<h1 id="使用GitHub-Pages建立博客站点"><a href="#使用GitHub-Pages建立博客站点" class="headerlink" title="使用GitHub Pages建立博客站点"></a>使用GitHub Pages建立博客站点</h1><h2 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h2><p>访问GitHub,注册十分简单，一定要记住注册时使用的邮箱，因为 GitHub 上很多通知都是通过邮箱的。如下图所示：<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/blogsignupGithub.png" alt="blogsignupGithub.png" title=""><br>申请成功后，在GitHub官网上登录，并验证邮箱即可。</p>
<h2 id="在GitHub上建立仓库"><a href="#在GitHub上建立仓库" class="headerlink" title="在GitHub上建立仓库"></a>在GitHub上建立仓库</h2><p>与 GitHub 建立好连接之后，就可以方便的使用它提供的 Pages 服务，GitHub Pages 分两种，一种是用你的GitHub用户名建立的username.github.io这样的用户&amp;组织站点，另一种是依附项目的Pages。</p>
<p>想建立个人博客是用的第一种，形如username.github.io这样的可访问的站点，每个用户名下面只能建立一个。如下图所示：<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/blogcreateRepo1.png" alt="blogcreateRepo1.png" title=""></p>
<img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/blogcreateRepo2.png" alt="blogcreateRepo2.png" title="">
<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>依次下载并安装下面两个软件，一直点击下一步即可：</p>
<ul>
<li><p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></p>
</li>
<li><p><a href="https://desktop.github.com/" target="_blank" rel="external">GitHub for Windows</a></p>
</li>
</ul>
<h2 id="使用GitHub-for-Windows登录GitHub"><a href="#使用GitHub-for-Windows登录GitHub" class="headerlink" title="使用GitHub for Windows登录GitHub"></a>使用GitHub for Windows登录GitHub</h2><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/blogsignin1.png" alt="blogsignin1.png" title="">
<img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/blogsignin2.png" alt="blogsignin2.png" title="">
<img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/blogsignin3.png" alt="blogsignin3.png" title="">
<h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p>我们如何让本地git项目与远程的GitHub建立联系呢？用SSH key。在桌面或开始菜单中找到 Git Shell，打开后输入以下命令：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure></p>
<p>如图：<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/blogssh1.png" alt="blogssh1.png" title=""></p>
<p>如果是下面之类的反馈（或者显示 Hi xxx）：</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (207.97.227.239)' can't be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)?</span></div></pre></td></tr></table></figure>
<p>不用紧张，输入 yes 之后,看到下图的结果，就配置成功了：<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/blogssh2.jpg" alt="blogssh2.jpg" title=""></p>
<h1 id="使用Hexo创建博客框架"><a href="#使用Hexo创建博客框架" class="headerlink" title="使用Hexo创建博客框架"></a>使用Hexo创建博客框架</h1><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>打开 Git Shell，启动后依次输入以下命令：<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /</div><div class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> <span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org/</div><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure></p>
<p>如图：<br></p>
<h2 id="Hexo部署"><a href="#Hexo部署" class="headerlink" title="Hexo部署"></a>Hexo部署</h2><p>Hexo的部署可采用如下方法，输入命令： hexo init [文件名]。</p>
<p>打开Git Shell，启动后依次输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /</div><div class="line">hexo init Hexo</div></pre></td></tr></table></figure></p>
<p>回车后出现该提示则表示正确：<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/bloghexo2.png" alt="bloghexo2.png" title=""></p>
<p>这时会发现 C盘根目录下（或是 Git Shell 里指定的目录下）会多出一个文件夹，名为 Hexo。再输入以下命令，安装依赖文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> Hexo</div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>回车后出现该提示则表示正确：<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/bloghexo3.jpg" alt="bloghexo3.jpg" title=""></p>
<p>部署成功之后，Hexo 会自动在目标文件夹建立博客网站所需要的所有文件。此时可以通过输入以下命令在本地进行预览（在刚才创建的文件夹里）：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span> </div><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>系统可能会出现提示，请点击允许。如下图所示则表示正确：<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/bloghexo4.jpg" alt="bloghexo4.jpg" title=""></p>
<p>此时打开浏览器，在浏览器地址栏输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> （默认端口为4000）, 便可以看到最原始的博客了。以后发表博文想先预览，也可以通过 hexo server 在本地先跑起来，看看效果。(我在进行这步的时候由于端口号冲突始终没能成功显示，修改端口号也没用，所以最后直接发布到博客预览)。</p>
<p>效果如下图所示：<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/bloghexo5.png" alt="bloghexo5.png" title=""></p>
<p>恭喜，到目前为止个人博客的雏形已经有了。</p>
<p>在 Git Shell 中按 Ctrl + C 并输入 y 可以停止该服务。</p>
<h1 id="将本地文件部署到-GitHub"><a href="#将本地文件部署到-GitHub" class="headerlink" title="将本地文件部署到 GitHub"></a>将本地文件部署到 GitHub</h1><h2 id="修改-Hexo-中的-config-yml-文件"><a href="#修改-Hexo-中的-config-yml-文件" class="headerlink" title="修改 Hexo 中的 _config.yml 文件"></a>修改 Hexo 中的 _config.yml 文件</h2><p>在 Hexo 文件夹下找到 _config.yml 文件,如下图所示：</p>
<img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/bloghexo6.png" alt="bloghexo6.png" title="">
<p>找到其中的 deploy 标签，改成下图所示形式，并保存。<strong>注意：冒号后面要加上一个空格，否则会报错。</strong><br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/bloghexo7.png" alt="bloghexo7.png" title=""></p>
<h2 id="将其-deploy-到仓库中"><a href="#将其-deploy-到仓库中" class="headerlink" title="将其 deploy 到仓库中"></a>将其 deploy 到仓库中</h2><p>打开 Git Shell 进入创建的文件夹，依次输入以下命令：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo <span class="keyword">generate</span></div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>如果出现下图错误，不要着急：<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/bloghexo8.png" alt="bloghexo8.png" title=""><br>将deploy 的 type 改成 git，然后再在 Git Shell 中运行以下命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>再重新来一遍：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo <span class="keyword">generate</span></div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>出现以下提示则表示正确：<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/bloghexo9.jpg" alt="bloghexo9.jpg" title=""></p>
<p>恭喜，到这一步，个人博客就已经部署到 GitHub 上了，你可以到你的<a href="http://www.github.com" target="_blank" rel="external">GitHub</a>仓库查看是否已经更新。此时,通过 your_user_name.github.io（即你那个仓库的名称，形如：”你的 GitHub 用户名”.github.io）,就可以看到你的个人博客了。</p>
<p>同时需要将<code>_config.yml</code>中的<code>url</code>改为<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">url:</span> <span class="string">http:</span><span class="comment">//your_user_name.github.io</span></div></pre></td></tr></table></figure></p>
<p>以便后面的评论和Sitemap的设置。</p>
<p>提示：上述搭建步骤大量参考了<a href="http://yangruihan.com/" target="_blank" rel="external">yangruihan</a>的博客，如果你对搭建过程还有疑问，可以查看他的原创博文：<a href="http://yangruihan.com/2015/03/22/Windows%E4%B8%8B%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8%20GitHub%20Pages%20+%20Hexo%20%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">Windows下一步步搭建自己的独立博客——使用 GitHub Pages + Hexo 基础教程（一）</a>。</p>
<h1 id="发表博文"><a href="#发表博文" class="headerlink" title="发表博文"></a>发表博文</h1><p>辛苦了这么久，终于回到我们搭建博客最初的目标–写作，现在来看看怎么写博文并发表吧</p>
<h2 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h2><p>我们可以使用命令新建一篇博文,使用 Git Shell 进入 Hexo 文件夹，输入以下命令：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"文章题目"</span></div></pre></td></tr></table></figure>
<p>命令执行完后，就会发现在 Hexo\source_posts 目录中多了一个文件博文名.md，这就是我们刚才新建的博文。</p>
<p>此外，我们也可以直接进入 Hexo\source_posts 目录中，右键新建一个文本文档，将名字改为博文名.md,这样也新建了一篇博文。<br>上面新建的博文是显示在单个文章界面，这里新建的页面是作为单个页面显示的，比如下图的分类、标签、归档和关于我，你点击后都是显示为单个页面。<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/blogwrite1.png" alt="blogwrite1.png" title=""><br>你只需要记住新建博文是用上面的方法，新建页面是用这里的方法就行了，这里也采用命令新建页面：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> page <span class="string">"页面名称"</span></div></pre></td></tr></table></figure></p>
<p>命令执行完后，就会发现在在 Hexo\source 目录中多了一个文件夹，里面还有一个index.md,这就代表我们新建了一个页面。</p>
<h2 id="写博文"><a href="#写博文" class="headerlink" title="写博文"></a>写博文</h2><p>用文本编辑器打开上面新建的博文，如下图所示：</p>
<img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/blogwrite2.png" alt="blogwrite2.png" title="">
<p>新建的页面略有不同，没有tags和categories标签。</p>
<p>三个”-“后面就是博文的正文内容，接下来就是正儿八经地撰写博文了。</p>
<p>因为我们的博文都是用<a href="http://baike.baidu.com/link?url=IbmQI2KgUUPKG7au6ae9bYTbSZl2ctDyPmHF2RZh2j4tPMKYjjyqERYyqCMHp5rdE5G-x9y7BLyNvBXMpi9tsK" target="_blank" rel="external">Markdown</a>语言写的，所以首先，你需要一个好用的Markdown编辑器。其实好用的Markdown编辑器一大堆，这里就给大家推荐两个，如果你用的不习惯也可以换其它的。</p>
<ul>
<li><p>本地编辑器：<a href="http://pad.haroopress.com/user.html" target="_blank" rel="external">Haroopad</a>,非常小众的一款Markdown编辑器，左边编辑右边实时预览效果，非常轻便;</p>
</li>
<li><p>在线编辑器：<a href="http://mahua.jser.me/" target="_blank" rel="external">MaHua</a>,也是比较小众的一款Markdown编辑器，但效果确实很棒，我的这篇博文就是用MaHua写的。</p>
</li>
</ul>
<p>现在你可以打开新建的博文了，然而还不造怎么下手对吧。其实很简单，除了特殊格式，其它的你就当做在word里面写文章就行了，具体请看这里的Markdown教程：<a href="http://www.jianshu.com/p/1e402922ee32/#" target="_blank" rel="external">Markdown——入门指南</a>。</p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>在站点配置文件_config.yml中修改post_asset_folder：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">post_asset_folder:</span><span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>然后执行下面命令重新生成<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo <span class="keyword">generate</span></div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>当创建新的页面<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"page"</span></div></pre></td></tr></table></figure></p>
<p>时,可以发现在/source/_posts/文件夹中存在一个同名的资源文件夹,将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p>
<h3 id="相对路径引用的标签插件"><a href="#相对路径引用的标签插件" class="headerlink" title="相对路径引用的标签插件"></a>相对路径引用的标签插件</h3><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">asset_path</span> slug %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name">asset_img</span> slug [title] %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name">asset_link</span> slug [title] %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure></p>
<p>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法<code>![](/example.jpg)</code>，它将<strong>不会</strong>出现在首页上。（但是它会在文章中按你期待的方式工作）<br>正确的引用图片方式是使用下列的标签插件而不是 markdown ：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="symbol">%</span> asset_img <span class="built_in">example</span>.jpg This <span class="built_in">is</span> an <span class="built_in">example</span> <span class="built_in">image</span> <span class="symbol">%</span>&#125;</div></pre></td></tr></table></figure></p>
<p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p>
<h2 id="发博文"><a href="#发博文" class="headerlink" title="发博文"></a>发博文</h2><p>呼啦啦，博文写好了，你得发表出去别人才看得到呀。依然在 Git Shell 中进入 Hexo 文件夹，执行下面几条命令，将博客部署到 GitHub 上：</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo <span class="keyword">generate</span></div><div class="line"><span class="variable">#(若要本地预览就先执行 hexo server)</span></div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>快捷命令:<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo g == hexo <span class="keyword">generate</span></div><div class="line">hexo d == hexo deploy</div><div class="line">hexo s == hexo server</div><div class="line">hexo n == hexo <span class="keyword">new</span></div></pre></td></tr></table></figure></p>
<p> 还能组合使用，如：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo d -g</span></div></pre></td></tr></table></figure></p>
<p>刷新你的个人博客，就可以看到新鲜出炉的博文了，赶紧邀请小伙伴们来欣赏吧。</p>
<p>话外音:其实到这里，你已经学会了怎么搭建并发表博客，所以最初的目标已经实现，可以happy地写博客去啦。后面是我自己的选修课，如果你也愿意像我一样折腾，就继续往下看吧O(∩_∩)O。</p>
<h1 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h1><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>我们刚才使用Hexo生成的博客使用的是Hexo的默认主题：<a href="https://hexo.io/hexo-theme-landscape/" target="_blank" rel="external">Landscape</a>。怎么说呢，这个主题猛地一看还行，仔细一看还不如猛地一看，所以我决定另寻归宿。</p>
<p>然后，我来到了这里：<a href="https://github.com/hexojs/wiki/Themes" target="_blank" rel="external">Themes·Hexo</a>,瞬间有了一种村姑进城的感觉。我是一个一个地看，看得我眼花缭乱也没一个抉择，最后综合网友的评价，选择了这个主题：<a href="http://notes.iissnan.com/" target="_blank" rel="external">NexT</a>。</p>
<ul>
<li><p>简洁大方，比较符合我的品位；</p>
</li>
<li><p>作者<a href="http://notes.iissnan.com/" target="_blank" rel="external">iissnan</a>很勤快，持续更新主题，作者博客的样式就是他正在开发而未上线的NexT主题新样式。</p>
</li>
</ul>
<p>当然，每个人的品位都不一样，你也可以选择其它的主题，当然也欢迎你选择NexT主题，这样就能继续一起愉快地折腾啦。</p>
<h2 id="安装NexT主题-1"><a href="#安装NexT主题-1" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h2><p>Hexo 有两份主要的配置文件（_config.yml），一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong>。</p>
<h2 id="下载-NexT-主题"><a href="#下载-NexT-主题" class="headerlink" title="下载 NexT 主题"></a>下载 NexT 主题</h2><p>使用 Git Shell 进入 Hexo 文件夹，输入以下两条命令：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> Hexo</div><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></div></pre></td></tr></table></figure></p>
<h2 id="启用NexT主题"><a href="#启用NexT主题" class="headerlink" title="启用NexT主题"></a>启用NexT主题</h2><p>下载完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。</p>
<h2 id="验证主题是否启用"><a href="#验证主题是否启用" class="headerlink" title="验证主题是否启用"></a>验证主题是否启用</h2><p>执行上面发博文的命令，刷新你的个人博客，就能看到你设置的主题是否启用。</p>
<h1 id="设置NexT主题和第三方服务"><a href="#设置NexT主题和第三方服务" class="headerlink" title="设置NexT主题和第三方服务"></a>设置NexT主题和第三方服务</h1><p>安装完NexT之后，还是发现不够漂亮对不对，所以下面我们来慢慢地润色你的个人博客。</p>
<h2 id="支持Latex"><a href="#支持Latex" class="headerlink" title="支持Latex"></a>支持Latex</h2><p>经过一番google之后，发现有位高手已经写好了一个自动部署MathJax的hexo插件<br><a href="http://catx.me/2014/03/09/hexo-mathjax-plugin/" target="_blank" rel="external">Hexo MathJax插件</a><br>安装方式也很简单，在你的博客文件夹下执行——<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-<span class="built_in">math</span> <span class="comment">--save</span></div><div class="line">hexo <span class="built_in">math</span> install</div></pre></td></tr></table></figure></p>
<p>然后在新建的博文中写上一个麦克斯韦方程组查看LaTeX效果——<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$$</span></div><div class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;eqnarray&#125;</span></span></div><div class="line"><span class="tag">\<span class="name">nabla</span></span><span class="tag">\<span class="name">cdot</span></span><span class="tag">\<span class="name">vec</span><span class="string">&#123;E&#125;</span></span> &amp;=&amp; <span class="tag">\<span class="name">frac</span><span class="string">&#123;\rho&#125;</span><span class="string">&#123;\epsilon_0&#125;</span></span> <span class="tag">\<span class="name">\</span></span></div><div class="line"><span class="tag">\<span class="name">nabla</span></span><span class="tag">\<span class="name">cdot</span></span><span class="tag">\<span class="name">vec</span><span class="string">&#123;B&#125;</span></span> &amp;=&amp; 0 <span class="tag">\<span class="name">\</span></span></div><div class="line"><span class="tag">\<span class="name">nabla</span></span><span class="tag">\<span class="name">times</span></span><span class="tag">\<span class="name">vec</span><span class="string">&#123;E&#125;</span></span> &amp;=&amp; -<span class="tag">\<span class="name">frac</span><span class="string">&#123;\partial B&#125;</span><span class="string">&#123;\partial t&#125;</span></span> <span class="tag">\<span class="name">\</span></span></div><div class="line"><span class="tag">\<span class="name">nabla</span></span><span class="tag">\<span class="name">times</span></span><span class="tag">\<span class="name">vec</span><span class="string">&#123;B&#125;</span></span> &amp;=&amp; <span class="tag">\<span class="name">mu</span></span>_0<span class="tag">\<span class="name">left</span></span>(<span class="tag">\<span class="name">vec</span><span class="string">&#123;J&#125;</span></span>+<span class="tag">\<span class="name">epsilon</span></span>_0<span class="tag">\<span class="name">frac</span><span class="string">&#123;\partial E&#125;</span><span class="string">&#123;\partial t&#125;</span></span> <span class="tag">\<span class="name">right</span></span>)</div><div class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;eqnarray&#125;</span></span></div><div class="line">$$</div></pre></td></tr></table></figure></p>
<p>这时如果你会发现出了一些问题，原因是hexo先用marked.js渲染，然后再交给MathJax渲染。在marked.js渲染的时候下划线<code>_</code>是被escape掉并且换成了<code>&lt;em&gt;</code>标签，即斜体字，另外LaTeX中的<code>\\</code>也会被转义成一个<code>\</code>，这样会导致MathJax渲染时不认为它是一个换行符了。</p>
<p>因此我提供一个修改marked.js源码的方式来避开这些问题</p>
<ul>
<li>针对下划线的问题，我决定取消<code>_</code>作为斜体转义，因为marked.js中<code>*</code>也是斜体的意思，所以取消掉<code>_</code>的转义并不影响我们使用markdown，只要我们习惯用<code>*</code>作为斜体字标记就行了。 </li>
<li>针对marked.js与Mathjax对于个别字符二次转义的问题，我们只要不让marked.js去转义<code>\\,\{,\}</code>在MathJax中有特殊用途的字符就行了。 </li>
</ul>
<p>具体修改方式，用编辑器打开marked.js（在./node_modules/marked/lib/中）<br>Step 1:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">escape: /^\\([<span class="string">\\`*&#123;&#125;\[\</span>](<span class="link"></span>)# +\-.!_&gt;])/,</div></pre></td></tr></table></figure></p>
<p>替换成<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">escape: /^\\([<span class="string">`*\[\</span>](<span class="link"></span>)# +\-.!_&gt;])/,</div></pre></td></tr></table></figure></p>
<p>这一步是在原基础上取消了对\\,\{,\}的转义(escape)</p>
<p>Step 2:<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">em: /^<span class="symbol">\b</span>_((?:[^_]|__)+?)_<span class="symbol">\b</span>|^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/,</div></pre></td></tr></table></figure></p>
<p>替换成<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">em:/^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/,</div></pre></td></tr></table></figure></p>
<p>这样一来MathJax就能与marked.js共存了。重启一下hexo看一下吧!</p>
<h2 id="选择样式"><a href="#选择样式" class="headerlink" title="选择样式"></a>选择样式</h2><p>NexT默认的样式其实也比较丑，幸好作者提供了一款十分漂亮的样式:Mist。启用 Mist 很简单，仅需在 主题配置文件 中将 #scheme: Mist 前面的 # 注释去掉即可。</p>
<h2 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h2><p>菜单配置在 主题配置文件 的 menu，下面是菜单配置示例：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">menu</span>:</div><div class="line">  #home: /</div><div class="line">  archive<span class="variable">s:</span> /archives</div><div class="line">  abou<span class="variable">t:</span> /about</div><div class="line">  categorie<span class="variable">s:</span> /categories</div><div class="line">  <span class="keyword">tag</span><span class="variable">s:</span> /<span class="keyword">tags</span></div><div class="line">  #commonwea<span class="variable">l:</span> /<span class="number">404</span>.html</div></pre></td></tr></table></figure></p>
<p>其它的很多在<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT官方文档</a>里面已经讲的很清楚了，我就不在这里重复造轮子了，下面我只讲下NexT官方文档里没有提到过的地方。</p>
<ul>
<li><p>sitemap : <a href="http://baike.baidu.com/link?url=Hvuhn8v3mmoNI6iVHm_NrZilTuHxsvLfpZJWZQwlZ4mjAAw_Bd4M_M8AnlPMj_L1Jv2tjFCdTdsV32iuwo_Qwq" target="_blank" rel="external">sitemap</a>是一个包含网站中的所有网址以及每个网址的其他元数据的文件，以便搜索引擎可以更加智能地抓取网站。我们先来看看Hexo支持哪些插件：<a href="https://hexo.io/plugins/" target="_blank" rel="external">Plugins | Hexo</a>,可以看到有<a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="external">hexo-generator-sitemap</a>这个插件，在README.md文件中已经讲述了安装方法，只是要注意sitemap这个标签要加在主题配置文件中。再次部署你的博客，看到你的GitHub仓库中多了sitemap.xml文件，那么sitemap就部署成功了。</p>
</li>
<li><p>多说评论框 : 多说评论框默认的样式确实比较丑，请看这里美哭的效果：<a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="external">多说自定义CSS 让你的多说评论动感起来</a>；另外，在设置<strong>评论显示样式</strong>时，可以设置为<strong>嵌套显示</strong>，美观了不少。</p>
</li>
<li><p>生成favicon : 所谓<a href="http://baike.baidu.com/link?url=shMog2srG2OphNuZNmQ8LseNMOWIrNwyppJ1YP0TwDp3VUYnzBjiPqb41Cqjr-84wwhZnG55cN_-Cp40ybKjNa" target="_blank" rel="external">favicon</a>,即Favorites Icon,顾名思义，就是收藏夹图标，也是地址栏左边的图标。如果没有设置favicon,地址栏左边就是一片空白，把favicon成你喜欢的图片，打造个性化标志，博客瞬间生动了不少。这里推荐一个网站，可以在线生成favicon,简单实用：<a href="http://www.atool.org/ico.php" target="_blank" rel="external">在线透明favicon ico图标文件制作 - aTool在线工具</a>。生成favcion后，再按照NexT官方文档的方法，就能设置favicon了。</p>
</li>
</ul>
<h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>NexT 支持 <a href="http://duoshuo.com/" target="_blank" rel="external">多说</a> 和 <a href="https://disqus.com/" target="_blank" rel="external">DISQUS</a> 评论系统。 当同时设置了多说和DISQUS时，优先选择多说(已宣布2017/06关闭)。 NexT内置了一套多说的样式。<br><strong>如需取消某个 页面/文章 的评论，在 md 文件的 <a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="external">front-matter</a> 中增加<code>comments: false</code> </strong></p>
<h3 id="多说-已宣布2017-06关闭"><a href="#多说-已宣布2017-06关闭" class="headerlink" title="多说(已宣布2017/06关闭)"></a>多说(已宣布2017/06关闭)</h3><p>使用多说前需要先在<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a> 创建一个站点。具体步骤如下：</p>
<ol>
<li>登录后在首页选择 “我要安装”。</li>
<li><p>创建站点，填写表单。<strong>多说域名</strong>这一栏填写的即是你的 <code>duoshuo_shortname</code>，如图：</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">asset_img</span> duoshuo-create-site.png  %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
</li>
<li><p>创建站点完成后在<strong>站点配置文件</strong>中新增<code>duoshuo_shortname</code>字段，值设置成上一步中的值。</p>
</li>
</ol>
<p>同时可以在多说的控制台界面中选择多种样式与属性选项。如嵌套回复、多说分享等。</p>
<h4 id="多说分享"><a href="#多说分享" class="headerlink" title="多说分享"></a>多说分享</h4><p>多说分享必须与多说评论同时使用</p>
<p>编辑 <strong>站点配置文件</strong>， 添加字段<code>duoshuo_share</code>， 值为<code>true</code>。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 多说分享服务</span></div><div class="line"><span class="attr">duoshuo_share:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h3 id="DISUQS"><a href="#DISUQS" class="headerlink" title="DISUQS"></a>DISUQS</h3><p>编辑<strong>站点配置文件</strong>， 添加 <code>disqus_shortname</code>字段，设置如下：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">disqus_shortname:</span> your-disqus-shortname</div></pre></td></tr></table></figure></p>
<p>进入disqus官网， 点击下图示意的位置，给自己的网站添加disqus，<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/disqus_1.png" alt="disqus_1.png" title=""><br>点击后，出现下图，输入网站名字。然后在第二个输入框填写自己的唯一disqus识别名称，这个名称会在后面用到，比如我这里填写的是我最常用的absea。然后点击Next按钮<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/disqus_2.png" alt="disqus_2.png" title=""><br>上面点击Next后就会出现下面页面，这里面会有disqus在不同博客系统上或者其他系统上对应的代码。因为hexo自带支持disqus，所以不需要这里面的代码，这个页面的内容会在其他除hexo之外的博客系统中用到，如果是hexo搭建博客disqus，可以跳过。<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/disqus_3.png" alt="disqus_3.png" title=""><br>然后在主题的配置文件_config.yml的disqus后面添加step 2中使用的唯一的disqus识别名字。<br><img src="/2016/08/23/利用GitHub-Pages和Hexo快速搭建个人博客/disqus_4.png" alt="disqus_4.png" title=""><br>然后就配置好啦！</p>
<h2 id="搜索服务-Local-Search"><a href="#搜索服务-Local-Search" class="headerlink" title="搜索服务(Local Search)"></a>搜索服务(Local Search)</h2><p>添加百度/谷歌/本地 自定义站点内容搜索</p>
<ol>
<li><p>安装 hexo-generator-search，在站点的根目录下执行以下命令：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span> <span class="comment">--save</span></div></pre></td></tr></table></figure>
</li>
<li><p>编辑 站点配置文件，新增以下内容到任意位置：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">	path: search.<span class="keyword">xml</span></div><div class="line">	<span class="title">field</span>: post</div></pre></td></tr></table></figure>
</li>
</ol>
<p>第三方的服务可以参考:<br><a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="external">NexT官方文档</a><br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo官方文档</a></p>
]]></content>
    </entry>
    
  
  
</search>
